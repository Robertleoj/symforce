// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual from a relative translation mesurement of a 3D pose to a landmark.
 *
 * Args:
 *     world_T_body: 3D pose of the robot in the world frame
 *     world_t_landmark: World location of the landmark
 *     body_t_landmark: Measured body-frame location of the landmark
 *     sigma: Isotropic standard deviation of the measurement [m]
 *     jacobian: (3x6) jacobian of res wrt arg world_T_body (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg world_T_body (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg world_T_body (6)
 */
template <typename Scalar>
void MatchingFactor(const sym::Pose3<Scalar>& world_T_body,
                    const Eigen::Matrix<Scalar, 3, 1>& world_t_landmark,
                    const Eigen::Matrix<Scalar, 3, 1>& body_t_landmark, const Scalar sigma,
                    Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                    Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                    Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                    Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 284

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _world_T_body = world_T_body.Data();

  // Intermediate terms (91)
  const Scalar _tmp0 = Scalar(1.0) / (sigma);
  const Scalar _tmp1 = std::pow(_world_T_body[2], Scalar(2));
  const Scalar _tmp2 = std::pow(_world_T_body[1], Scalar(2));
  const Scalar _tmp3 = _tmp1 + _tmp2 + Scalar(-1) / Scalar(2);
  const Scalar _tmp4 = 2 * world_t_landmark(0, 0);
  const Scalar _tmp5 = _world_T_body[0] * _world_T_body[2];
  const Scalar _tmp6 = _world_T_body[1] * _world_T_body[3];
  const Scalar _tmp7 = _tmp5 - _tmp6;
  const Scalar _tmp8 = _tmp7 * _world_T_body[6];
  const Scalar _tmp9 = _world_T_body[2] * _world_T_body[3];
  const Scalar _tmp10 = _world_T_body[0] * _world_T_body[1];
  const Scalar _tmp11 = _tmp10 + _tmp9;
  const Scalar _tmp12 = _tmp11 * _world_T_body[5];
  const Scalar _tmp13 = 2 * world_t_landmark(1, 0);
  const Scalar _tmp14 = _tmp11 * _tmp13;
  const Scalar _tmp15 = 2 * world_t_landmark(2, 0);
  const Scalar _tmp16 = _tmp15 * _tmp7;
  const Scalar _tmp17 = _tmp14 + _tmp16;
  const Scalar _tmp18 = -2 * _tmp12 + _tmp17 - _tmp3 * _tmp4 + 2 * _tmp3 * _world_T_body[4] -
                        2 * _tmp8 - body_t_landmark(0, 0);
  const Scalar _tmp19 = std::pow(_world_T_body[0], Scalar(2));
  const Scalar _tmp20 = _tmp19 + Scalar(-1) / Scalar(2);
  const Scalar _tmp21 = _tmp1 + _tmp20;
  const Scalar _tmp22 = _world_T_body[1] * _world_T_body[2];
  const Scalar _tmp23 = _world_T_body[0] * _world_T_body[3];
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = _tmp24 * _world_T_body[6];
  const Scalar _tmp26 = -_tmp10 + _tmp9;
  const Scalar _tmp27 = _tmp26 * _world_T_body[4];
  const Scalar _tmp28 = _tmp26 * _tmp4;
  const Scalar _tmp29 = _tmp15 * _tmp24;
  const Scalar _tmp30 = -_tmp28 + _tmp29;
  const Scalar _tmp31 = -_tmp13 * _tmp21 + 2 * _tmp21 * _world_T_body[5] - 2 * _tmp25 + 2 * _tmp27 +
                        _tmp30 - body_t_landmark(1, 0);
  const Scalar _tmp32 = _tmp2 + _tmp20;
  const Scalar _tmp33 = _tmp5 + _tmp6;
  const Scalar _tmp34 = _tmp33 * _world_T_body[4];
  const Scalar _tmp35 = _tmp22 - _tmp23;
  const Scalar _tmp36 = _tmp35 * _world_T_body[5];
  const Scalar _tmp37 = _tmp13 * _tmp35;
  const Scalar _tmp38 = _tmp33 * _tmp4;
  const Scalar _tmp39 = _tmp37 + _tmp38;
  const Scalar _tmp40 = -_tmp15 * _tmp32 + 2 * _tmp32 * _world_T_body[6] - 2 * _tmp34 - 2 * _tmp36 +
                        _tmp39 - body_t_landmark(2, 0);
  const Scalar _tmp41 = 2 * _tmp34;
  const Scalar _tmp42 = 2 * _tmp36;
  const Scalar _tmp43 = std::pow(_world_T_body[3], Scalar(2));
  const Scalar _tmp44 = -_tmp43;
  const Scalar _tmp45 = -_tmp1 + _tmp19;
  const Scalar _tmp46 = _tmp2 + _tmp44 + _tmp45;
  const Scalar _tmp47 = _tmp46 * _world_T_body[6];
  const Scalar _tmp48 = _tmp46 * world_t_landmark(2, 0);
  const Scalar _tmp49 = _tmp39 - _tmp41 - _tmp42 + _tmp47 - _tmp48;
  const Scalar _tmp50 = 2 * _tmp25;
  const Scalar _tmp51 = 2 * _tmp27;
  const Scalar _tmp52 = -_tmp2;
  const Scalar _tmp53 = _tmp1 + _tmp19 + _tmp44 + _tmp52;
  const Scalar _tmp54 = _tmp53 * _world_T_body[5];
  const Scalar _tmp55 = _tmp53 * world_t_landmark(1, 0);
  const Scalar _tmp56 = _tmp28 - _tmp29 + _tmp50 - _tmp51 - _tmp54 + _tmp55;
  const Scalar _tmp57 = -_tmp37 - _tmp38 + _tmp41 + _tmp42 - _tmp47 + _tmp48;
  const Scalar _tmp58 = 2 * _tmp8;
  const Scalar _tmp59 = 2 * _tmp12;
  const Scalar _tmp60 = _tmp43 + _tmp45 + _tmp52;
  const Scalar _tmp61 = _tmp60 * _world_T_body[4];
  const Scalar _tmp62 = _tmp60 * world_t_landmark(0, 0);
  const Scalar _tmp63 = _tmp17 - _tmp58 - _tmp59 - _tmp61 + _tmp62;
  const Scalar _tmp64 = _tmp30 - _tmp50 + _tmp51 + _tmp54 - _tmp55;
  const Scalar _tmp65 = -_tmp14 - _tmp16 + _tmp58 + _tmp59 + _tmp61 - _tmp62;
  const Scalar _tmp66 = 2 * _tmp0;
  const Scalar _tmp67 = std::pow(sigma, Scalar(-2));
  const Scalar _tmp68 = _tmp63 * _tmp67;
  const Scalar _tmp69 = _tmp65 * _tmp67;
  const Scalar _tmp70 = _tmp56 * _tmp67;
  const Scalar _tmp71 = 2 * _tmp33;
  const Scalar _tmp72 = 2 * _tmp26;
  const Scalar _tmp73 = 2 * _tmp67;
  const Scalar _tmp74 = _tmp49 * _tmp73;
  const Scalar _tmp75 = 2 * _tmp35;
  const Scalar _tmp76 = 2 * _tmp32;
  const Scalar _tmp77 = _tmp64 * _tmp67;
  const Scalar _tmp78 = _tmp57 * _tmp73;
  const Scalar _tmp79 = 2 * _tmp11;
  const Scalar _tmp80 = 2 * _tmp77;
  const Scalar _tmp81 = 2 * _tmp21;
  const Scalar _tmp82 = 2 * _tmp24;
  const Scalar _tmp83 = 4 * _tmp67;
  const Scalar _tmp84 = _tmp21 * _tmp83;
  const Scalar _tmp85 = _tmp3 * _tmp83;
  const Scalar _tmp86 = _tmp32 * _tmp83;
  const Scalar _tmp87 = _tmp31 * _tmp67;
  const Scalar _tmp88 = _tmp18 * _tmp67;
  const Scalar _tmp89 = 2 * _tmp88;
  const Scalar _tmp90 = _tmp40 * _tmp73;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp0 * _tmp18;
    _res(1, 0) = _tmp0 * _tmp31;
    _res(2, 0) = _tmp0 * _tmp40;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = 0;
    _jacobian(1, 0) = _tmp0 * _tmp49;
    _jacobian(2, 0) = _tmp0 * _tmp56;
    _jacobian(0, 1) = _tmp0 * _tmp57;
    _jacobian(1, 1) = 0;
    _jacobian(2, 1) = _tmp0 * _tmp63;
    _jacobian(0, 2) = _tmp0 * _tmp64;
    _jacobian(1, 2) = _tmp0 * _tmp65;
    _jacobian(2, 2) = 0;
    _jacobian(0, 3) = _tmp3 * _tmp66;
    _jacobian(1, 3) = _tmp26 * _tmp66;
    _jacobian(2, 3) = -_tmp33 * _tmp66;
    _jacobian(0, 4) = -_tmp11 * _tmp66;
    _jacobian(1, 4) = _tmp21 * _tmp66;
    _jacobian(2, 4) = -_tmp35 * _tmp66;
    _jacobian(0, 5) = -_tmp66 * _tmp7;
    _jacobian(1, 5) = -_tmp24 * _tmp66;
    _jacobian(2, 5) = _tmp32 * _tmp66;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp49, Scalar(2)) * _tmp67 + std::pow(_tmp56, Scalar(2)) * _tmp67;
    _hessian(1, 0) = _tmp56 * _tmp68;
    _hessian(2, 0) = _tmp49 * _tmp69;
    _hessian(3, 0) = _tmp49 * _tmp67 * _tmp72 - _tmp70 * _tmp71;
    _hessian(4, 0) = _tmp21 * _tmp74 - _tmp70 * _tmp75;
    _hessian(5, 0) = -_tmp24 * _tmp74 + _tmp70 * _tmp76;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp57, Scalar(2)) * _tmp67 + std::pow(_tmp63, Scalar(2)) * _tmp67;
    _hessian(2, 1) = _tmp57 * _tmp77;
    _hessian(3, 1) = _tmp3 * _tmp78 - _tmp68 * _tmp71;
    _hessian(4, 1) = -_tmp57 * _tmp67 * _tmp79 - _tmp68 * _tmp75;
    _hessian(5, 1) = _tmp68 * _tmp76 - _tmp7 * _tmp78;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp64, Scalar(2)) * _tmp67 + std::pow(_tmp65, Scalar(2)) * _tmp67;
    _hessian(3, 2) = _tmp3 * _tmp80 + _tmp69 * _tmp72;
    _hessian(4, 2) = _tmp69 * _tmp81 - _tmp77 * _tmp79;
    _hessian(5, 2) = -_tmp69 * _tmp82 - _tmp7 * _tmp80;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp26, Scalar(2)) * _tmp83 + std::pow(_tmp3, Scalar(2)) * _tmp83 +
                     std::pow(_tmp33, Scalar(2)) * _tmp83;
    _hessian(4, 3) = -_tmp11 * _tmp85 + _tmp26 * _tmp84 + _tmp33 * _tmp35 * _tmp83;
    _hessian(5, 3) = -_tmp24 * _tmp26 * _tmp83 - _tmp33 * _tmp86 - _tmp7 * _tmp85;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp11, Scalar(2)) * _tmp83 + std::pow(_tmp21, Scalar(2)) * _tmp83 +
                     std::pow(_tmp35, Scalar(2)) * _tmp83;
    _hessian(5, 4) = _tmp11 * _tmp7 * _tmp83 - _tmp24 * _tmp84 - _tmp35 * _tmp86;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp24, Scalar(2)) * _tmp83 + std::pow(_tmp32, Scalar(2)) * _tmp83 +
                     std::pow(_tmp7, Scalar(2)) * _tmp83;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp40 * _tmp70 + _tmp49 * _tmp87;
    _rhs(1, 0) = _tmp40 * _tmp68 + _tmp57 * _tmp88;
    _rhs(2, 0) = _tmp18 * _tmp77 + _tmp65 * _tmp87;
    _rhs(3, 0) = _tmp3 * _tmp89 - _tmp40 * _tmp67 * _tmp71 + _tmp72 * _tmp87;
    _rhs(4, 0) = -_tmp35 * _tmp90 - _tmp79 * _tmp88 + _tmp81 * _tmp87;
    _rhs(5, 0) = _tmp32 * _tmp90 - _tmp7 * _tmp89 - _tmp82 * _tmp87;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
