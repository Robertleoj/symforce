// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>
#include <Eigen/SparseCore>

#include <sym/linear_camera_cal.h>
#include <sym/pose3.h>

namespace bundle_adjustment_fixed_size {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Computes the linearization of the residual around the given state,
 * and returns the relevant information about the resulting linear system.
 *
 * Input args: The state to linearize around
 *
 * Output args:
 *     residual (Eigen::Matrix*): The residual vector
 *     jacobian: (72x26) jacobian of residual wrt args views_1_pose (6), landmarks_0_ (1),
 *               landmarks_1_ (1), landmarks_2_ (1), landmarks_3_ (1), landmarks_4_ (1),
 *               landmarks_5_ (1), landmarks_6_ (1), landmarks_7_ (1), landmarks_8_ (1),
 *               landmarks_9_ (1), landmarks_10_ (1), landmarks_11_ (1), landmarks_12_ (1),
 *               landmarks_13_ (1), landmarks_14_ (1), landmarks_15_ (1), landmarks_16_ (1),
 *               landmarks_17_ (1), landmarks_18_ (1), landmarks_19_ (1)
 *     hessian: (26x26) Gauss-Newton hessian for args views_1_pose (6), landmarks_0_ (1),
 *              landmarks_1_ (1), landmarks_2_ (1), landmarks_3_ (1), landmarks_4_ (1), landmarks_5_
 *              (1), landmarks_6_ (1), landmarks_7_ (1), landmarks_8_ (1), landmarks_9_ (1),
 *              landmarks_10_ (1), landmarks_11_ (1), landmarks_12_ (1), landmarks_13_ (1),
 *              landmarks_14_ (1), landmarks_15_ (1), landmarks_16_ (1), landmarks_17_ (1),
 *              landmarks_18_ (1), landmarks_19_ (1)
 *     rhs: (26x1) Gauss-Newton rhs for args views_1_pose (6), landmarks_0_ (1), landmarks_1_ (1),
 *          landmarks_2_ (1), landmarks_3_ (1), landmarks_4_ (1), landmarks_5_ (1), landmarks_6_
 *          (1), landmarks_7_ (1), landmarks_8_ (1), landmarks_9_ (1), landmarks_10_ (1),
 *          landmarks_11_ (1), landmarks_12_ (1), landmarks_13_ (1), landmarks_14_ (1),
 *          landmarks_15_ (1), landmarks_16_ (1), landmarks_17_ (1), landmarks_18_ (1),
 *          landmarks_19_ (1)
 */
template <typename Scalar>
void Linearization(
    const sym::LinearCameraCal<Scalar>& views_0_calibration, const sym::Pose3<Scalar>& views_0_pose,
    const sym::LinearCameraCal<Scalar>& views_1_calibration, const sym::Pose3<Scalar>& views_1_pose,
    const sym::Pose3<Scalar>& priors_0_0_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_0_0_sqrt_info,
    const sym::Pose3<Scalar>& priors_0_1_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_0_1_sqrt_info,
    const sym::Pose3<Scalar>& priors_1_0_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_1_0_sqrt_info,
    const sym::Pose3<Scalar>& priors_1_1_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_1_1_sqrt_info,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_0_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_0_target_coords, const Scalar matches_0_0_weight,
    const Scalar matches_0_0_inverse_range_prior,
    const Scalar matches_0_0_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_1_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_1_target_coords, const Scalar matches_0_1_weight,
    const Scalar matches_0_1_inverse_range_prior,
    const Scalar matches_0_1_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_2_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_2_target_coords, const Scalar matches_0_2_weight,
    const Scalar matches_0_2_inverse_range_prior,
    const Scalar matches_0_2_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_3_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_3_target_coords, const Scalar matches_0_3_weight,
    const Scalar matches_0_3_inverse_range_prior,
    const Scalar matches_0_3_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_4_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_4_target_coords, const Scalar matches_0_4_weight,
    const Scalar matches_0_4_inverse_range_prior,
    const Scalar matches_0_4_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_5_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_5_target_coords, const Scalar matches_0_5_weight,
    const Scalar matches_0_5_inverse_range_prior,
    const Scalar matches_0_5_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_6_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_6_target_coords, const Scalar matches_0_6_weight,
    const Scalar matches_0_6_inverse_range_prior,
    const Scalar matches_0_6_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_7_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_7_target_coords, const Scalar matches_0_7_weight,
    const Scalar matches_0_7_inverse_range_prior,
    const Scalar matches_0_7_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_8_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_8_target_coords, const Scalar matches_0_8_weight,
    const Scalar matches_0_8_inverse_range_prior,
    const Scalar matches_0_8_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_9_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_9_target_coords, const Scalar matches_0_9_weight,
    const Scalar matches_0_9_inverse_range_prior,
    const Scalar matches_0_9_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_10_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_10_target_coords, const Scalar matches_0_10_weight,
    const Scalar matches_0_10_inverse_range_prior,
    const Scalar matches_0_10_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_11_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_11_target_coords, const Scalar matches_0_11_weight,
    const Scalar matches_0_11_inverse_range_prior,
    const Scalar matches_0_11_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_12_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_12_target_coords, const Scalar matches_0_12_weight,
    const Scalar matches_0_12_inverse_range_prior,
    const Scalar matches_0_12_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_13_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_13_target_coords, const Scalar matches_0_13_weight,
    const Scalar matches_0_13_inverse_range_prior,
    const Scalar matches_0_13_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_14_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_14_target_coords, const Scalar matches_0_14_weight,
    const Scalar matches_0_14_inverse_range_prior,
    const Scalar matches_0_14_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_15_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_15_target_coords, const Scalar matches_0_15_weight,
    const Scalar matches_0_15_inverse_range_prior,
    const Scalar matches_0_15_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_16_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_16_target_coords, const Scalar matches_0_16_weight,
    const Scalar matches_0_16_inverse_range_prior,
    const Scalar matches_0_16_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_17_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_17_target_coords, const Scalar matches_0_17_weight,
    const Scalar matches_0_17_inverse_range_prior,
    const Scalar matches_0_17_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_18_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_18_target_coords, const Scalar matches_0_18_weight,
    const Scalar matches_0_18_inverse_range_prior,
    const Scalar matches_0_18_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_19_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_19_target_coords, const Scalar matches_0_19_weight,
    const Scalar matches_0_19_inverse_range_prior,
    const Scalar matches_0_19_inverse_range_prior_sigma, const Scalar landmarks_0_,
    const Scalar landmarks_1_, const Scalar landmarks_2_, const Scalar landmarks_3_,
    const Scalar landmarks_4_, const Scalar landmarks_5_, const Scalar landmarks_6_,
    const Scalar landmarks_7_, const Scalar landmarks_8_, const Scalar landmarks_9_,
    const Scalar landmarks_10_, const Scalar landmarks_11_, const Scalar landmarks_12_,
    const Scalar landmarks_13_, const Scalar landmarks_14_, const Scalar landmarks_15_,
    const Scalar landmarks_16_, const Scalar landmarks_17_, const Scalar landmarks_18_,
    const Scalar landmarks_19_, const Scalar costs_reprojection_error_gnc_scale,
    const Scalar costs_reprojection_error_gnc_mu, const Scalar epsilon,
    Eigen::Matrix<Scalar, 72, 1>* const residual = nullptr,
    Eigen::SparseMatrix<Scalar>* const jacobian = nullptr,
    Eigen::SparseMatrix<Scalar>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 26, 1>* const rhs = nullptr) {
  // Total ops: 10324

  // Unused inputs
  (void)priors_0_0_target_T_src;
  (void)priors_0_0_sqrt_info;
  (void)priors_1_1_target_T_src;
  (void)priors_1_1_sqrt_info;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _views_0_calibration = views_0_calibration.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _views_0_pose = views_0_pose.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _views_1_calibration = views_1_calibration.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _views_1_pose = views_1_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _priors_0_1_target_T_src = priors_0_1_target_T_src.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _priors_1_0_target_T_src = priors_1_0_target_T_src.Data();

  // Intermediate terms (2283)
  const Scalar _tmp0 = 2 * _views_0_pose[3];
  const Scalar _tmp1 = _tmp0 * _views_0_pose[2];
  const Scalar _tmp2 = 2 * _views_0_pose[0] * _views_0_pose[1];
  const Scalar _tmp3 = -_tmp1 + _tmp2;
  const Scalar _tmp4 = -2 * std::pow(_views_0_pose[2], Scalar(2));
  const Scalar _tmp5 = -2 * std::pow(_views_0_pose[0], Scalar(2));
  const Scalar _tmp6 = _tmp4 + _tmp5 + 1;
  const Scalar _tmp7 = 2 * _views_0_pose[2];
  const Scalar _tmp8 = _tmp7 * _views_0_pose[1];
  const Scalar _tmp9 = _tmp0 * _views_0_pose[0];
  const Scalar _tmp10 = _tmp8 + _tmp9;
  const Scalar _tmp11 = -_priors_0_1_target_T_src[5] - _tmp10 * _views_0_pose[6] +
                        _tmp10 * _views_1_pose[6] - _tmp3 * _views_0_pose[4] +
                        _tmp3 * _views_1_pose[4] - _tmp6 * _views_0_pose[5] +
                        _tmp6 * _views_1_pose[5];
  const Scalar _tmp12 = _views_0_pose[0] * _views_1_pose[0];
  const Scalar _tmp13 = _views_0_pose[2] * _views_1_pose[2];
  const Scalar _tmp14 = _views_0_pose[1] * _views_1_pose[1];
  const Scalar _tmp15 = _views_0_pose[3] * _views_1_pose[3];
  const Scalar _tmp16 = _tmp12 + _tmp13 + _tmp14 + _tmp15;
  const Scalar _tmp17 = _views_0_pose[0] * _views_1_pose[3];
  const Scalar _tmp18 = _views_0_pose[3] * _views_1_pose[0];
  const Scalar _tmp19 = _views_0_pose[1] * _views_1_pose[2];
  const Scalar _tmp20 = _views_0_pose[2] * _views_1_pose[1];
  const Scalar _tmp21 = -_tmp17 + _tmp18 - _tmp19 + _tmp20;
  const Scalar _tmp22 = _views_0_pose[1] * _views_1_pose[3];
  const Scalar _tmp23 = _views_0_pose[2] * _views_1_pose[0];
  const Scalar _tmp24 = _views_0_pose[0] * _views_1_pose[2];
  const Scalar _tmp25 = _views_0_pose[3] * _views_1_pose[1];
  const Scalar _tmp26 = -_tmp22 - _tmp23 + _tmp24 + _tmp25;
  const Scalar _tmp27 = _views_0_pose[2] * _views_1_pose[3];
  const Scalar _tmp28 = _views_0_pose[1] * _views_1_pose[0];
  const Scalar _tmp29 = _views_0_pose[3] * _views_1_pose[2];
  const Scalar _tmp30 = _views_0_pose[0] * _views_1_pose[1];
  const Scalar _tmp31 = -_tmp27 + _tmp28 + _tmp29 - _tmp30;
  const Scalar _tmp32 = _priors_0_1_target_T_src[0] * _tmp31 -
                        _priors_0_1_target_T_src[1] * _tmp16 -
                        _priors_0_1_target_T_src[2] * _tmp21 + _priors_0_1_target_T_src[3] * _tmp26;
  const Scalar _tmp33 = _priors_0_1_target_T_src[0] * _tmp21 +
                        _priors_0_1_target_T_src[1] * _tmp26 +
                        _priors_0_1_target_T_src[2] * _tmp31 + _priors_0_1_target_T_src[3] * _tmp16;
  const Scalar _tmp34 = std::fabs(_tmp33);
  const Scalar _tmp35 = -epsilon;
  const Scalar _tmp36 = _tmp35 + 1;
  const Scalar _tmp37 = std::min<Scalar>(_tmp34, _tmp36);
  const Scalar _tmp38 = std::acos(_tmp37);
  const Scalar _tmp39 = (((_tmp33) > 0) - ((_tmp33) < 0));
  const Scalar _tmp40 = 2 * std::min<Scalar>(0, _tmp39) + 1;
  const Scalar _tmp41 = _tmp40 * priors_0_1_sqrt_info(0, 1);
  const Scalar _tmp42 = _tmp38 * _tmp41;
  const Scalar _tmp43 = 1 - std::pow(_tmp37, Scalar(2));
  const Scalar _tmp44 = 2 / std::sqrt(_tmp43);
  const Scalar _tmp45 = _tmp42 * _tmp44;
  const Scalar _tmp46 = 1 - 2 * std::pow(_views_0_pose[1], Scalar(2));
  const Scalar _tmp47 = _tmp46 + _tmp5;
  const Scalar _tmp48 = _tmp7 * _views_0_pose[0];
  const Scalar _tmp49 = _tmp0 * _views_0_pose[1];
  const Scalar _tmp50 = _tmp48 + _tmp49;
  const Scalar _tmp51 = _tmp8 - _tmp9;
  const Scalar _tmp52 = -_priors_0_1_target_T_src[6] - _tmp47 * _views_0_pose[6] +
                        _tmp47 * _views_1_pose[6] - _tmp50 * _views_0_pose[4] +
                        _tmp50 * _views_1_pose[4] - _tmp51 * _views_0_pose[5] +
                        _tmp51 * _views_1_pose[5];
  const Scalar _tmp53 = -_priors_0_1_target_T_src[0] * _tmp16 -
                        _priors_0_1_target_T_src[1] * _tmp31 +
                        _priors_0_1_target_T_src[2] * _tmp26 + _priors_0_1_target_T_src[3] * _tmp21;
  const Scalar _tmp54 = _tmp38 * _tmp40;
  const Scalar _tmp55 = _tmp44 * _tmp54;
  const Scalar _tmp56 = _tmp53 * _tmp55;
  const Scalar _tmp57 = -_priors_0_1_target_T_src[0] * _tmp26 +
                        _priors_0_1_target_T_src[1] * _tmp21 -
                        _priors_0_1_target_T_src[2] * _tmp16 + _priors_0_1_target_T_src[3] * _tmp31;
  const Scalar _tmp58 = _tmp55 * _tmp57;
  const Scalar _tmp59 = _tmp1 + _tmp2;
  const Scalar _tmp60 = _tmp4 + _tmp46;
  const Scalar _tmp61 = _tmp48 - _tmp49;
  const Scalar _tmp62 = -_priors_0_1_target_T_src[4] - _tmp59 * _views_0_pose[5] +
                        _tmp59 * _views_1_pose[5] - _tmp60 * _views_0_pose[4] +
                        _tmp60 * _views_1_pose[4] - _tmp61 * _views_0_pose[6] +
                        _tmp61 * _views_1_pose[6];
  const Scalar _tmp63 = _tmp11 * priors_0_1_sqrt_info(0, 4) + _tmp32 * _tmp45 +
                        _tmp52 * priors_0_1_sqrt_info(0, 5) + _tmp56 * priors_0_1_sqrt_info(0, 0) +
                        _tmp58 * priors_0_1_sqrt_info(0, 2) + _tmp62 * priors_0_1_sqrt_info(0, 3);
  const Scalar _tmp64 = _tmp54 * priors_0_1_sqrt_info(1, 1);
  const Scalar _tmp65 = _tmp44 * _tmp64;
  const Scalar _tmp66 = _tmp11 * priors_0_1_sqrt_info(1, 4) + _tmp32 * _tmp65 +
                        _tmp52 * priors_0_1_sqrt_info(1, 5) + _tmp56 * priors_0_1_sqrt_info(1, 0) +
                        _tmp58 * priors_0_1_sqrt_info(1, 2) + _tmp62 * priors_0_1_sqrt_info(1, 3);
  const Scalar _tmp67 = _tmp32 * _tmp55;
  const Scalar _tmp68 = _tmp11 * priors_0_1_sqrt_info(2, 4) + _tmp52 * priors_0_1_sqrt_info(2, 5) +
                        _tmp56 * priors_0_1_sqrt_info(2, 0) + _tmp58 * priors_0_1_sqrt_info(2, 2) +
                        _tmp62 * priors_0_1_sqrt_info(2, 3) + _tmp67 * priors_0_1_sqrt_info(2, 1);
  const Scalar _tmp69 = _tmp55 * priors_0_1_sqrt_info(3, 0);
  const Scalar _tmp70 = _tmp11 * priors_0_1_sqrt_info(3, 4) + _tmp52 * priors_0_1_sqrt_info(3, 5) +
                        _tmp53 * _tmp69 + _tmp58 * priors_0_1_sqrt_info(3, 2) +
                        _tmp62 * priors_0_1_sqrt_info(3, 3) + _tmp67 * priors_0_1_sqrt_info(3, 1);
  const Scalar _tmp71 = _tmp11 * priors_0_1_sqrt_info(4, 4) + _tmp52 * priors_0_1_sqrt_info(4, 5) +
                        _tmp56 * priors_0_1_sqrt_info(4, 0) + _tmp58 * priors_0_1_sqrt_info(4, 2) +
                        _tmp62 * priors_0_1_sqrt_info(4, 3) + _tmp67 * priors_0_1_sqrt_info(4, 1);
  const Scalar _tmp72 = _tmp11 * priors_0_1_sqrt_info(5, 4) + _tmp52 * priors_0_1_sqrt_info(5, 5) +
                        _tmp56 * priors_0_1_sqrt_info(5, 0) + _tmp58 * priors_0_1_sqrt_info(5, 2) +
                        _tmp62 * priors_0_1_sqrt_info(5, 3) + _tmp67 * priors_0_1_sqrt_info(5, 1);
  const Scalar _tmp73 = std::pow(_views_1_pose[2], Scalar(2));
  const Scalar _tmp74 = 2 * _tmp73;
  const Scalar _tmp75 = -_tmp74;
  const Scalar _tmp76 = std::pow(_views_1_pose[1], Scalar(2));
  const Scalar _tmp77 = 2 * _tmp76;
  const Scalar _tmp78 = -_tmp77;
  const Scalar _tmp79 = _tmp75 + _tmp78 + 1;
  const Scalar _tmp80 = 2 * _views_1_pose[0];
  const Scalar _tmp81 = _tmp80 * _views_1_pose[2];
  const Scalar _tmp82 = 2 * _views_1_pose[3];
  const Scalar _tmp83 = _tmp82 * _views_1_pose[1];
  const Scalar _tmp84 = -_tmp83;
  const Scalar _tmp85 = _tmp81 + _tmp84;
  const Scalar _tmp86 = _tmp85 * _views_1_pose[6];
  const Scalar _tmp87 = _tmp80 * _views_1_pose[1];
  const Scalar _tmp88 = _tmp82 * _views_1_pose[2];
  const Scalar _tmp89 = _tmp87 + _tmp88;
  const Scalar _tmp90 = _tmp89 * _views_1_pose[5];
  const Scalar _tmp91 = _tmp85 * _views_0_pose[6] + _tmp89 * _views_0_pose[5];
  const Scalar _tmp92 = -_priors_1_0_target_T_src[4] + _tmp79 * _views_0_pose[4] -
                        _tmp79 * _views_1_pose[4] - _tmp86 - _tmp90 + _tmp91;
  const Scalar _tmp93 = std::pow(_views_1_pose[0], Scalar(2));
  const Scalar _tmp94 = 2 * _tmp93;
  const Scalar _tmp95 = 1 - _tmp94;
  const Scalar _tmp96 = _tmp75 + _tmp95;
  const Scalar _tmp97 = _tmp82 * _views_1_pose[0];
  const Scalar _tmp98 = 2 * _views_1_pose[1] * _views_1_pose[2];
  const Scalar _tmp99 = _tmp97 + _tmp98;
  const Scalar _tmp100 = _tmp99 * _views_1_pose[6];
  const Scalar _tmp101 = -_tmp88;
  const Scalar _tmp102 = _tmp101 + _tmp87;
  const Scalar _tmp103 = _tmp102 * _views_1_pose[4];
  const Scalar _tmp104 = _tmp102 * _views_0_pose[4] + _tmp99 * _views_0_pose[6];
  const Scalar _tmp105 = -_priors_1_0_target_T_src[5] - _tmp100 - _tmp103 + _tmp104 +
                         _tmp96 * _views_0_pose[5] - _tmp96 * _views_1_pose[5];
  const Scalar _tmp106 = _tmp78 + _tmp95;
  const Scalar _tmp107 = -_tmp97;
  const Scalar _tmp108 = _tmp107 + _tmp98;
  const Scalar _tmp109 = _tmp108 * _views_1_pose[5];
  const Scalar _tmp110 = _tmp81 + _tmp83;
  const Scalar _tmp111 = _tmp110 * _views_1_pose[4];
  const Scalar _tmp112 = _tmp108 * _views_0_pose[5] + _tmp110 * _views_0_pose[4];
  const Scalar _tmp113 = -_priors_1_0_target_T_src[6] + _tmp106 * _views_0_pose[6] -
                         _tmp106 * _views_1_pose[6] - _tmp109 - _tmp111 + _tmp112;
  const Scalar _tmp114 = _tmp27 - _tmp28 - _tmp29 + _tmp30;
  const Scalar _tmp115 = _tmp22 + _tmp23 - _tmp24 - _tmp25;
  const Scalar _tmp116 = _tmp17 - _tmp18 + _tmp19 - _tmp20;
  const Scalar _tmp117 =
      -_priors_1_0_target_T_src[0] * _tmp115 + _priors_1_0_target_T_src[1] * _tmp116 -
      _priors_1_0_target_T_src[2] * _tmp16 + _priors_1_0_target_T_src[3] * _tmp114;
  const Scalar _tmp118 =
      _priors_1_0_target_T_src[0] * _tmp116 + _priors_1_0_target_T_src[1] * _tmp115 +
      _priors_1_0_target_T_src[2] * _tmp114 + _priors_1_0_target_T_src[3] * _tmp16;
  const Scalar _tmp119 = (((_tmp118) > 0) - ((_tmp118) < 0));
  const Scalar _tmp120 = 2 * std::min<Scalar>(0, _tmp119) + 1;
  const Scalar _tmp121 = std::fabs(_tmp118);
  const Scalar _tmp122 = std::min<Scalar>(_tmp121, _tmp36);
  const Scalar _tmp123 = std::acos(_tmp122);
  const Scalar _tmp124 = 1 - std::pow(_tmp122, Scalar(2));
  const Scalar _tmp125 = 2 * _tmp123 / std::sqrt(_tmp124);
  const Scalar _tmp126 = _tmp120 * _tmp125;
  const Scalar _tmp127 = _tmp117 * _tmp126;
  const Scalar _tmp128 =
      _tmp120 * (_priors_1_0_target_T_src[0] * _tmp114 - _priors_1_0_target_T_src[1] * _tmp16 -
                 _priors_1_0_target_T_src[2] * _tmp116 + _priors_1_0_target_T_src[3] * _tmp115);
  const Scalar _tmp129 = _tmp125 * _tmp128;
  const Scalar _tmp130 =
      -_priors_1_0_target_T_src[0] * _tmp16 - _priors_1_0_target_T_src[1] * _tmp114 +
      _priors_1_0_target_T_src[2] * _tmp115 + _priors_1_0_target_T_src[3] * _tmp116;
  const Scalar _tmp131 = _tmp126 * _tmp130;
  const Scalar _tmp132 =
      _tmp105 * priors_1_0_sqrt_info(0, 4) + _tmp113 * priors_1_0_sqrt_info(0, 5) +
      _tmp127 * priors_1_0_sqrt_info(0, 2) + _tmp129 * priors_1_0_sqrt_info(0, 1) +
      _tmp131 * priors_1_0_sqrt_info(0, 0) + _tmp92 * priors_1_0_sqrt_info(0, 3);
  const Scalar _tmp133 =
      _tmp105 * priors_1_0_sqrt_info(1, 4) + _tmp113 * priors_1_0_sqrt_info(1, 5) +
      _tmp127 * priors_1_0_sqrt_info(1, 2) + _tmp129 * priors_1_0_sqrt_info(1, 1) +
      _tmp131 * priors_1_0_sqrt_info(1, 0) + _tmp92 * priors_1_0_sqrt_info(1, 3);
  const Scalar _tmp134 = _tmp128 * priors_1_0_sqrt_info(2, 1);
  const Scalar _tmp135 = _tmp105 * priors_1_0_sqrt_info(2, 4) +
                         _tmp113 * priors_1_0_sqrt_info(2, 5) + _tmp125 * _tmp134 +
                         _tmp127 * priors_1_0_sqrt_info(2, 2) +
                         _tmp131 * priors_1_0_sqrt_info(2, 0) + _tmp92 * priors_1_0_sqrt_info(2, 3);
  const Scalar _tmp136 =
      _tmp105 * priors_1_0_sqrt_info(3, 4) + _tmp113 * priors_1_0_sqrt_info(3, 5) +
      _tmp127 * priors_1_0_sqrt_info(3, 2) + _tmp129 * priors_1_0_sqrt_info(3, 1) +
      _tmp131 * priors_1_0_sqrt_info(3, 0) + _tmp92 * priors_1_0_sqrt_info(3, 3);
  const Scalar _tmp137 =
      _tmp105 * priors_1_0_sqrt_info(4, 4) + _tmp113 * priors_1_0_sqrt_info(4, 5) +
      _tmp127 * priors_1_0_sqrt_info(4, 2) + _tmp129 * priors_1_0_sqrt_info(4, 1) +
      _tmp131 * priors_1_0_sqrt_info(4, 0) + _tmp92 * priors_1_0_sqrt_info(4, 3);
  const Scalar _tmp138 =
      _tmp105 * priors_1_0_sqrt_info(5, 4) + _tmp113 * priors_1_0_sqrt_info(5, 5) +
      _tmp127 * priors_1_0_sqrt_info(5, 2) + _tmp129 * priors_1_0_sqrt_info(5, 1) +
      _tmp131 * priors_1_0_sqrt_info(5, 0) + _tmp92 * priors_1_0_sqrt_info(5, 3);
  const Scalar _tmp139 = Scalar(1.0) / (_views_0_calibration[1]);
  const Scalar _tmp140 = _tmp139 * _tmp3;
  const Scalar _tmp141 = -_views_0_calibration[2];
  const Scalar _tmp142 = _tmp141 + matches_0_0_source_coords(0, 0);
  const Scalar _tmp143 = std::pow(_views_0_calibration[0], Scalar(-2));
  const Scalar _tmp144 = -_views_0_calibration[3];
  const Scalar _tmp145 = _tmp144 + matches_0_0_source_coords(1, 0);
  const Scalar _tmp146 = std::pow(_views_0_calibration[1], Scalar(-2));
  const Scalar _tmp147 = epsilon + 1;
  const Scalar _tmp148 = std::pow(Scalar(std::pow(_tmp142, Scalar(2)) * _tmp143 +
                                         std::pow(_tmp145, Scalar(2)) * _tmp146 + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp149 = _tmp145 * _tmp148;
  const Scalar _tmp150 = _views_0_pose[4] - _views_1_pose[4];
  const Scalar _tmp151 = Scalar(1.0) / (_views_0_calibration[0]);
  const Scalar _tmp152 = _tmp151 * _tmp60;
  const Scalar _tmp153 = _tmp142 * _tmp148;
  const Scalar _tmp154 =
      _tmp140 * _tmp149 + _tmp148 * _tmp50 + _tmp150 * landmarks_0_ + _tmp152 * _tmp153;
  const Scalar _tmp155 = _tmp151 * _tmp59;
  const Scalar _tmp156 = _tmp139 * _tmp6;
  const Scalar _tmp157 = _views_0_pose[5] - _views_1_pose[5];
  const Scalar _tmp158 =
      _tmp148 * _tmp51 + _tmp149 * _tmp156 + _tmp153 * _tmp155 + _tmp157 * landmarks_0_;
  const Scalar _tmp159 = _tmp151 * _tmp61;
  const Scalar _tmp160 = _tmp10 * _tmp139;
  const Scalar _tmp161 = _views_0_pose[6] - _views_1_pose[6];
  const Scalar _tmp162 =
      _tmp148 * _tmp47 + _tmp149 * _tmp160 + _tmp153 * _tmp159 + _tmp161 * landmarks_0_;
  const Scalar _tmp163 = _tmp158 * _tmp89 + _tmp162 * _tmp85;
  const Scalar _tmp164 = _tmp154 * _tmp79 + _tmp163;
  const Scalar _tmp165 = _tmp108 * _tmp158 + _tmp110 * _tmp154;
  const Scalar _tmp166 = _tmp106 * _tmp162 + _tmp165;
  const Scalar _tmp167 = std::max<Scalar>(_tmp166, epsilon);
  const Scalar _tmp168 = Scalar(1.0) / (_tmp167);
  const Scalar _tmp169 = _tmp168 * _views_1_calibration[0];
  const Scalar _tmp170 =
      _tmp164 * _tmp169 + _views_1_calibration[2] - matches_0_0_target_coords(0, 0);
  const Scalar _tmp171 = _tmp102 * _tmp154 + _tmp162 * _tmp99;
  const Scalar _tmp172 = _tmp158 * _tmp96 + _tmp171;
  const Scalar _tmp173 = _tmp168 * _views_1_calibration[1];
  const Scalar _tmp174 =
      _tmp172 * _tmp173 + _views_1_calibration[3] - matches_0_0_target_coords(1, 0);
  const Scalar _tmp175 = std::pow(_tmp170, Scalar(2)) + std::pow(_tmp174, Scalar(2)) + epsilon;
  const Scalar _tmp176 = std::pow(_tmp175, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp177 = std::sqrt(matches_0_0_weight);
  const Scalar _tmp178 = std::pow(costs_reprojection_error_gnc_scale, Scalar(-2));
  const Scalar _tmp179 = Scalar(1.0) / (_tmp147 - costs_reprojection_error_gnc_mu);
  const Scalar _tmp180 = epsilon + std::fabs(_tmp179);
  const Scalar _tmp181 = _tmp178 / _tmp180;
  const Scalar _tmp182 = _tmp175 * _tmp181 + 1;
  const Scalar _tmp183 = 2 - _tmp179;
  const Scalar _tmp184 =
      _tmp183 + epsilon * (2 * std::min<Scalar>(0, (((_tmp183) > 0) - ((_tmp183) < 0))) + 1);
  const Scalar _tmp185 = (Scalar(1) / Scalar(2)) * _tmp184;
  const Scalar _tmp186 = 2 * _tmp180 / _tmp184;
  const Scalar _tmp187 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp182, _tmp185) - 1)));
  const Scalar _tmp188 = std::max<Scalar>(0, (((_tmp166) > 0) - ((_tmp166) < 0)));
  const Scalar _tmp189 = _tmp177 * _tmp187 * _tmp188;
  const Scalar _tmp190 = _tmp176 * _tmp189;
  const Scalar _tmp191 = _tmp170 * _tmp190;
  const Scalar _tmp192 = _tmp174 * _tmp190;
  const Scalar _tmp193 = _tmp141 + matches_0_1_source_coords(0, 0);
  const Scalar _tmp194 = _tmp144 + matches_0_1_source_coords(1, 0);
  const Scalar _tmp195 = std::pow(Scalar(_tmp143 * std::pow(_tmp193, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp194, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp196 = _tmp194 * _tmp195;
  const Scalar _tmp197 = _tmp193 * _tmp195;
  const Scalar _tmp198 =
      _tmp140 * _tmp196 + _tmp150 * landmarks_1_ + _tmp152 * _tmp197 + _tmp195 * _tmp50;
  const Scalar _tmp199 =
      _tmp155 * _tmp197 + _tmp156 * _tmp196 + _tmp157 * landmarks_1_ + _tmp195 * _tmp51;
  const Scalar _tmp200 =
      _tmp159 * _tmp197 + _tmp160 * _tmp196 + _tmp161 * landmarks_1_ + _tmp195 * _tmp47;
  const Scalar _tmp201 = _tmp199 * _tmp89 + _tmp200 * _tmp85;
  const Scalar _tmp202 = _tmp198 * _tmp79 + _tmp201;
  const Scalar _tmp203 = _tmp108 * _tmp199 + _tmp110 * _tmp198;
  const Scalar _tmp204 = _tmp106 * _tmp200 + _tmp203;
  const Scalar _tmp205 = std::max<Scalar>(_tmp204, epsilon);
  const Scalar _tmp206 = Scalar(1.0) / (_tmp205);
  const Scalar _tmp207 = _tmp206 * _views_1_calibration[0];
  const Scalar _tmp208 =
      _tmp202 * _tmp207 + _views_1_calibration[2] - matches_0_1_target_coords(0, 0);
  const Scalar _tmp209 = _tmp102 * _tmp198 + _tmp200 * _tmp99;
  const Scalar _tmp210 = _tmp199 * _tmp96 + _tmp209;
  const Scalar _tmp211 = _tmp206 * _views_1_calibration[1];
  const Scalar _tmp212 =
      _tmp210 * _tmp211 + _views_1_calibration[3] - matches_0_1_target_coords(1, 0);
  const Scalar _tmp213 = std::pow(_tmp208, Scalar(2)) + std::pow(_tmp212, Scalar(2)) + epsilon;
  const Scalar _tmp214 = std::pow(_tmp213, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp215 = _tmp181 * _tmp213 + 1;
  const Scalar _tmp216 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp215, _tmp185) - 1)));
  const Scalar _tmp217 = std::sqrt(matches_0_1_weight);
  const Scalar _tmp218 = std::max<Scalar>(0, (((_tmp204) > 0) - ((_tmp204) < 0)));
  const Scalar _tmp219 = _tmp216 * _tmp217 * _tmp218;
  const Scalar _tmp220 = _tmp214 * _tmp219;
  const Scalar _tmp221 = _tmp208 * _tmp220;
  const Scalar _tmp222 = _tmp212 * _tmp220;
  const Scalar _tmp223 = _tmp144 + matches_0_2_source_coords(1, 0);
  const Scalar _tmp224 = _tmp141 + matches_0_2_source_coords(0, 0);
  const Scalar _tmp225 = std::pow(Scalar(_tmp143 * std::pow(_tmp224, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp223, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp226 = _tmp223 * _tmp225;
  const Scalar _tmp227 = _tmp224 * _tmp225;
  const Scalar _tmp228 =
      _tmp140 * _tmp226 + _tmp150 * landmarks_2_ + _tmp152 * _tmp227 + _tmp225 * _tmp50;
  const Scalar _tmp229 =
      _tmp159 * _tmp227 + _tmp160 * _tmp226 + _tmp161 * landmarks_2_ + _tmp225 * _tmp47;
  const Scalar _tmp230 =
      _tmp155 * _tmp227 + _tmp156 * _tmp226 + _tmp157 * landmarks_2_ + _tmp225 * _tmp51;
  const Scalar _tmp231 = _tmp229 * _tmp85 + _tmp230 * _tmp89;
  const Scalar _tmp232 = _tmp228 * _tmp79 + _tmp231;
  const Scalar _tmp233 = _tmp108 * _tmp230 + _tmp110 * _tmp228;
  const Scalar _tmp234 = _tmp106 * _tmp229 + _tmp233;
  const Scalar _tmp235 = std::max<Scalar>(_tmp234, epsilon);
  const Scalar _tmp236 = Scalar(1.0) / (_tmp235);
  const Scalar _tmp237 = _tmp236 * _views_1_calibration[0];
  const Scalar _tmp238 =
      _tmp232 * _tmp237 + _views_1_calibration[2] - matches_0_2_target_coords(0, 0);
  const Scalar _tmp239 = _tmp102 * _tmp228 + _tmp229 * _tmp99;
  const Scalar _tmp240 = _tmp230 * _tmp96 + _tmp239;
  const Scalar _tmp241 = _tmp236 * _views_1_calibration[1];
  const Scalar _tmp242 =
      _tmp240 * _tmp241 + _views_1_calibration[3] - matches_0_2_target_coords(1, 0);
  const Scalar _tmp243 = std::pow(_tmp238, Scalar(2)) + std::pow(_tmp242, Scalar(2)) + epsilon;
  const Scalar _tmp244 = std::pow(_tmp243, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp245 = std::max<Scalar>(0, (((_tmp234) > 0) - ((_tmp234) < 0)));
  const Scalar _tmp246 = std::sqrt(matches_0_2_weight);
  const Scalar _tmp247 = _tmp181 * _tmp243 + 1;
  const Scalar _tmp248 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp247, _tmp185) - 1)));
  const Scalar _tmp249 = _tmp245 * _tmp246 * _tmp248;
  const Scalar _tmp250 = _tmp244 * _tmp249;
  const Scalar _tmp251 = _tmp238 * _tmp250;
  const Scalar _tmp252 = _tmp242 * _tmp250;
  const Scalar _tmp253 = _tmp141 + matches_0_3_source_coords(0, 0);
  const Scalar _tmp254 = _tmp144 + matches_0_3_source_coords(1, 0);
  const Scalar _tmp255 = std::pow(Scalar(_tmp143 * std::pow(_tmp253, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp254, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp256 = _tmp254 * _tmp255;
  const Scalar _tmp257 = _tmp253 * _tmp255;
  const Scalar _tmp258 =
      _tmp140 * _tmp256 + _tmp150 * landmarks_3_ + _tmp152 * _tmp257 + _tmp255 * _tmp50;
  const Scalar _tmp259 =
      _tmp155 * _tmp257 + _tmp156 * _tmp256 + _tmp157 * landmarks_3_ + _tmp255 * _tmp51;
  const Scalar _tmp260 =
      _tmp159 * _tmp257 + _tmp160 * _tmp256 + _tmp161 * landmarks_3_ + _tmp255 * _tmp47;
  const Scalar _tmp261 = _tmp259 * _tmp89 + _tmp260 * _tmp85;
  const Scalar _tmp262 = _tmp258 * _tmp79 + _tmp261;
  const Scalar _tmp263 = _tmp108 * _tmp259 + _tmp110 * _tmp258;
  const Scalar _tmp264 = _tmp106 * _tmp260 + _tmp263;
  const Scalar _tmp265 = std::max<Scalar>(_tmp264, epsilon);
  const Scalar _tmp266 = Scalar(1.0) / (_tmp265);
  const Scalar _tmp267 = _tmp266 * _views_1_calibration[0];
  const Scalar _tmp268 =
      _tmp262 * _tmp267 + _views_1_calibration[2] - matches_0_3_target_coords(0, 0);
  const Scalar _tmp269 = _tmp102 * _tmp258 + _tmp260 * _tmp99;
  const Scalar _tmp270 = _tmp259 * _tmp96 + _tmp269;
  const Scalar _tmp271 = _tmp266 * _views_1_calibration[1];
  const Scalar _tmp272 =
      _tmp270 * _tmp271 + _views_1_calibration[3] - matches_0_3_target_coords(1, 0);
  const Scalar _tmp273 = std::pow(_tmp268, Scalar(2)) + std::pow(_tmp272, Scalar(2)) + epsilon;
  const Scalar _tmp274 = std::pow(_tmp273, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp275 = std::sqrt(matches_0_3_weight);
  const Scalar _tmp276 = _tmp181 * _tmp273 + 1;
  const Scalar _tmp277 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp276, _tmp185) - 1)));
  const Scalar _tmp278 = std::max<Scalar>(0, (((_tmp264) > 0) - ((_tmp264) < 0)));
  const Scalar _tmp279 = _tmp275 * _tmp277 * _tmp278;
  const Scalar _tmp280 = _tmp274 * _tmp279;
  const Scalar _tmp281 = _tmp268 * _tmp280;
  const Scalar _tmp282 = _tmp272 * _tmp280;
  const Scalar _tmp283 = _tmp144 + matches_0_4_source_coords(1, 0);
  const Scalar _tmp284 = _tmp141 + matches_0_4_source_coords(0, 0);
  const Scalar _tmp285 = std::pow(Scalar(_tmp143 * std::pow(_tmp284, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp283, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp286 = _tmp283 * _tmp285;
  const Scalar _tmp287 = _tmp284 * _tmp285;
  const Scalar _tmp288 =
      _tmp140 * _tmp286 + _tmp150 * landmarks_4_ + _tmp152 * _tmp287 + _tmp285 * _tmp50;
  const Scalar _tmp289 =
      _tmp159 * _tmp287 + _tmp160 * _tmp286 + _tmp161 * landmarks_4_ + _tmp285 * _tmp47;
  const Scalar _tmp290 =
      _tmp155 * _tmp287 + _tmp156 * _tmp286 + _tmp157 * landmarks_4_ + _tmp285 * _tmp51;
  const Scalar _tmp291 = _tmp289 * _tmp85 + _tmp290 * _tmp89;
  const Scalar _tmp292 = _tmp288 * _tmp79 + _tmp291;
  const Scalar _tmp293 = _tmp108 * _tmp290 + _tmp110 * _tmp288;
  const Scalar _tmp294 = _tmp106 * _tmp289 + _tmp293;
  const Scalar _tmp295 = std::max<Scalar>(_tmp294, epsilon);
  const Scalar _tmp296 = Scalar(1.0) / (_tmp295);
  const Scalar _tmp297 = _tmp296 * _views_1_calibration[0];
  const Scalar _tmp298 =
      _tmp292 * _tmp297 + _views_1_calibration[2] - matches_0_4_target_coords(0, 0);
  const Scalar _tmp299 = _tmp102 * _tmp288 + _tmp289 * _tmp99;
  const Scalar _tmp300 = _tmp290 * _tmp96 + _tmp299;
  const Scalar _tmp301 = _tmp296 * _views_1_calibration[1];
  const Scalar _tmp302 =
      _tmp300 * _tmp301 + _views_1_calibration[3] - matches_0_4_target_coords(1, 0);
  const Scalar _tmp303 = std::pow(_tmp298, Scalar(2)) + std::pow(_tmp302, Scalar(2)) + epsilon;
  const Scalar _tmp304 = std::pow(_tmp303, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp305 = std::sqrt(matches_0_4_weight);
  const Scalar _tmp306 = std::max<Scalar>(0, (((_tmp294) > 0) - ((_tmp294) < 0)));
  const Scalar _tmp307 = _tmp181 * _tmp303 + 1;
  const Scalar _tmp308 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp307, _tmp185) - 1)));
  const Scalar _tmp309 = _tmp305 * _tmp306 * _tmp308;
  const Scalar _tmp310 = _tmp304 * _tmp309;
  const Scalar _tmp311 = _tmp298 * _tmp310;
  const Scalar _tmp312 = _tmp302 * _tmp310;
  const Scalar _tmp313 = _tmp144 + matches_0_5_source_coords(1, 0);
  const Scalar _tmp314 = _tmp141 + matches_0_5_source_coords(0, 0);
  const Scalar _tmp315 = std::pow(Scalar(_tmp143 * std::pow(_tmp314, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp313, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp316 = _tmp313 * _tmp315;
  const Scalar _tmp317 = _tmp314 * _tmp315;
  const Scalar _tmp318 =
      _tmp140 * _tmp316 + _tmp150 * landmarks_5_ + _tmp152 * _tmp317 + _tmp315 * _tmp50;
  const Scalar _tmp319 =
      _tmp155 * _tmp317 + _tmp156 * _tmp316 + _tmp157 * landmarks_5_ + _tmp315 * _tmp51;
  const Scalar _tmp320 =
      _tmp159 * _tmp317 + _tmp160 * _tmp316 + _tmp161 * landmarks_5_ + _tmp315 * _tmp47;
  const Scalar _tmp321 = _tmp319 * _tmp89 + _tmp320 * _tmp85;
  const Scalar _tmp322 = _tmp318 * _tmp79 + _tmp321;
  const Scalar _tmp323 = _tmp108 * _tmp319 + _tmp110 * _tmp318;
  const Scalar _tmp324 = _tmp106 * _tmp320 + _tmp323;
  const Scalar _tmp325 = std::max<Scalar>(_tmp324, epsilon);
  const Scalar _tmp326 = Scalar(1.0) / (_tmp325);
  const Scalar _tmp327 = _tmp326 * _views_1_calibration[0];
  const Scalar _tmp328 =
      _tmp322 * _tmp327 + _views_1_calibration[2] - matches_0_5_target_coords(0, 0);
  const Scalar _tmp329 = _tmp102 * _tmp318 + _tmp320 * _tmp99;
  const Scalar _tmp330 = _tmp319 * _tmp96 + _tmp329;
  const Scalar _tmp331 = _tmp326 * _views_1_calibration[1];
  const Scalar _tmp332 =
      _tmp330 * _tmp331 + _views_1_calibration[3] - matches_0_5_target_coords(1, 0);
  const Scalar _tmp333 = std::pow(_tmp328, Scalar(2)) + std::pow(_tmp332, Scalar(2)) + epsilon;
  const Scalar _tmp334 = std::pow(_tmp333, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp335 = std::sqrt(matches_0_5_weight);
  const Scalar _tmp336 = std::max<Scalar>(0, (((_tmp324) > 0) - ((_tmp324) < 0)));
  const Scalar _tmp337 = _tmp181 * _tmp333 + 1;
  const Scalar _tmp338 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp337, _tmp185) - 1)));
  const Scalar _tmp339 = _tmp335 * _tmp336 * _tmp338;
  const Scalar _tmp340 = _tmp334 * _tmp339;
  const Scalar _tmp341 = _tmp328 * _tmp340;
  const Scalar _tmp342 = _tmp332 * _tmp340;
  const Scalar _tmp343 = _tmp141 + matches_0_6_source_coords(0, 0);
  const Scalar _tmp344 = _tmp144 + matches_0_6_source_coords(1, 0);
  const Scalar _tmp345 = std::pow(Scalar(_tmp143 * std::pow(_tmp343, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp344, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp346 = _tmp344 * _tmp345;
  const Scalar _tmp347 = _tmp343 * _tmp345;
  const Scalar _tmp348 =
      _tmp140 * _tmp346 + _tmp150 * landmarks_6_ + _tmp152 * _tmp347 + _tmp345 * _tmp50;
  const Scalar _tmp349 =
      _tmp155 * _tmp347 + _tmp156 * _tmp346 + _tmp157 * landmarks_6_ + _tmp345 * _tmp51;
  const Scalar _tmp350 =
      _tmp159 * _tmp347 + _tmp160 * _tmp346 + _tmp161 * landmarks_6_ + _tmp345 * _tmp47;
  const Scalar _tmp351 = _tmp349 * _tmp89 + _tmp350 * _tmp85;
  const Scalar _tmp352 = _tmp348 * _tmp79 + _tmp351;
  const Scalar _tmp353 = _tmp108 * _tmp349 + _tmp110 * _tmp348;
  const Scalar _tmp354 = _tmp106 * _tmp350 + _tmp353;
  const Scalar _tmp355 = std::max<Scalar>(_tmp354, epsilon);
  const Scalar _tmp356 = Scalar(1.0) / (_tmp355);
  const Scalar _tmp357 = _tmp356 * _views_1_calibration[0];
  const Scalar _tmp358 =
      _tmp352 * _tmp357 + _views_1_calibration[2] - matches_0_6_target_coords(0, 0);
  const Scalar _tmp359 = _tmp102 * _tmp348 + _tmp350 * _tmp99;
  const Scalar _tmp360 = _tmp349 * _tmp96 + _tmp359;
  const Scalar _tmp361 = _tmp356 * _views_1_calibration[1];
  const Scalar _tmp362 =
      _tmp360 * _tmp361 + _views_1_calibration[3] - matches_0_6_target_coords(1, 0);
  const Scalar _tmp363 = std::pow(_tmp358, Scalar(2)) + std::pow(_tmp362, Scalar(2)) + epsilon;
  const Scalar _tmp364 = std::pow(_tmp363, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp365 = std::sqrt(matches_0_6_weight);
  const Scalar _tmp366 = std::max<Scalar>(0, (((_tmp354) > 0) - ((_tmp354) < 0)));
  const Scalar _tmp367 = _tmp181 * _tmp363 + 1;
  const Scalar _tmp368 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp367, _tmp185) - 1)));
  const Scalar _tmp369 = _tmp365 * _tmp366 * _tmp368;
  const Scalar _tmp370 = _tmp364 * _tmp369;
  const Scalar _tmp371 = _tmp358 * _tmp370;
  const Scalar _tmp372 = _tmp362 * _tmp370;
  const Scalar _tmp373 = _tmp144 + matches_0_7_source_coords(1, 0);
  const Scalar _tmp374 = _tmp141 + matches_0_7_source_coords(0, 0);
  const Scalar _tmp375 = std::pow(Scalar(_tmp143 * std::pow(_tmp374, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp373, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp376 = _tmp373 * _tmp375;
  const Scalar _tmp377 = _tmp374 * _tmp375;
  const Scalar _tmp378 =
      _tmp140 * _tmp376 + _tmp150 * landmarks_7_ + _tmp152 * _tmp377 + _tmp375 * _tmp50;
  const Scalar _tmp379 =
      _tmp155 * _tmp377 + _tmp156 * _tmp376 + _tmp157 * landmarks_7_ + _tmp375 * _tmp51;
  const Scalar _tmp380 =
      _tmp159 * _tmp377 + _tmp160 * _tmp376 + _tmp161 * landmarks_7_ + _tmp375 * _tmp47;
  const Scalar _tmp381 = _tmp379 * _tmp89 + _tmp380 * _tmp85;
  const Scalar _tmp382 = _tmp378 * _tmp79 + _tmp381;
  const Scalar _tmp383 = _tmp108 * _tmp379 + _tmp110 * _tmp378;
  const Scalar _tmp384 = _tmp106 * _tmp380 + _tmp383;
  const Scalar _tmp385 = std::max<Scalar>(_tmp384, epsilon);
  const Scalar _tmp386 = Scalar(1.0) / (_tmp385);
  const Scalar _tmp387 = _tmp386 * _views_1_calibration[0];
  const Scalar _tmp388 =
      _tmp382 * _tmp387 + _views_1_calibration[2] - matches_0_7_target_coords(0, 0);
  const Scalar _tmp389 = _tmp102 * _tmp378 + _tmp380 * _tmp99;
  const Scalar _tmp390 = _tmp379 * _tmp96 + _tmp389;
  const Scalar _tmp391 = _tmp386 * _views_1_calibration[1];
  const Scalar _tmp392 =
      _tmp390 * _tmp391 + _views_1_calibration[3] - matches_0_7_target_coords(1, 0);
  const Scalar _tmp393 = std::pow(_tmp388, Scalar(2)) + std::pow(_tmp392, Scalar(2)) + epsilon;
  const Scalar _tmp394 = std::pow(_tmp393, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp395 = std::sqrt(matches_0_7_weight);
  const Scalar _tmp396 = std::max<Scalar>(0, (((_tmp384) > 0) - ((_tmp384) < 0)));
  const Scalar _tmp397 = _tmp181 * _tmp393 + 1;
  const Scalar _tmp398 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp397, _tmp185) - 1)));
  const Scalar _tmp399 = _tmp395 * _tmp396 * _tmp398;
  const Scalar _tmp400 = _tmp394 * _tmp399;
  const Scalar _tmp401 = _tmp388 * _tmp400;
  const Scalar _tmp402 = _tmp392 * _tmp400;
  const Scalar _tmp403 = _tmp144 + matches_0_8_source_coords(1, 0);
  const Scalar _tmp404 = _tmp141 + matches_0_8_source_coords(0, 0);
  const Scalar _tmp405 = std::pow(Scalar(_tmp143 * std::pow(_tmp404, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp403, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp406 = _tmp403 * _tmp405;
  const Scalar _tmp407 = _tmp404 * _tmp405;
  const Scalar _tmp408 =
      _tmp140 * _tmp406 + _tmp150 * landmarks_8_ + _tmp152 * _tmp407 + _tmp405 * _tmp50;
  const Scalar _tmp409 =
      _tmp155 * _tmp407 + _tmp156 * _tmp406 + _tmp157 * landmarks_8_ + _tmp405 * _tmp51;
  const Scalar _tmp410 =
      _tmp159 * _tmp407 + _tmp160 * _tmp406 + _tmp161 * landmarks_8_ + _tmp405 * _tmp47;
  const Scalar _tmp411 = _tmp409 * _tmp89 + _tmp410 * _tmp85;
  const Scalar _tmp412 = _tmp408 * _tmp79 + _tmp411;
  const Scalar _tmp413 = _tmp108 * _tmp409 + _tmp110 * _tmp408;
  const Scalar _tmp414 = _tmp106 * _tmp410 + _tmp413;
  const Scalar _tmp415 = std::max<Scalar>(_tmp414, epsilon);
  const Scalar _tmp416 = Scalar(1.0) / (_tmp415);
  const Scalar _tmp417 = _tmp416 * _views_1_calibration[0];
  const Scalar _tmp418 =
      _tmp412 * _tmp417 + _views_1_calibration[2] - matches_0_8_target_coords(0, 0);
  const Scalar _tmp419 = _tmp102 * _tmp408 + _tmp410 * _tmp99;
  const Scalar _tmp420 = _tmp409 * _tmp96 + _tmp419;
  const Scalar _tmp421 = _tmp416 * _views_1_calibration[1];
  const Scalar _tmp422 =
      _tmp420 * _tmp421 + _views_1_calibration[3] - matches_0_8_target_coords(1, 0);
  const Scalar _tmp423 = std::pow(_tmp418, Scalar(2)) + std::pow(_tmp422, Scalar(2)) + epsilon;
  const Scalar _tmp424 = std::pow(_tmp423, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp425 = std::sqrt(matches_0_8_weight);
  const Scalar _tmp426 = _tmp181 * _tmp423 + 1;
  const Scalar _tmp427 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp426, _tmp185) - 1)));
  const Scalar _tmp428 = std::max<Scalar>(0, (((_tmp414) > 0) - ((_tmp414) < 0)));
  const Scalar _tmp429 = _tmp425 * _tmp427 * _tmp428;
  const Scalar _tmp430 = _tmp424 * _tmp429;
  const Scalar _tmp431 = _tmp418 * _tmp430;
  const Scalar _tmp432 = _tmp422 * _tmp430;
  const Scalar _tmp433 = _tmp144 + matches_0_9_source_coords(1, 0);
  const Scalar _tmp434 = _tmp141 + matches_0_9_source_coords(0, 0);
  const Scalar _tmp435 = std::pow(Scalar(_tmp143 * std::pow(_tmp434, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp433, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp436 = _tmp433 * _tmp435;
  const Scalar _tmp437 = _tmp434 * _tmp435;
  const Scalar _tmp438 =
      _tmp140 * _tmp436 + _tmp150 * landmarks_9_ + _tmp152 * _tmp437 + _tmp435 * _tmp50;
  const Scalar _tmp439 =
      _tmp155 * _tmp437 + _tmp156 * _tmp436 + _tmp157 * landmarks_9_ + _tmp435 * _tmp51;
  const Scalar _tmp440 =
      _tmp159 * _tmp437 + _tmp160 * _tmp436 + _tmp161 * landmarks_9_ + _tmp435 * _tmp47;
  const Scalar _tmp441 = _tmp439 * _tmp89 + _tmp440 * _tmp85;
  const Scalar _tmp442 = _tmp438 * _tmp79 + _tmp441;
  const Scalar _tmp443 = _tmp108 * _tmp439 + _tmp110 * _tmp438;
  const Scalar _tmp444 = _tmp106 * _tmp440 + _tmp443;
  const Scalar _tmp445 = std::max<Scalar>(_tmp444, epsilon);
  const Scalar _tmp446 = Scalar(1.0) / (_tmp445);
  const Scalar _tmp447 = _tmp446 * _views_1_calibration[0];
  const Scalar _tmp448 =
      _tmp442 * _tmp447 + _views_1_calibration[2] - matches_0_9_target_coords(0, 0);
  const Scalar _tmp449 = _tmp102 * _tmp438 + _tmp440 * _tmp99;
  const Scalar _tmp450 = _tmp439 * _tmp96 + _tmp449;
  const Scalar _tmp451 = _tmp446 * _views_1_calibration[1];
  const Scalar _tmp452 =
      _tmp450 * _tmp451 + _views_1_calibration[3] - matches_0_9_target_coords(1, 0);
  const Scalar _tmp453 = std::pow(_tmp448, Scalar(2)) + std::pow(_tmp452, Scalar(2)) + epsilon;
  const Scalar _tmp454 = std::pow(_tmp453, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp455 = std::sqrt(matches_0_9_weight);
  const Scalar _tmp456 = std::max<Scalar>(0, (((_tmp444) > 0) - ((_tmp444) < 0)));
  const Scalar _tmp457 = _tmp181 * _tmp453 + 1;
  const Scalar _tmp458 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp457, _tmp185) - 1)));
  const Scalar _tmp459 = _tmp455 * _tmp456 * _tmp458;
  const Scalar _tmp460 = _tmp454 * _tmp459;
  const Scalar _tmp461 = _tmp448 * _tmp460;
  const Scalar _tmp462 = _tmp452 * _tmp460;
  const Scalar _tmp463 = _tmp144 + matches_0_10_source_coords(1, 0);
  const Scalar _tmp464 = _tmp141 + matches_0_10_source_coords(0, 0);
  const Scalar _tmp465 = std::pow(Scalar(_tmp143 * std::pow(_tmp464, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp463, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp466 = _tmp463 * _tmp465;
  const Scalar _tmp467 = _tmp464 * _tmp465;
  const Scalar _tmp468 =
      _tmp140 * _tmp466 + _tmp150 * landmarks_10_ + _tmp152 * _tmp467 + _tmp465 * _tmp50;
  const Scalar _tmp469 =
      _tmp159 * _tmp467 + _tmp160 * _tmp466 + _tmp161 * landmarks_10_ + _tmp465 * _tmp47;
  const Scalar _tmp470 =
      _tmp155 * _tmp467 + _tmp156 * _tmp466 + _tmp157 * landmarks_10_ + _tmp465 * _tmp51;
  const Scalar _tmp471 = _tmp469 * _tmp85 + _tmp470 * _tmp89;
  const Scalar _tmp472 = _tmp468 * _tmp79 + _tmp471;
  const Scalar _tmp473 = _tmp108 * _tmp470 + _tmp110 * _tmp468;
  const Scalar _tmp474 = _tmp106 * _tmp469 + _tmp473;
  const Scalar _tmp475 = std::max<Scalar>(_tmp474, epsilon);
  const Scalar _tmp476 = Scalar(1.0) / (_tmp475);
  const Scalar _tmp477 = _tmp476 * _views_1_calibration[0];
  const Scalar _tmp478 =
      _tmp472 * _tmp477 + _views_1_calibration[2] - matches_0_10_target_coords(0, 0);
  const Scalar _tmp479 = _tmp102 * _tmp468 + _tmp469 * _tmp99;
  const Scalar _tmp480 = _tmp470 * _tmp96 + _tmp479;
  const Scalar _tmp481 = _tmp476 * _views_1_calibration[1];
  const Scalar _tmp482 =
      _tmp480 * _tmp481 + _views_1_calibration[3] - matches_0_10_target_coords(1, 0);
  const Scalar _tmp483 = std::pow(_tmp478, Scalar(2)) + std::pow(_tmp482, Scalar(2)) + epsilon;
  const Scalar _tmp484 = std::pow(_tmp483, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp485 = std::sqrt(matches_0_10_weight);
  const Scalar _tmp486 = _tmp181 * _tmp483 + 1;
  const Scalar _tmp487 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp486, _tmp185) - 1)));
  const Scalar _tmp488 = std::max<Scalar>(0, (((_tmp474) > 0) - ((_tmp474) < 0)));
  const Scalar _tmp489 = _tmp485 * _tmp487 * _tmp488;
  const Scalar _tmp490 = _tmp484 * _tmp489;
  const Scalar _tmp491 = _tmp478 * _tmp490;
  const Scalar _tmp492 = _tmp482 * _tmp490;
  const Scalar _tmp493 = _tmp144 + matches_0_11_source_coords(1, 0);
  const Scalar _tmp494 = _tmp141 + matches_0_11_source_coords(0, 0);
  const Scalar _tmp495 = std::pow(Scalar(_tmp143 * std::pow(_tmp494, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp493, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp496 = _tmp493 * _tmp495;
  const Scalar _tmp497 = _tmp494 * _tmp495;
  const Scalar _tmp498 =
      _tmp140 * _tmp496 + _tmp150 * landmarks_11_ + _tmp152 * _tmp497 + _tmp495 * _tmp50;
  const Scalar _tmp499 =
      _tmp155 * _tmp497 + _tmp156 * _tmp496 + _tmp157 * landmarks_11_ + _tmp495 * _tmp51;
  const Scalar _tmp500 =
      _tmp159 * _tmp497 + _tmp160 * _tmp496 + _tmp161 * landmarks_11_ + _tmp47 * _tmp495;
  const Scalar _tmp501 = _tmp499 * _tmp89 + _tmp500 * _tmp85;
  const Scalar _tmp502 = _tmp498 * _tmp79 + _tmp501;
  const Scalar _tmp503 = _tmp108 * _tmp499 + _tmp110 * _tmp498;
  const Scalar _tmp504 = _tmp106 * _tmp500 + _tmp503;
  const Scalar _tmp505 = std::max<Scalar>(_tmp504, epsilon);
  const Scalar _tmp506 = Scalar(1.0) / (_tmp505);
  const Scalar _tmp507 = _tmp506 * _views_1_calibration[0];
  const Scalar _tmp508 =
      _tmp502 * _tmp507 + _views_1_calibration[2] - matches_0_11_target_coords(0, 0);
  const Scalar _tmp509 = _tmp102 * _tmp498 + _tmp500 * _tmp99;
  const Scalar _tmp510 = _tmp499 * _tmp96 + _tmp509;
  const Scalar _tmp511 = _tmp506 * _views_1_calibration[1];
  const Scalar _tmp512 =
      _tmp510 * _tmp511 + _views_1_calibration[3] - matches_0_11_target_coords(1, 0);
  const Scalar _tmp513 = std::pow(_tmp508, Scalar(2)) + std::pow(_tmp512, Scalar(2)) + epsilon;
  const Scalar _tmp514 = std::pow(_tmp513, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp515 = _tmp181 * _tmp513 + 1;
  const Scalar _tmp516 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp515, _tmp185) - 1)));
  const Scalar _tmp517 = std::sqrt(matches_0_11_weight);
  const Scalar _tmp518 = std::max<Scalar>(0, (((_tmp504) > 0) - ((_tmp504) < 0)));
  const Scalar _tmp519 = _tmp516 * _tmp517 * _tmp518;
  const Scalar _tmp520 = _tmp514 * _tmp519;
  const Scalar _tmp521 = _tmp508 * _tmp520;
  const Scalar _tmp522 = _tmp512 * _tmp520;
  const Scalar _tmp523 = _tmp144 + matches_0_12_source_coords(1, 0);
  const Scalar _tmp524 = _tmp141 + matches_0_12_source_coords(0, 0);
  const Scalar _tmp525 = std::pow(Scalar(_tmp143 * std::pow(_tmp524, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp523, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp526 = _tmp523 * _tmp525;
  const Scalar _tmp527 = _tmp524 * _tmp525;
  const Scalar _tmp528 =
      _tmp140 * _tmp526 + _tmp150 * landmarks_12_ + _tmp152 * _tmp527 + _tmp50 * _tmp525;
  const Scalar _tmp529 =
      _tmp159 * _tmp527 + _tmp160 * _tmp526 + _tmp161 * landmarks_12_ + _tmp47 * _tmp525;
  const Scalar _tmp530 =
      _tmp155 * _tmp527 + _tmp156 * _tmp526 + _tmp157 * landmarks_12_ + _tmp51 * _tmp525;
  const Scalar _tmp531 = _tmp529 * _tmp85 + _tmp530 * _tmp89;
  const Scalar _tmp532 = _tmp528 * _tmp79 + _tmp531;
  const Scalar _tmp533 = _tmp108 * _tmp530 + _tmp110 * _tmp528;
  const Scalar _tmp534 = _tmp106 * _tmp529 + _tmp533;
  const Scalar _tmp535 = std::max<Scalar>(_tmp534, epsilon);
  const Scalar _tmp536 = Scalar(1.0) / (_tmp535);
  const Scalar _tmp537 = _tmp536 * _views_1_calibration[0];
  const Scalar _tmp538 =
      _tmp532 * _tmp537 + _views_1_calibration[2] - matches_0_12_target_coords(0, 0);
  const Scalar _tmp539 = _tmp102 * _tmp528 + _tmp529 * _tmp99;
  const Scalar _tmp540 = _tmp530 * _tmp96 + _tmp539;
  const Scalar _tmp541 = _tmp536 * _views_1_calibration[1];
  const Scalar _tmp542 =
      _tmp540 * _tmp541 + _views_1_calibration[3] - matches_0_12_target_coords(1, 0);
  const Scalar _tmp543 = std::pow(_tmp538, Scalar(2)) + std::pow(_tmp542, Scalar(2)) + epsilon;
  const Scalar _tmp544 = std::pow(_tmp543, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp545 = _tmp181 * _tmp543 + 1;
  const Scalar _tmp546 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp545, _tmp185) - 1)));
  const Scalar _tmp547 = std::sqrt(matches_0_12_weight);
  const Scalar _tmp548 = std::max<Scalar>(0, (((_tmp534) > 0) - ((_tmp534) < 0)));
  const Scalar _tmp549 = _tmp546 * _tmp547 * _tmp548;
  const Scalar _tmp550 = _tmp544 * _tmp549;
  const Scalar _tmp551 = _tmp538 * _tmp550;
  const Scalar _tmp552 = _tmp542 * _tmp550;
  const Scalar _tmp553 = _tmp144 + matches_0_13_source_coords(1, 0);
  const Scalar _tmp554 = _tmp141 + matches_0_13_source_coords(0, 0);
  const Scalar _tmp555 = std::pow(Scalar(_tmp143 * std::pow(_tmp554, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp553, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp556 = _tmp553 * _tmp555;
  const Scalar _tmp557 = _tmp554 * _tmp555;
  const Scalar _tmp558 =
      _tmp140 * _tmp556 + _tmp150 * landmarks_13_ + _tmp152 * _tmp557 + _tmp50 * _tmp555;
  const Scalar _tmp559 =
      _tmp155 * _tmp557 + _tmp156 * _tmp556 + _tmp157 * landmarks_13_ + _tmp51 * _tmp555;
  const Scalar _tmp560 =
      _tmp159 * _tmp557 + _tmp160 * _tmp556 + _tmp161 * landmarks_13_ + _tmp47 * _tmp555;
  const Scalar _tmp561 = _tmp559 * _tmp89 + _tmp560 * _tmp85;
  const Scalar _tmp562 = _tmp558 * _tmp79 + _tmp561;
  const Scalar _tmp563 = _tmp108 * _tmp559 + _tmp110 * _tmp558;
  const Scalar _tmp564 = _tmp106 * _tmp560 + _tmp563;
  const Scalar _tmp565 = std::max<Scalar>(_tmp564, epsilon);
  const Scalar _tmp566 = Scalar(1.0) / (_tmp565);
  const Scalar _tmp567 = _tmp566 * _views_1_calibration[0];
  const Scalar _tmp568 =
      _tmp562 * _tmp567 + _views_1_calibration[2] - matches_0_13_target_coords(0, 0);
  const Scalar _tmp569 = _tmp102 * _tmp558 + _tmp560 * _tmp99;
  const Scalar _tmp570 = _tmp559 * _tmp96 + _tmp569;
  const Scalar _tmp571 = _tmp566 * _views_1_calibration[1];
  const Scalar _tmp572 =
      _tmp570 * _tmp571 + _views_1_calibration[3] - matches_0_13_target_coords(1, 0);
  const Scalar _tmp573 = std::pow(_tmp568, Scalar(2)) + std::pow(_tmp572, Scalar(2)) + epsilon;
  const Scalar _tmp574 = std::pow(_tmp573, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp575 = _tmp181 * _tmp573 + 1;
  const Scalar _tmp576 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp575, _tmp185) - 1)));
  const Scalar _tmp577 = std::sqrt(matches_0_13_weight);
  const Scalar _tmp578 = std::max<Scalar>(0, (((_tmp564) > 0) - ((_tmp564) < 0)));
  const Scalar _tmp579 = _tmp576 * _tmp577 * _tmp578;
  const Scalar _tmp580 = _tmp574 * _tmp579;
  const Scalar _tmp581 = _tmp568 * _tmp580;
  const Scalar _tmp582 = _tmp572 * _tmp580;
  const Scalar _tmp583 = _tmp144 + matches_0_14_source_coords(1, 0);
  const Scalar _tmp584 = _tmp141 + matches_0_14_source_coords(0, 0);
  const Scalar _tmp585 = std::pow(Scalar(_tmp143 * std::pow(_tmp584, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp583, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp586 = _tmp583 * _tmp585;
  const Scalar _tmp587 = _tmp584 * _tmp585;
  const Scalar _tmp588 =
      _tmp140 * _tmp586 + _tmp150 * landmarks_14_ + _tmp152 * _tmp587 + _tmp50 * _tmp585;
  const Scalar _tmp589 =
      _tmp155 * _tmp587 + _tmp156 * _tmp586 + _tmp157 * landmarks_14_ + _tmp51 * _tmp585;
  const Scalar _tmp590 =
      _tmp159 * _tmp587 + _tmp160 * _tmp586 + _tmp161 * landmarks_14_ + _tmp47 * _tmp585;
  const Scalar _tmp591 = _tmp589 * _tmp89 + _tmp590 * _tmp85;
  const Scalar _tmp592 = _tmp588 * _tmp79 + _tmp591;
  const Scalar _tmp593 = _tmp108 * _tmp589 + _tmp110 * _tmp588;
  const Scalar _tmp594 = _tmp106 * _tmp590 + _tmp593;
  const Scalar _tmp595 = std::max<Scalar>(_tmp594, epsilon);
  const Scalar _tmp596 = Scalar(1.0) / (_tmp595);
  const Scalar _tmp597 = _tmp596 * _views_1_calibration[0];
  const Scalar _tmp598 =
      _tmp592 * _tmp597 + _views_1_calibration[2] - matches_0_14_target_coords(0, 0);
  const Scalar _tmp599 = _tmp102 * _tmp588 + _tmp590 * _tmp99;
  const Scalar _tmp600 = _tmp589 * _tmp96 + _tmp599;
  const Scalar _tmp601 = _tmp596 * _views_1_calibration[1];
  const Scalar _tmp602 =
      _tmp600 * _tmp601 + _views_1_calibration[3] - matches_0_14_target_coords(1, 0);
  const Scalar _tmp603 = std::pow(_tmp598, Scalar(2)) + std::pow(_tmp602, Scalar(2)) + epsilon;
  const Scalar _tmp604 = std::pow(_tmp603, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp605 = std::sqrt(matches_0_14_weight);
  const Scalar _tmp606 = _tmp181 * _tmp603 + 1;
  const Scalar _tmp607 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp606, _tmp185) - 1)));
  const Scalar _tmp608 = std::max<Scalar>(0, (((_tmp594) > 0) - ((_tmp594) < 0)));
  const Scalar _tmp609 = _tmp605 * _tmp607 * _tmp608;
  const Scalar _tmp610 = _tmp604 * _tmp609;
  const Scalar _tmp611 = _tmp598 * _tmp610;
  const Scalar _tmp612 = _tmp602 * _tmp610;
  const Scalar _tmp613 = _tmp144 + matches_0_15_source_coords(1, 0);
  const Scalar _tmp614 = _tmp141 + matches_0_15_source_coords(0, 0);
  const Scalar _tmp615 = std::pow(Scalar(_tmp143 * std::pow(_tmp614, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp613, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp616 = _tmp613 * _tmp615;
  const Scalar _tmp617 = _tmp614 * _tmp615;
  const Scalar _tmp618 =
      _tmp140 * _tmp616 + _tmp150 * landmarks_15_ + _tmp152 * _tmp617 + _tmp50 * _tmp615;
  const Scalar _tmp619 =
      _tmp159 * _tmp617 + _tmp160 * _tmp616 + _tmp161 * landmarks_15_ + _tmp47 * _tmp615;
  const Scalar _tmp620 =
      _tmp155 * _tmp617 + _tmp156 * _tmp616 + _tmp157 * landmarks_15_ + _tmp51 * _tmp615;
  const Scalar _tmp621 = _tmp619 * _tmp85 + _tmp620 * _tmp89;
  const Scalar _tmp622 = _tmp618 * _tmp79 + _tmp621;
  const Scalar _tmp623 = _tmp108 * _tmp620 + _tmp110 * _tmp618;
  const Scalar _tmp624 = _tmp106 * _tmp619 + _tmp623;
  const Scalar _tmp625 = std::max<Scalar>(_tmp624, epsilon);
  const Scalar _tmp626 = Scalar(1.0) / (_tmp625);
  const Scalar _tmp627 = _tmp626 * _views_1_calibration[0];
  const Scalar _tmp628 =
      _tmp622 * _tmp627 + _views_1_calibration[2] - matches_0_15_target_coords(0, 0);
  const Scalar _tmp629 = _tmp102 * _tmp618 + _tmp619 * _tmp99;
  const Scalar _tmp630 = _tmp620 * _tmp96 + _tmp629;
  const Scalar _tmp631 = _tmp626 * _views_1_calibration[1];
  const Scalar _tmp632 =
      _tmp630 * _tmp631 + _views_1_calibration[3] - matches_0_15_target_coords(1, 0);
  const Scalar _tmp633 = std::pow(_tmp628, Scalar(2)) + std::pow(_tmp632, Scalar(2)) + epsilon;
  const Scalar _tmp634 = std::pow(_tmp633, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp635 = _tmp181 * _tmp633 + 1;
  const Scalar _tmp636 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp635, _tmp185) - 1)));
  const Scalar _tmp637 = std::sqrt(matches_0_15_weight);
  const Scalar _tmp638 = std::max<Scalar>(0, (((_tmp624) > 0) - ((_tmp624) < 0)));
  const Scalar _tmp639 = _tmp636 * _tmp637 * _tmp638;
  const Scalar _tmp640 = _tmp634 * _tmp639;
  const Scalar _tmp641 = _tmp628 * _tmp640;
  const Scalar _tmp642 = _tmp632 * _tmp640;
  const Scalar _tmp643 = _tmp144 + matches_0_16_source_coords(1, 0);
  const Scalar _tmp644 = _tmp141 + matches_0_16_source_coords(0, 0);
  const Scalar _tmp645 = std::pow(Scalar(_tmp143 * std::pow(_tmp644, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp643, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp646 = _tmp643 * _tmp645;
  const Scalar _tmp647 = _tmp644 * _tmp645;
  const Scalar _tmp648 =
      _tmp140 * _tmp646 + _tmp150 * landmarks_16_ + _tmp152 * _tmp647 + _tmp50 * _tmp645;
  const Scalar _tmp649 =
      _tmp155 * _tmp647 + _tmp156 * _tmp646 + _tmp157 * landmarks_16_ + _tmp51 * _tmp645;
  const Scalar _tmp650 =
      _tmp159 * _tmp647 + _tmp160 * _tmp646 + _tmp161 * landmarks_16_ + _tmp47 * _tmp645;
  const Scalar _tmp651 = _tmp649 * _tmp89 + _tmp650 * _tmp85;
  const Scalar _tmp652 = _tmp648 * _tmp79 + _tmp651;
  const Scalar _tmp653 = _tmp108 * _tmp649 + _tmp110 * _tmp648;
  const Scalar _tmp654 = _tmp106 * _tmp650 + _tmp653;
  const Scalar _tmp655 = std::max<Scalar>(_tmp654, epsilon);
  const Scalar _tmp656 = Scalar(1.0) / (_tmp655);
  const Scalar _tmp657 = _tmp656 * _views_1_calibration[0];
  const Scalar _tmp658 =
      _tmp652 * _tmp657 + _views_1_calibration[2] - matches_0_16_target_coords(0, 0);
  const Scalar _tmp659 = _tmp102 * _tmp648 + _tmp650 * _tmp99;
  const Scalar _tmp660 = _tmp649 * _tmp96 + _tmp659;
  const Scalar _tmp661 = _tmp656 * _views_1_calibration[1];
  const Scalar _tmp662 =
      _tmp660 * _tmp661 + _views_1_calibration[3] - matches_0_16_target_coords(1, 0);
  const Scalar _tmp663 = std::pow(_tmp658, Scalar(2)) + std::pow(_tmp662, Scalar(2)) + epsilon;
  const Scalar _tmp664 = std::pow(_tmp663, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp665 = std::sqrt(matches_0_16_weight);
  const Scalar _tmp666 = std::max<Scalar>(0, (((_tmp654) > 0) - ((_tmp654) < 0)));
  const Scalar _tmp667 = _tmp181 * _tmp663 + 1;
  const Scalar _tmp668 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp667, _tmp185) - 1)));
  const Scalar _tmp669 = _tmp665 * _tmp666 * _tmp668;
  const Scalar _tmp670 = _tmp664 * _tmp669;
  const Scalar _tmp671 = _tmp658 * _tmp670;
  const Scalar _tmp672 = _tmp662 * _tmp670;
  const Scalar _tmp673 = _tmp144 + matches_0_17_source_coords(1, 0);
  const Scalar _tmp674 = _tmp141 + matches_0_17_source_coords(0, 0);
  const Scalar _tmp675 = std::pow(Scalar(_tmp143 * std::pow(_tmp674, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp673, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp676 = _tmp673 * _tmp675;
  const Scalar _tmp677 = _tmp674 * _tmp675;
  const Scalar _tmp678 =
      _tmp140 * _tmp676 + _tmp150 * landmarks_17_ + _tmp152 * _tmp677 + _tmp50 * _tmp675;
  const Scalar _tmp679 =
      _tmp155 * _tmp677 + _tmp156 * _tmp676 + _tmp157 * landmarks_17_ + _tmp51 * _tmp675;
  const Scalar _tmp680 =
      _tmp159 * _tmp677 + _tmp160 * _tmp676 + _tmp161 * landmarks_17_ + _tmp47 * _tmp675;
  const Scalar _tmp681 = _tmp679 * _tmp89 + _tmp680 * _tmp85;
  const Scalar _tmp682 = _tmp678 * _tmp79 + _tmp681;
  const Scalar _tmp683 = _tmp108 * _tmp679 + _tmp110 * _tmp678;
  const Scalar _tmp684 = _tmp106 * _tmp680 + _tmp683;
  const Scalar _tmp685 = std::max<Scalar>(_tmp684, epsilon);
  const Scalar _tmp686 = Scalar(1.0) / (_tmp685);
  const Scalar _tmp687 = _tmp686 * _views_1_calibration[0];
  const Scalar _tmp688 =
      _tmp682 * _tmp687 + _views_1_calibration[2] - matches_0_17_target_coords(0, 0);
  const Scalar _tmp689 = _tmp102 * _tmp678 + _tmp680 * _tmp99;
  const Scalar _tmp690 = _tmp679 * _tmp96 + _tmp689;
  const Scalar _tmp691 = _tmp686 * _views_1_calibration[1];
  const Scalar _tmp692 =
      _tmp690 * _tmp691 + _views_1_calibration[3] - matches_0_17_target_coords(1, 0);
  const Scalar _tmp693 = std::pow(_tmp688, Scalar(2)) + std::pow(_tmp692, Scalar(2)) + epsilon;
  const Scalar _tmp694 = std::pow(_tmp693, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp695 = std::sqrt(matches_0_17_weight);
  const Scalar _tmp696 = std::max<Scalar>(0, (((_tmp684) > 0) - ((_tmp684) < 0)));
  const Scalar _tmp697 = _tmp181 * _tmp693 + 1;
  const Scalar _tmp698 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp697, _tmp185) - 1)));
  const Scalar _tmp699 = _tmp695 * _tmp696 * _tmp698;
  const Scalar _tmp700 = _tmp694 * _tmp699;
  const Scalar _tmp701 = _tmp688 * _tmp700;
  const Scalar _tmp702 = _tmp692 * _tmp700;
  const Scalar _tmp703 = _tmp144 + matches_0_18_source_coords(1, 0);
  const Scalar _tmp704 = _tmp141 + matches_0_18_source_coords(0, 0);
  const Scalar _tmp705 = std::pow(Scalar(_tmp143 * std::pow(_tmp704, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp703, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp706 = _tmp703 * _tmp705;
  const Scalar _tmp707 = _tmp704 * _tmp705;
  const Scalar _tmp708 =
      _tmp140 * _tmp706 + _tmp150 * landmarks_18_ + _tmp152 * _tmp707 + _tmp50 * _tmp705;
  const Scalar _tmp709 =
      _tmp159 * _tmp707 + _tmp160 * _tmp706 + _tmp161 * landmarks_18_ + _tmp47 * _tmp705;
  const Scalar _tmp710 =
      _tmp155 * _tmp707 + _tmp156 * _tmp706 + _tmp157 * landmarks_18_ + _tmp51 * _tmp705;
  const Scalar _tmp711 = _tmp709 * _tmp85 + _tmp710 * _tmp89;
  const Scalar _tmp712 = _tmp708 * _tmp79 + _tmp711;
  const Scalar _tmp713 = _tmp108 * _tmp710 + _tmp110 * _tmp708;
  const Scalar _tmp714 = _tmp106 * _tmp709 + _tmp713;
  const Scalar _tmp715 = std::max<Scalar>(_tmp714, epsilon);
  const Scalar _tmp716 = Scalar(1.0) / (_tmp715);
  const Scalar _tmp717 = _tmp716 * _views_1_calibration[0];
  const Scalar _tmp718 =
      _tmp712 * _tmp717 + _views_1_calibration[2] - matches_0_18_target_coords(0, 0);
  const Scalar _tmp719 = _tmp102 * _tmp708 + _tmp709 * _tmp99;
  const Scalar _tmp720 = _tmp710 * _tmp96 + _tmp719;
  const Scalar _tmp721 = _tmp716 * _views_1_calibration[1];
  const Scalar _tmp722 =
      _tmp720 * _tmp721 + _views_1_calibration[3] - matches_0_18_target_coords(1, 0);
  const Scalar _tmp723 = std::pow(_tmp718, Scalar(2)) + std::pow(_tmp722, Scalar(2)) + epsilon;
  const Scalar _tmp724 = std::pow(_tmp723, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp725 = std::max<Scalar>(0, (((_tmp714) > 0) - ((_tmp714) < 0)));
  const Scalar _tmp726 = std::sqrt(matches_0_18_weight);
  const Scalar _tmp727 = _tmp181 * _tmp723 + 1;
  const Scalar _tmp728 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp727, _tmp185) - 1)));
  const Scalar _tmp729 = _tmp725 * _tmp726 * _tmp728;
  const Scalar _tmp730 = _tmp724 * _tmp729;
  const Scalar _tmp731 = _tmp718 * _tmp730;
  const Scalar _tmp732 = _tmp722 * _tmp730;
  const Scalar _tmp733 = _tmp144 + matches_0_19_source_coords(1, 0);
  const Scalar _tmp734 = _tmp141 + matches_0_19_source_coords(0, 0);
  const Scalar _tmp735 = std::pow(Scalar(_tmp143 * std::pow(_tmp734, Scalar(2)) +
                                         _tmp146 * std::pow(_tmp733, Scalar(2)) + _tmp147),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp736 = _tmp733 * _tmp735;
  const Scalar _tmp737 = _tmp734 * _tmp735;
  const Scalar _tmp738 =
      _tmp140 * _tmp736 + _tmp150 * landmarks_19_ + _tmp152 * _tmp737 + _tmp50 * _tmp735;
  const Scalar _tmp739 =
      _tmp159 * _tmp737 + _tmp160 * _tmp736 + _tmp161 * landmarks_19_ + _tmp47 * _tmp735;
  const Scalar _tmp740 =
      _tmp155 * _tmp737 + _tmp156 * _tmp736 + _tmp157 * landmarks_19_ + _tmp51 * _tmp735;
  const Scalar _tmp741 = _tmp739 * _tmp85 + _tmp740 * _tmp89;
  const Scalar _tmp742 = _tmp738 * _tmp79 + _tmp741;
  const Scalar _tmp743 = _tmp108 * _tmp740 + _tmp110 * _tmp738;
  const Scalar _tmp744 = _tmp106 * _tmp739 + _tmp743;
  const Scalar _tmp745 = std::max<Scalar>(_tmp744, epsilon);
  const Scalar _tmp746 = Scalar(1.0) / (_tmp745);
  const Scalar _tmp747 = _tmp746 * _views_1_calibration[0];
  const Scalar _tmp748 =
      _tmp742 * _tmp747 + _views_1_calibration[2] - matches_0_19_target_coords(0, 0);
  const Scalar _tmp749 = _tmp102 * _tmp738 + _tmp739 * _tmp99;
  const Scalar _tmp750 = _tmp740 * _tmp96 + _tmp749;
  const Scalar _tmp751 = _tmp746 * _views_1_calibration[1];
  const Scalar _tmp752 =
      _tmp750 * _tmp751 + _views_1_calibration[3] - matches_0_19_target_coords(1, 0);
  const Scalar _tmp753 = std::pow(_tmp748, Scalar(2)) + std::pow(_tmp752, Scalar(2)) + epsilon;
  const Scalar _tmp754 = std::pow(_tmp753, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp755 = std::sqrt(matches_0_19_weight);
  const Scalar _tmp756 = std::max<Scalar>(0, (((_tmp744) > 0) - ((_tmp744) < 0)));
  const Scalar _tmp757 = _tmp181 * _tmp753 + 1;
  const Scalar _tmp758 = std::sqrt(Scalar(_tmp186 * (std::pow(_tmp757, _tmp185) - 1)));
  const Scalar _tmp759 = _tmp755 * _tmp756 * _tmp758;
  const Scalar _tmp760 = _tmp754 * _tmp759;
  const Scalar _tmp761 = _tmp748 * _tmp760;
  const Scalar _tmp762 = _tmp752 * _tmp760;
  const Scalar _tmp763 = landmarks_0_ - matches_0_0_inverse_range_prior;
  const Scalar _tmp764 = epsilon + matches_0_0_inverse_range_prior_sigma;
  const Scalar _tmp765 = matches_0_0_weight / _tmp764;
  const Scalar _tmp766 = landmarks_1_ - matches_0_1_inverse_range_prior;
  const Scalar _tmp767 = epsilon + matches_0_1_inverse_range_prior_sigma;
  const Scalar _tmp768 = matches_0_1_weight / _tmp767;
  const Scalar _tmp769 = landmarks_2_ - matches_0_2_inverse_range_prior;
  const Scalar _tmp770 = epsilon + matches_0_2_inverse_range_prior_sigma;
  const Scalar _tmp771 = matches_0_2_weight / _tmp770;
  const Scalar _tmp772 = landmarks_3_ - matches_0_3_inverse_range_prior;
  const Scalar _tmp773 = epsilon + matches_0_3_inverse_range_prior_sigma;
  const Scalar _tmp774 = matches_0_3_weight / _tmp773;
  const Scalar _tmp775 = landmarks_4_ - matches_0_4_inverse_range_prior;
  const Scalar _tmp776 = epsilon + matches_0_4_inverse_range_prior_sigma;
  const Scalar _tmp777 = matches_0_4_weight / _tmp776;
  const Scalar _tmp778 = landmarks_5_ - matches_0_5_inverse_range_prior;
  const Scalar _tmp779 = epsilon + matches_0_5_inverse_range_prior_sigma;
  const Scalar _tmp780 = matches_0_5_weight / _tmp779;
  const Scalar _tmp781 = landmarks_6_ - matches_0_6_inverse_range_prior;
  const Scalar _tmp782 = epsilon + matches_0_6_inverse_range_prior_sigma;
  const Scalar _tmp783 = matches_0_6_weight / _tmp782;
  const Scalar _tmp784 = landmarks_7_ - matches_0_7_inverse_range_prior;
  const Scalar _tmp785 = epsilon + matches_0_7_inverse_range_prior_sigma;
  const Scalar _tmp786 = matches_0_7_weight / _tmp785;
  const Scalar _tmp787 = landmarks_8_ - matches_0_8_inverse_range_prior;
  const Scalar _tmp788 = epsilon + matches_0_8_inverse_range_prior_sigma;
  const Scalar _tmp789 = matches_0_8_weight / _tmp788;
  const Scalar _tmp790 = landmarks_9_ - matches_0_9_inverse_range_prior;
  const Scalar _tmp791 = epsilon + matches_0_9_inverse_range_prior_sigma;
  const Scalar _tmp792 = matches_0_9_weight / _tmp791;
  const Scalar _tmp793 = landmarks_10_ - matches_0_10_inverse_range_prior;
  const Scalar _tmp794 = epsilon + matches_0_10_inverse_range_prior_sigma;
  const Scalar _tmp795 = matches_0_10_weight / _tmp794;
  const Scalar _tmp796 = landmarks_11_ - matches_0_11_inverse_range_prior;
  const Scalar _tmp797 = epsilon + matches_0_11_inverse_range_prior_sigma;
  const Scalar _tmp798 = matches_0_11_weight / _tmp797;
  const Scalar _tmp799 = landmarks_12_ - matches_0_12_inverse_range_prior;
  const Scalar _tmp800 = epsilon + matches_0_12_inverse_range_prior_sigma;
  const Scalar _tmp801 = matches_0_12_weight / _tmp800;
  const Scalar _tmp802 = landmarks_13_ - matches_0_13_inverse_range_prior;
  const Scalar _tmp803 = epsilon + matches_0_13_inverse_range_prior_sigma;
  const Scalar _tmp804 = matches_0_13_weight / _tmp803;
  const Scalar _tmp805 = landmarks_14_ - matches_0_14_inverse_range_prior;
  const Scalar _tmp806 = epsilon + matches_0_14_inverse_range_prior_sigma;
  const Scalar _tmp807 = matches_0_14_weight / _tmp806;
  const Scalar _tmp808 = landmarks_15_ - matches_0_15_inverse_range_prior;
  const Scalar _tmp809 = epsilon + matches_0_15_inverse_range_prior_sigma;
  const Scalar _tmp810 = matches_0_15_weight / _tmp809;
  const Scalar _tmp811 = landmarks_16_ - matches_0_16_inverse_range_prior;
  const Scalar _tmp812 = epsilon + matches_0_16_inverse_range_prior_sigma;
  const Scalar _tmp813 = matches_0_16_weight / _tmp812;
  const Scalar _tmp814 = landmarks_17_ - matches_0_17_inverse_range_prior;
  const Scalar _tmp815 = epsilon + matches_0_17_inverse_range_prior_sigma;
  const Scalar _tmp816 = matches_0_17_weight / _tmp815;
  const Scalar _tmp817 = landmarks_18_ - matches_0_18_inverse_range_prior;
  const Scalar _tmp818 = epsilon + matches_0_18_inverse_range_prior_sigma;
  const Scalar _tmp819 = matches_0_18_weight / _tmp818;
  const Scalar _tmp820 = landmarks_19_ - matches_0_19_inverse_range_prior;
  const Scalar _tmp821 = epsilon + matches_0_19_inverse_range_prior_sigma;
  const Scalar _tmp822 = matches_0_19_weight / _tmp821;
  const Scalar _tmp823 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp824 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp825 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp826 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp827 = -_tmp823 - _tmp824 - _tmp825 - _tmp826;
  const Scalar _tmp828 = _priors_1_0_target_T_src[0] * _tmp827;
  const Scalar _tmp829 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp830 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp831 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp832 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp833 = -_tmp829 - _tmp830 + _tmp831 + _tmp832;
  const Scalar _tmp834 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp835 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp836 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp837 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp838 = _tmp834 - _tmp835 + _tmp836 - _tmp837;
  const Scalar _tmp839 = _priors_1_0_target_T_src[3] * _tmp838;
  const Scalar _tmp840 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp841 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp842 = (Scalar(1) / Scalar(2)) * _tmp29;
  const Scalar _tmp843 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp844 = _tmp840 - _tmp841 - _tmp842 + _tmp843;
  const Scalar _tmp845 = _priors_1_0_target_T_src[1] * _tmp844;
  const Scalar _tmp846 = _priors_1_0_target_T_src[2] * _tmp833 + _tmp828 + _tmp839 + _tmp845;
  const Scalar _tmp847 = _tmp119 * ((((-_tmp121 + _tmp36) > 0) - ((-_tmp121 + _tmp36) < 0)) + 1);
  const Scalar _tmp848 = _tmp847 / _tmp124;
  const Scalar _tmp849 = _tmp120 * _tmp848;
  const Scalar _tmp850 = _tmp846 * _tmp849;
  const Scalar _tmp851 = _tmp130 * priors_1_0_sqrt_info(4, 0);
  const Scalar _tmp852 = _tmp128 * _tmp848;
  const Scalar _tmp853 = _tmp852 * priors_1_0_sqrt_info(4, 1);
  const Scalar _tmp854 = _tmp117 * priors_1_0_sqrt_info(4, 2);
  const Scalar _tmp855 = _priors_1_0_target_T_src[1] * _tmp827;
  const Scalar _tmp856 = _priors_1_0_target_T_src[2] * _tmp838;
  const Scalar _tmp857 = -_priors_1_0_target_T_src[0] * _tmp844;
  const Scalar _tmp858 =
      _tmp126 * (_priors_1_0_target_T_src[3] * _tmp833 + _tmp855 - _tmp856 + _tmp857);
  const Scalar _tmp859 = _priors_1_0_target_T_src[3] * _tmp827;
  const Scalar _tmp860 = _priors_1_0_target_T_src[0] * _tmp838;
  const Scalar _tmp861 = _priors_1_0_target_T_src[2] * _tmp844;
  const Scalar _tmp862 =
      _tmp126 * (-_priors_1_0_target_T_src[1] * _tmp833 + _tmp859 - _tmp860 + _tmp861);
  const Scalar _tmp863 = _priors_1_0_target_T_src[2] * _tmp827;
  const Scalar _tmp864 = -_priors_1_0_target_T_src[1] * _tmp838;
  const Scalar _tmp865 = _priors_1_0_target_T_src[3] * _tmp844;
  const Scalar _tmp866 =
      _tmp126 * (_priors_1_0_target_T_src[0] * _tmp833 - _tmp863 + _tmp864 + _tmp865);
  const Scalar _tmp867 = _tmp122 * _tmp123 * _tmp847 / (_tmp124 * std::sqrt(_tmp124));
  const Scalar _tmp868 = _tmp120 * _tmp867;
  const Scalar _tmp869 = _tmp846 * _tmp868;
  const Scalar _tmp870 = _tmp128 * _tmp867;
  const Scalar _tmp871 = _tmp846 * _tmp870;
  const Scalar _tmp872 = -_tmp93;
  const Scalar _tmp873 = std::pow(_views_1_pose[3], Scalar(2));
  const Scalar _tmp874 = _tmp872 + _tmp873;
  const Scalar _tmp875 = -_tmp76;
  const Scalar _tmp876 = _tmp73 + _tmp875;
  const Scalar _tmp877 = _tmp874 + _tmp876;
  const Scalar _tmp878 =
      -_tmp109 - _tmp111 + _tmp112 + _tmp877 * _views_0_pose[6] - _tmp877 * _views_1_pose[6];
  const Scalar _tmp879 = -_tmp98;
  const Scalar _tmp880 = _tmp107 + _tmp879;
  const Scalar _tmp881 = -_tmp87;
  const Scalar _tmp882 = _tmp88 + _tmp881;
  const Scalar _tmp883 = -_tmp873;
  const Scalar _tmp884 = _tmp883 + _tmp93;
  const Scalar _tmp885 = _tmp876 + _tmp884;
  const Scalar _tmp886 = _tmp880 * _views_0_pose[6] - _tmp880 * _views_1_pose[6] +
                         _tmp882 * _views_0_pose[4] - _tmp882 * _views_1_pose[4] +
                         _tmp885 * _views_0_pose[5] - _tmp885 * _views_1_pose[5];
  const Scalar _tmp887 =
      -_tmp846 * _tmp853 - _tmp850 * _tmp851 - _tmp850 * _tmp854 + _tmp851 * _tmp869 +
      _tmp854 * _tmp869 + _tmp858 * priors_1_0_sqrt_info(4, 2) +
      _tmp862 * priors_1_0_sqrt_info(4, 0) + _tmp866 * priors_1_0_sqrt_info(4, 1) +
      _tmp871 * priors_1_0_sqrt_info(4, 1) + _tmp878 * priors_1_0_sqrt_info(4, 4) +
      _tmp886 * priors_1_0_sqrt_info(4, 5);
  const Scalar _tmp888 = _tmp588 * _tmp882 + _tmp589 * _tmp885 + _tmp590 * _tmp880;
  const Scalar _tmp889 = (Scalar(1) / Scalar(2)) * _views_1_calibration[1];
  const Scalar _tmp890 =
      ((((_tmp35 + _tmp594) > 0) - ((_tmp35 + _tmp594) < 0)) + 1) / std::pow(_tmp595, Scalar(2));
  const Scalar _tmp891 = _tmp600 * _tmp890;
  const Scalar _tmp892 = _tmp889 * _tmp891;
  const Scalar _tmp893 = _tmp601 * (_tmp590 * _tmp877 + _tmp593) - _tmp888 * _tmp892;
  const Scalar _tmp894 = (Scalar(1) / Scalar(2)) * _tmp602;
  const Scalar _tmp895 = _tmp592 * _tmp890;
  const Scalar _tmp896 = _tmp888 * _tmp895;
  const Scalar _tmp897 = 2 * _tmp602;
  const Scalar _tmp898 = -_tmp598 * _tmp896 * _views_1_calibration[0] + _tmp893 * _tmp897;
  const Scalar _tmp899 = _tmp609 / (_tmp603 * std::sqrt(_tmp603));
  const Scalar _tmp900 = _tmp898 * _tmp899;
  const Scalar _tmp901 = _tmp185 - 1;
  const Scalar _tmp902 =
      _tmp178 * _tmp604 * _tmp605 * std::pow(_tmp606, _tmp901) * _tmp608 / _tmp607;
  const Scalar _tmp903 = _tmp894 * _tmp902;
  const Scalar _tmp904 = _tmp610 * _tmp893 - _tmp894 * _tmp900 + _tmp898 * _tmp903;
  const Scalar _tmp905 = _tmp498 * _tmp882 + _tmp499 * _tmp885 + _tmp500 * _tmp880;
  const Scalar _tmp906 =
      ((((_tmp35 + _tmp504) > 0) - ((_tmp35 + _tmp504) < 0)) + 1) / std::pow(_tmp505, Scalar(2));
  const Scalar _tmp907 = _tmp502 * _tmp906;
  const Scalar _tmp908 = _tmp510 * _tmp906;
  const Scalar _tmp909 = _tmp889 * _tmp908;
  const Scalar _tmp910 = _tmp511 * (_tmp500 * _tmp877 + _tmp503) - _tmp905 * _tmp909;
  const Scalar _tmp911 = 2 * _tmp512;
  const Scalar _tmp912 = -_tmp508 * _tmp905 * _tmp907 * _views_1_calibration[0] + _tmp910 * _tmp911;
  const Scalar _tmp913 = (Scalar(1) / Scalar(2)) * _tmp508;
  const Scalar _tmp914 = _tmp519 / (_tmp513 * std::sqrt(_tmp513));
  const Scalar _tmp915 = _tmp913 * _tmp914;
  const Scalar _tmp916 =
      _tmp178 * _tmp514 * std::pow(_tmp515, _tmp901) * _tmp517 * _tmp518 / _tmp516;
  const Scalar _tmp917 = _tmp913 * _tmp916;
  const Scalar _tmp918 = (Scalar(1) / Scalar(2)) * _views_1_calibration[0];
  const Scalar _tmp919 = _tmp502 * _tmp918;
  const Scalar _tmp920 = _tmp906 * _tmp919;
  const Scalar _tmp921 = -_tmp520 * _tmp905 * _tmp920 - _tmp912 * _tmp915 + _tmp912 * _tmp917;
  const Scalar _tmp922 = (Scalar(1) / Scalar(2)) * _tmp512;
  const Scalar _tmp923 = _tmp914 * _tmp922;
  const Scalar _tmp924 = _tmp916 * _tmp922;
  const Scalar _tmp925 = _tmp520 * _tmp910 - _tmp912 * _tmp923 + _tmp912 * _tmp924;
  const Scalar _tmp926 = _tmp558 * _tmp882 + _tmp559 * _tmp885 + _tmp560 * _tmp880;
  const Scalar _tmp927 =
      ((((_tmp35 + _tmp564) > 0) - ((_tmp35 + _tmp564) < 0)) + 1) / std::pow(_tmp565, Scalar(2));
  const Scalar _tmp928 = _tmp562 * _tmp927;
  const Scalar _tmp929 = _tmp570 * _tmp927;
  const Scalar _tmp930 = _tmp889 * _tmp929;
  const Scalar _tmp931 = _tmp571 * (_tmp560 * _tmp877 + _tmp563) - _tmp926 * _tmp930;
  const Scalar _tmp932 = 2 * _tmp572;
  const Scalar _tmp933 = -_tmp568 * _tmp926 * _tmp928 * _views_1_calibration[0] + _tmp931 * _tmp932;
  const Scalar _tmp934 = _tmp579 / (_tmp573 * std::sqrt(_tmp573));
  const Scalar _tmp935 = (Scalar(1) / Scalar(2)) * _tmp572;
  const Scalar _tmp936 = _tmp934 * _tmp935;
  const Scalar _tmp937 = Scalar(1.0) / (_tmp576);
  const Scalar _tmp938 = std::pow(_tmp575, _tmp901);
  const Scalar _tmp939 = _tmp178 * _tmp574 * _tmp577 * _tmp578 * _tmp937 * _tmp938;
  const Scalar _tmp940 = _tmp935 * _tmp939;
  const Scalar _tmp941 = _tmp580 * _tmp931 - _tmp933 * _tmp936 + _tmp933 * _tmp940;
  const Scalar _tmp942 = _tmp198 * _tmp882 + _tmp199 * _tmp885 + _tmp200 * _tmp880;
  const Scalar _tmp943 =
      ((((_tmp204 + _tmp35) > 0) - ((_tmp204 + _tmp35) < 0)) + 1) / std::pow(_tmp205, Scalar(2));
  const Scalar _tmp944 = _tmp202 * _tmp943;
  const Scalar _tmp945 = _tmp210 * _tmp943;
  const Scalar _tmp946 = _tmp889 * _tmp945;
  const Scalar _tmp947 = _tmp211 * (_tmp200 * _tmp877 + _tmp203) - _tmp942 * _tmp946;
  const Scalar _tmp948 = 2 * _tmp212;
  const Scalar _tmp949 = -_tmp208 * _tmp942 * _tmp944 * _views_1_calibration[0] + _tmp947 * _tmp948;
  const Scalar _tmp950 = (Scalar(1) / Scalar(2)) * _tmp212;
  const Scalar _tmp951 = _tmp219 / (_tmp213 * std::sqrt(_tmp213));
  const Scalar _tmp952 = _tmp950 * _tmp951;
  const Scalar _tmp953 =
      _tmp178 * _tmp214 * std::pow(_tmp215, _tmp901) * _tmp217 * _tmp218 / _tmp216;
  const Scalar _tmp954 = _tmp950 * _tmp953;
  const Scalar _tmp955 = _tmp220 * _tmp947 - _tmp949 * _tmp952 + _tmp949 * _tmp954;
  const Scalar _tmp956 = _tmp130 * priors_1_0_sqrt_info(0, 0);
  const Scalar _tmp957 = _tmp117 * _tmp850;
  const Scalar _tmp958 = _tmp846 * _tmp852;
  const Scalar _tmp959 = _tmp117 * _tmp869;
  const Scalar _tmp960 =
      -_tmp850 * _tmp956 + _tmp858 * priors_1_0_sqrt_info(0, 2) +
      _tmp862 * priors_1_0_sqrt_info(0, 0) + _tmp866 * priors_1_0_sqrt_info(0, 1) +
      _tmp869 * _tmp956 + _tmp871 * priors_1_0_sqrt_info(0, 1) +
      _tmp878 * priors_1_0_sqrt_info(0, 4) + _tmp886 * priors_1_0_sqrt_info(0, 5) -
      _tmp957 * priors_1_0_sqrt_info(0, 2) - _tmp958 * priors_1_0_sqrt_info(0, 1) +
      _tmp959 * priors_1_0_sqrt_info(0, 2);
  const Scalar _tmp961 = _tmp468 * _tmp882 + _tmp469 * _tmp880 + _tmp470 * _tmp885;
  const Scalar _tmp962 =
      ((((_tmp35 + _tmp474) > 0) - ((_tmp35 + _tmp474) < 0)) + 1) / std::pow(_tmp475, Scalar(2));
  const Scalar _tmp963 = _tmp472 * _tmp962;
  const Scalar _tmp964 = _tmp961 * _tmp963;
  const Scalar _tmp965 = _tmp480 * _views_1_calibration[1];
  const Scalar _tmp966 = (Scalar(1) / Scalar(2)) * _tmp962 * _tmp965;
  const Scalar _tmp967 = _tmp481 * (_tmp469 * _tmp877 + _tmp473) - _tmp961 * _tmp966;
  const Scalar _tmp968 = 2 * _tmp482;
  const Scalar _tmp969 = -_tmp478 * _tmp964 * _views_1_calibration[0] + _tmp967 * _tmp968;
  const Scalar _tmp970 = (Scalar(1) / Scalar(2)) * _tmp482;
  const Scalar _tmp971 =
      _tmp178 * _tmp484 * _tmp485 * std::pow(_tmp486, _tmp901) * _tmp488 / _tmp487;
  const Scalar _tmp972 = _tmp970 * _tmp971;
  const Scalar _tmp973 = _tmp489 / (_tmp483 * std::sqrt(_tmp483));
  const Scalar _tmp974 = _tmp970 * _tmp973;
  const Scalar _tmp975 = _tmp490 * _tmp967 + _tmp969 * _tmp972 - _tmp969 * _tmp974;
  const Scalar _tmp976 = _tmp130 * priors_1_0_sqrt_info(1, 0);
  const Scalar _tmp977 = _tmp117 * priors_1_0_sqrt_info(1, 2);
  const Scalar _tmp978 =
      -_tmp850 * _tmp976 - _tmp850 * _tmp977 + _tmp858 * priors_1_0_sqrt_info(1, 2) +
      _tmp862 * priors_1_0_sqrt_info(1, 0) + _tmp866 * priors_1_0_sqrt_info(1, 1) +
      _tmp869 * _tmp976 + _tmp869 * _tmp977 + _tmp871 * priors_1_0_sqrt_info(1, 1) +
      _tmp878 * priors_1_0_sqrt_info(1, 4) + _tmp886 * priors_1_0_sqrt_info(1, 5) -
      _tmp958 * priors_1_0_sqrt_info(1, 1);
  const Scalar _tmp979 = _tmp348 * _tmp882 + _tmp349 * _tmp885 + _tmp350 * _tmp880;
  const Scalar _tmp980 =
      ((((_tmp35 + _tmp354) > 0) - ((_tmp35 + _tmp354) < 0)) + 1) / std::pow(_tmp355, Scalar(2));
  const Scalar _tmp981 = _tmp360 * _tmp980;
  const Scalar _tmp982 = _tmp889 * _tmp981;
  const Scalar _tmp983 = _tmp361 * (_tmp350 * _tmp877 + _tmp353) - _tmp979 * _tmp982;
  const Scalar _tmp984 = 2 * _tmp362;
  const Scalar _tmp985 = _tmp352 * _tmp980;
  const Scalar _tmp986 = _tmp979 * _tmp985;
  const Scalar _tmp987 = -_tmp358 * _tmp986 * _views_1_calibration[0] + _tmp983 * _tmp984;
  const Scalar _tmp988 = _tmp369 / (_tmp363 * std::sqrt(_tmp363));
  const Scalar _tmp989 = _tmp987 * _tmp988;
  const Scalar _tmp990 = (Scalar(1) / Scalar(2)) * _tmp358;
  const Scalar _tmp991 =
      _tmp178 * _tmp364 * _tmp365 * _tmp366 * std::pow(_tmp367, _tmp901) / _tmp368;
  const Scalar _tmp992 = _tmp990 * _tmp991;
  const Scalar _tmp993 = -_tmp370 * _tmp918 * _tmp986 + _tmp987 * _tmp992 - _tmp989 * _tmp990;
  const Scalar _tmp994 = _tmp528 * _tmp882 + _tmp529 * _tmp880 + _tmp530 * _tmp885;
  const Scalar _tmp995 =
      ((((_tmp35 + _tmp534) > 0) - ((_tmp35 + _tmp534) < 0)) + 1) / std::pow(_tmp535, Scalar(2));
  const Scalar _tmp996 = _tmp532 * _tmp995;
  const Scalar _tmp997 = _tmp540 * _tmp995;
  const Scalar _tmp998 = _tmp889 * _tmp997;
  const Scalar _tmp999 = _tmp541 * (_tmp529 * _tmp877 + _tmp533) - _tmp994 * _tmp998;
  const Scalar _tmp1000 = 2 * _tmp542;
  const Scalar _tmp1001 =
      _tmp1000 * _tmp999 - _tmp538 * _tmp994 * _tmp996 * _views_1_calibration[0];
  const Scalar _tmp1002 = _tmp549 / (_tmp543 * std::sqrt(_tmp543));
  const Scalar _tmp1003 = (Scalar(1) / Scalar(2)) * _tmp1002;
  const Scalar _tmp1004 = _tmp1003 * _tmp538;
  const Scalar _tmp1005 = _tmp918 * _tmp996;
  const Scalar _tmp1006 = (Scalar(1) / Scalar(2)) * _tmp178;
  const Scalar _tmp1007 = _tmp544 * std::pow(_tmp545, _tmp901) * _tmp547 * _tmp548 / _tmp546;
  const Scalar _tmp1008 = _tmp1006 * _tmp1007;
  const Scalar _tmp1009 = _tmp1008 * _tmp538;
  const Scalar _tmp1010 = -_tmp1001 * _tmp1004 + _tmp1001 * _tmp1009 - _tmp1005 * _tmp550 * _tmp994;
  const Scalar _tmp1011 = _tmp258 * _tmp882 + _tmp259 * _tmp885 + _tmp260 * _tmp880;
  const Scalar _tmp1012 =
      ((((_tmp264 + _tmp35) > 0) - ((_tmp264 + _tmp35) < 0)) + 1) / std::pow(_tmp265, Scalar(2));
  const Scalar _tmp1013 = _tmp1012 * _tmp262;
  const Scalar _tmp1014 = _tmp1012 * _tmp270;
  const Scalar _tmp1015 = _tmp1014 * _tmp889;
  const Scalar _tmp1016 = -_tmp1011 * _tmp1015 + _tmp271 * (_tmp260 * _tmp877 + _tmp263);
  const Scalar _tmp1017 = 2 * _tmp272;
  const Scalar _tmp1018 =
      -_tmp1011 * _tmp1013 * _tmp268 * _views_1_calibration[0] + _tmp1016 * _tmp1017;
  const Scalar _tmp1019 = (Scalar(1) / Scalar(2)) * _tmp268;
  const Scalar _tmp1020 =
      _tmp178 * _tmp274 * _tmp275 * std::pow(_tmp276, _tmp901) * _tmp278 / _tmp277;
  const Scalar _tmp1021 = _tmp1019 * _tmp1020;
  const Scalar _tmp1022 = _tmp1013 * _tmp918;
  const Scalar _tmp1023 = _tmp279 / (_tmp273 * std::sqrt(_tmp273));
  const Scalar _tmp1024 = _tmp1019 * _tmp1023;
  const Scalar _tmp1025 =
      -_tmp1011 * _tmp1022 * _tmp280 + _tmp1018 * _tmp1021 - _tmp1018 * _tmp1024;
  const Scalar _tmp1026 =
      ((((_tmp324 + _tmp35) > 0) - ((_tmp324 + _tmp35) < 0)) + 1) / std::pow(_tmp325, Scalar(2));
  const Scalar _tmp1027 = _tmp1026 * (_tmp318 * _tmp882 + _tmp319 * _tmp885 + _tmp320 * _tmp880);
  const Scalar _tmp1028 = _tmp330 * _tmp889;
  const Scalar _tmp1029 = -_tmp1027 * _tmp1028 + _tmp331 * (_tmp320 * _tmp877 + _tmp323);
  const Scalar _tmp1030 = 2 * _tmp332;
  const Scalar _tmp1031 = _tmp322 * _views_1_calibration[0];
  const Scalar _tmp1032 = _tmp1027 * _tmp1031;
  const Scalar _tmp1033 = _tmp1029 * _tmp1030 - _tmp1032 * _tmp328;
  const Scalar _tmp1034 = (Scalar(1) / Scalar(2)) * _tmp328;
  const Scalar _tmp1035 = _tmp339 / (_tmp333 * std::sqrt(_tmp333));
  const Scalar _tmp1036 = _tmp1034 * _tmp1035;
  const Scalar _tmp1037 =
      _tmp178 * _tmp334 * _tmp335 * _tmp336 * std::pow(_tmp337, _tmp901) / _tmp338;
  const Scalar _tmp1038 = _tmp1034 * _tmp1037;
  const Scalar _tmp1039 =
      -Scalar(1) / Scalar(2) * _tmp1032 * _tmp340 - _tmp1033 * _tmp1036 + _tmp1033 * _tmp1038;
  const Scalar _tmp1040 =
      ((((_tmp35 + _tmp684) > 0) - ((_tmp35 + _tmp684) < 0)) + 1) / std::pow(_tmp685, Scalar(2));
  const Scalar _tmp1041 = _tmp1040 * (_tmp678 * _tmp882 + _tmp679 * _tmp885 + _tmp680 * _tmp880);
  const Scalar _tmp1042 = -_tmp1041 * _tmp690 * _tmp889 + _tmp691 * (_tmp680 * _tmp877 + _tmp683);
  const Scalar _tmp1043 = 2 * _tmp692;
  const Scalar _tmp1044 = _tmp1041 * _tmp682;
  const Scalar _tmp1045 = _tmp1042 * _tmp1043 - _tmp1044 * _tmp688 * _views_1_calibration[0];
  const Scalar _tmp1046 = (Scalar(1) / Scalar(2)) * _tmp688;
  const Scalar _tmp1047 =
      _tmp178 * _tmp694 * _tmp695 * _tmp696 * std::pow(_tmp697, _tmp901) / _tmp698;
  const Scalar _tmp1048 = _tmp1046 * _tmp1047;
  const Scalar _tmp1049 = _tmp699 / (_tmp693 * std::sqrt(_tmp693));
  const Scalar _tmp1050 = _tmp1046 * _tmp1049;
  const Scalar _tmp1051 = -_tmp1044 * _tmp700 * _tmp918 + _tmp1045 * _tmp1048 - _tmp1045 * _tmp1050;
  const Scalar _tmp1052 = _priors_0_1_target_T_src[2] * _tmp838;
  const Scalar _tmp1053 = -_tmp840 + _tmp841 + _tmp842 - _tmp843;
  const Scalar _tmp1054 = _tmp823 + _tmp824 + _tmp825 + _tmp826;
  const Scalar _tmp1055 = _priors_0_1_target_T_src[1] * _tmp1054;
  const Scalar _tmp1056 = _tmp829 + _tmp830 - _tmp831 - _tmp832;
  const Scalar _tmp1057 = _priors_0_1_target_T_src[3] * _tmp1056 + _tmp1055;
  const Scalar _tmp1058 = _tmp55 * (-_priors_0_1_target_T_src[0] * _tmp1053 - _tmp1052 + _tmp1057);
  const Scalar _tmp1059 = -_priors_0_1_target_T_src[1] * _tmp1056;
  const Scalar _tmp1060 = _priors_0_1_target_T_src[3] * _tmp1054;
  const Scalar _tmp1061 = -_priors_0_1_target_T_src[0] * _tmp838 + _tmp1060;
  const Scalar _tmp1062 = _priors_0_1_target_T_src[2] * _tmp1053 + _tmp1059 + _tmp1061;
  const Scalar _tmp1063 = _tmp1062 * _tmp55;
  const Scalar _tmp1064 = _priors_0_1_target_T_src[2] * _tmp1054;
  const Scalar _tmp1065 = _priors_0_1_target_T_src[0] * _tmp1056;
  const Scalar _tmp1066 = _priors_0_1_target_T_src[1] * _tmp838;
  const Scalar _tmp1067 = _priors_0_1_target_T_src[3] * _tmp1053 - _tmp1064 + _tmp1065 - _tmp1066;
  const Scalar _tmp1068 = _tmp1067 * _tmp55;
  const Scalar _tmp1069 = _priors_0_1_target_T_src[2] * _tmp1056;
  const Scalar _tmp1070 = _priors_0_1_target_T_src[0] * _tmp1054;
  const Scalar _tmp1071 = _priors_0_1_target_T_src[3] * _tmp838 + _tmp1070;
  const Scalar _tmp1072 = _priors_0_1_target_T_src[1] * _tmp1053 + _tmp1069 + _tmp1071;
  const Scalar _tmp1073 = _tmp39 * ((((-_tmp34 + _tmp36) > 0) - ((-_tmp34 + _tmp36) < 0)) + 1);
  const Scalar _tmp1074 = _tmp1073 * _tmp37 / (_tmp43 * std::sqrt(_tmp43));
  const Scalar _tmp1075 = _tmp1074 * _tmp54;
  const Scalar _tmp1076 = _tmp1072 * _tmp1075;
  const Scalar _tmp1077 = _tmp1076 * _tmp32;
  const Scalar _tmp1078 = _tmp1073 / _tmp43;
  const Scalar _tmp1079 = _tmp1078 * _tmp40;
  const Scalar _tmp1080 = _tmp1072 * _tmp1079;
  const Scalar _tmp1081 = _tmp1080 * _tmp53;
  const Scalar _tmp1082 = _tmp1080 * _tmp57;
  const Scalar _tmp1083 = _tmp1080 * _tmp32;
  const Scalar _tmp1084 = _tmp53 * priors_0_1_sqrt_info(4, 0);
  const Scalar _tmp1085 = _tmp1075 * _tmp57;
  const Scalar _tmp1086 = _tmp1085 * priors_0_1_sqrt_info(4, 2);
  const Scalar _tmp1087 =
      _tmp1058 * priors_0_1_sqrt_info(4, 2) + _tmp1063 * priors_0_1_sqrt_info(4, 0) +
      _tmp1068 * priors_0_1_sqrt_info(4, 1) + _tmp1072 * _tmp1086 + _tmp1076 * _tmp1084 +
      _tmp1077 * priors_0_1_sqrt_info(4, 1) - _tmp1081 * priors_0_1_sqrt_info(4, 0) -
      _tmp1082 * priors_0_1_sqrt_info(4, 2) - _tmp1083 * priors_0_1_sqrt_info(4, 1);
  const Scalar _tmp1088 = _tmp738 * _tmp882 + _tmp739 * _tmp880 + _tmp740 * _tmp885;
  const Scalar _tmp1089 =
      ((((_tmp35 + _tmp744) > 0) - ((_tmp35 + _tmp744) < 0)) + 1) / std::pow(_tmp745, Scalar(2));
  const Scalar _tmp1090 = _tmp1089 * _tmp750;
  const Scalar _tmp1091 = _tmp1090 * _tmp889;
  const Scalar _tmp1092 = -_tmp1088 * _tmp1091 + _tmp751 * (_tmp739 * _tmp877 + _tmp743);
  const Scalar _tmp1093 = 2 * _tmp752;
  const Scalar _tmp1094 = _tmp1089 * _tmp742;
  const Scalar _tmp1095 = _tmp1088 * _tmp1094;
  const Scalar _tmp1096 = _tmp1092 * _tmp1093 - _tmp1095 * _tmp748 * _views_1_calibration[0];
  const Scalar _tmp1097 = _tmp759 / (_tmp753 * std::sqrt(_tmp753));
  const Scalar _tmp1098 = (Scalar(1) / Scalar(2)) * _tmp752;
  const Scalar _tmp1099 = _tmp1097 * _tmp1098;
  const Scalar _tmp1100 =
      _tmp178 * _tmp754 * _tmp755 * _tmp756 * std::pow(_tmp757, _tmp901) / _tmp758;
  const Scalar _tmp1101 = _tmp1098 * _tmp1100;
  const Scalar _tmp1102 = _tmp1092 * _tmp760 - _tmp1096 * _tmp1099 + _tmp1096 * _tmp1101;
  const Scalar _tmp1103 = _tmp154 * _tmp882 + _tmp158 * _tmp885 + _tmp162 * _tmp880;
  const Scalar _tmp1104 =
      ((((_tmp166 + _tmp35) > 0) - ((_tmp166 + _tmp35) < 0)) + 1) / std::pow(_tmp167, Scalar(2));
  const Scalar _tmp1105 = _tmp1104 * _tmp172;
  const Scalar _tmp1106 = _tmp1105 * _tmp889;
  const Scalar _tmp1107 = -_tmp1103 * _tmp1106 + _tmp173 * (_tmp162 * _tmp877 + _tmp165);
  const Scalar _tmp1108 = _tmp1104 * _tmp164;
  const Scalar _tmp1109 = 2 * _tmp174;
  const Scalar _tmp1110 =
      -_tmp1103 * _tmp1108 * _tmp170 * _views_1_calibration[0] + _tmp1107 * _tmp1109;
  const Scalar _tmp1111 = (Scalar(1) / Scalar(2)) * _tmp174;
  const Scalar _tmp1112 =
      _tmp176 * _tmp177 * _tmp178 * std::pow(_tmp182, _tmp901) * _tmp188 / _tmp187;
  const Scalar _tmp1113 = _tmp1111 * _tmp1112;
  const Scalar _tmp1114 = _tmp189 / (_tmp175 * std::sqrt(_tmp175));
  const Scalar _tmp1115 = _tmp1111 * _tmp1114;
  const Scalar _tmp1116 = _tmp1107 * _tmp190 + _tmp1110 * _tmp1113 - _tmp1110 * _tmp1115;
  const Scalar _tmp1117 = _tmp378 * _tmp882 + _tmp379 * _tmp885 + _tmp380 * _tmp880;
  const Scalar _tmp1118 =
      ((((_tmp35 + _tmp384) > 0) - ((_tmp35 + _tmp384) < 0)) + 1) / std::pow(_tmp385, Scalar(2));
  const Scalar _tmp1119 = _tmp1118 * _tmp390;
  const Scalar _tmp1120 = _tmp1119 * _tmp889;
  const Scalar _tmp1121 = -_tmp1117 * _tmp1120 + _tmp391 * (_tmp380 * _tmp877 + _tmp383);
  const Scalar _tmp1122 = 2 * _tmp392;
  const Scalar _tmp1123 = _tmp1118 * _tmp382;
  const Scalar _tmp1124 = _tmp1117 * _tmp1123;
  const Scalar _tmp1125 = _tmp1121 * _tmp1122 - _tmp1124 * _tmp388 * _views_1_calibration[0];
  const Scalar _tmp1126 = (Scalar(1) / Scalar(2)) * _tmp392;
  const Scalar _tmp1127 =
      _tmp178 * _tmp394 * _tmp395 * _tmp396 * std::pow(_tmp397, _tmp901) / _tmp398;
  const Scalar _tmp1128 = _tmp1126 * _tmp1127;
  const Scalar _tmp1129 = _tmp399 / (_tmp393 * std::sqrt(_tmp393));
  const Scalar _tmp1130 = _tmp1126 * _tmp1129;
  const Scalar _tmp1131 = _tmp1121 * _tmp400 + _tmp1125 * _tmp1128 - _tmp1125 * _tmp1130;
  const Scalar _tmp1132 = _tmp708 * _tmp882 + _tmp709 * _tmp880 + _tmp710 * _tmp885;
  const Scalar _tmp1133 =
      ((((_tmp35 + _tmp714) > 0) - ((_tmp35 + _tmp714) < 0)) + 1) / std::pow(_tmp715, Scalar(2));
  const Scalar _tmp1134 = _tmp1133 * _tmp720;
  const Scalar _tmp1135 = _tmp1134 * _tmp889;
  const Scalar _tmp1136 = -_tmp1132 * _tmp1135 + _tmp721 * (_tmp709 * _tmp877 + _tmp713);
  const Scalar _tmp1137 = 2 * _tmp722;
  const Scalar _tmp1138 = _tmp1133 * _tmp712;
  const Scalar _tmp1139 = _tmp1132 * _tmp1138;
  const Scalar _tmp1140 = _tmp1136 * _tmp1137 - _tmp1139 * _tmp718 * _views_1_calibration[0];
  const Scalar _tmp1141 = (Scalar(1) / Scalar(2)) * _tmp722;
  const Scalar _tmp1142 = _tmp729 / (_tmp723 * std::sqrt(_tmp723));
  const Scalar _tmp1143 = _tmp1141 * _tmp1142;
  const Scalar _tmp1144 =
      _tmp178 * _tmp724 * _tmp725 * _tmp726 * std::pow(_tmp727, _tmp901) / _tmp728;
  const Scalar _tmp1145 = _tmp1141 * _tmp1144;
  const Scalar _tmp1146 = _tmp1136 * _tmp730 - _tmp1140 * _tmp1143 + _tmp1140 * _tmp1145;
  const Scalar _tmp1147 = _tmp228 * _tmp882 + _tmp229 * _tmp880 + _tmp230 * _tmp885;
  const Scalar _tmp1148 =
      ((((_tmp234 + _tmp35) > 0) - ((_tmp234 + _tmp35) < 0)) + 1) / std::pow(_tmp235, Scalar(2));
  const Scalar _tmp1149 = _tmp232 * _tmp918;
  const Scalar _tmp1150 = _tmp1148 * _tmp1149;
  const Scalar _tmp1151 = _tmp1148 * _tmp240;
  const Scalar _tmp1152 = _tmp1151 * _tmp889;
  const Scalar _tmp1153 = -_tmp1147 * _tmp1152 + _tmp241 * (_tmp229 * _tmp877 + _tmp233);
  const Scalar _tmp1154 = 2 * _tmp242;
  const Scalar _tmp1155 =
      -_tmp1147 * _tmp1148 * _tmp232 * _tmp238 * _views_1_calibration[0] + _tmp1153 * _tmp1154;
  const Scalar _tmp1156 = _tmp244 * _tmp245 * _tmp246 * std::pow(_tmp247, _tmp901) / _tmp248;
  const Scalar _tmp1157 = _tmp1006 * _tmp1156;
  const Scalar _tmp1158 = _tmp1157 * _tmp238;
  const Scalar _tmp1159 = _tmp249 / (_tmp243 * std::sqrt(_tmp243));
  const Scalar _tmp1160 = (Scalar(1) / Scalar(2)) * _tmp1159;
  const Scalar _tmp1161 = _tmp1160 * _tmp238;
  const Scalar _tmp1162 =
      -_tmp1147 * _tmp1150 * _tmp250 + _tmp1155 * _tmp1158 - _tmp1155 * _tmp1161;
  const Scalar _tmp1163 = _tmp130 * priors_1_0_sqrt_info(2, 0);
  const Scalar _tmp1164 = _tmp134 * _tmp867;
  const Scalar _tmp1165 = _tmp134 * _tmp848;
  const Scalar _tmp1166 =
      -_tmp1163 * _tmp850 + _tmp1163 * _tmp869 + _tmp1164 * _tmp846 - _tmp1165 * _tmp846 +
      _tmp858 * priors_1_0_sqrt_info(2, 2) + _tmp862 * priors_1_0_sqrt_info(2, 0) +
      _tmp866 * priors_1_0_sqrt_info(2, 1) + _tmp878 * priors_1_0_sqrt_info(2, 4) +
      _tmp886 * priors_1_0_sqrt_info(2, 5) - _tmp957 * priors_1_0_sqrt_info(2, 2) +
      _tmp959 * priors_1_0_sqrt_info(2, 2);
  const Scalar _tmp1167 = (Scalar(1) / Scalar(2)) * _tmp718;
  const Scalar _tmp1168 = _tmp1144 * _tmp1167;
  const Scalar _tmp1169 = _tmp1142 * _tmp1167;
  const Scalar _tmp1170 = -_tmp1139 * _tmp730 * _tmp918 + _tmp1140 * _tmp1168 - _tmp1140 * _tmp1169;
  const Scalar _tmp1171 = _tmp130 * priors_1_0_sqrt_info(3, 0);
  const Scalar _tmp1172 =
      -_tmp1171 * _tmp850 + _tmp1171 * _tmp869 + _tmp858 * priors_1_0_sqrt_info(3, 2) +
      _tmp862 * priors_1_0_sqrt_info(3, 0) + _tmp866 * priors_1_0_sqrt_info(3, 1) +
      _tmp871 * priors_1_0_sqrt_info(3, 1) + _tmp878 * priors_1_0_sqrt_info(3, 4) +
      _tmp886 * priors_1_0_sqrt_info(3, 5) - _tmp957 * priors_1_0_sqrt_info(3, 2) -
      _tmp958 * priors_1_0_sqrt_info(3, 1) + _tmp959 * priors_1_0_sqrt_info(3, 2);
  const Scalar _tmp1173 = _tmp1085 * priors_0_1_sqrt_info(0, 2);
  const Scalar _tmp1174 = _tmp1078 * _tmp41;
  const Scalar _tmp1175 = _tmp1174 * _tmp32;
  const Scalar _tmp1176 = _tmp1074 * _tmp32;
  const Scalar _tmp1177 = _tmp1072 * _tmp1176;
  const Scalar _tmp1178 = _tmp53 * priors_0_1_sqrt_info(0, 0);
  const Scalar _tmp1179 = _tmp1058 * priors_0_1_sqrt_info(0, 2) +
                          _tmp1063 * priors_0_1_sqrt_info(0, 0) + _tmp1067 * _tmp45 +
                          _tmp1072 * _tmp1173 - _tmp1072 * _tmp1175 + _tmp1076 * _tmp1178 -
                          _tmp1081 * priors_0_1_sqrt_info(0, 0) -
                          _tmp1082 * priors_0_1_sqrt_info(0, 2) + _tmp1177 * _tmp42;
  const Scalar _tmp1180 = _tmp57 * priors_0_1_sqrt_info(3, 2);
  const Scalar _tmp1181 = _tmp53 * priors_0_1_sqrt_info(3, 0);
  const Scalar _tmp1182 = _tmp1058 * priors_0_1_sqrt_info(3, 2) + _tmp1062 * _tmp69 +
                          _tmp1068 * priors_0_1_sqrt_info(3, 1) + _tmp1076 * _tmp1180 +
                          _tmp1076 * _tmp1181 + _tmp1077 * priors_0_1_sqrt_info(3, 1) -
                          _tmp1080 * _tmp1180 - _tmp1081 * priors_0_1_sqrt_info(3, 0) -
                          _tmp1083 * priors_0_1_sqrt_info(3, 1);
  const Scalar _tmp1183 = (Scalar(1) / Scalar(2)) * _tmp748;
  const Scalar _tmp1184 = _tmp1100 * _tmp1183;
  const Scalar _tmp1185 = _tmp1097 * _tmp1183;
  const Scalar _tmp1186 = -_tmp1095 * _tmp760 * _tmp918 + _tmp1096 * _tmp1184 - _tmp1096 * _tmp1185;
  const Scalar _tmp1187 = _tmp288 * _tmp882 + _tmp289 * _tmp880 + _tmp290 * _tmp885;
  const Scalar _tmp1188 =
      ((((_tmp294 + _tmp35) > 0) - ((_tmp294 + _tmp35) < 0)) + 1) / std::pow(_tmp295, Scalar(2));
  const Scalar _tmp1189 = _tmp1187 * _tmp1188;
  const Scalar _tmp1190 = _tmp300 * _tmp889;
  const Scalar _tmp1191 = -_tmp1189 * _tmp1190 + _tmp301 * (_tmp289 * _tmp877 + _tmp293);
  const Scalar _tmp1192 = 2 * _tmp302;
  const Scalar _tmp1193 =
      -_tmp1189 * _tmp292 * _tmp298 * _views_1_calibration[0] + _tmp1191 * _tmp1192;
  const Scalar _tmp1194 = (Scalar(1) / Scalar(2)) * _tmp302;
  const Scalar _tmp1195 = _tmp309 / (_tmp303 * std::sqrt(_tmp303));
  const Scalar _tmp1196 = _tmp1194 * _tmp1195;
  const Scalar _tmp1197 =
      _tmp178 * _tmp304 * _tmp305 * _tmp306 * std::pow(_tmp307, _tmp901) / _tmp308;
  const Scalar _tmp1198 = _tmp1194 * _tmp1197;
  const Scalar _tmp1199 = _tmp1191 * _tmp310 - _tmp1193 * _tmp1196 + _tmp1193 * _tmp1198;
  const Scalar _tmp1200 = _tmp53 * priors_0_1_sqrt_info(5, 0);
  const Scalar _tmp1201 = _tmp1085 * priors_0_1_sqrt_info(5, 2);
  const Scalar _tmp1202 =
      _tmp1058 * priors_0_1_sqrt_info(5, 2) + _tmp1063 * priors_0_1_sqrt_info(5, 0) +
      _tmp1068 * priors_0_1_sqrt_info(5, 1) + _tmp1072 * _tmp1201 + _tmp1076 * _tmp1200 +
      _tmp1077 * priors_0_1_sqrt_info(5, 1) - _tmp1081 * priors_0_1_sqrt_info(5, 0) -
      _tmp1082 * priors_0_1_sqrt_info(5, 2) - _tmp1083 * priors_0_1_sqrt_info(5, 1);
  const Scalar _tmp1203 = _tmp618 * _tmp882 + _tmp619 * _tmp880 + _tmp620 * _tmp885;
  const Scalar _tmp1204 =
      ((((_tmp35 + _tmp624) > 0) - ((_tmp35 + _tmp624) < 0)) + 1) / std::pow(_tmp625, Scalar(2));
  const Scalar _tmp1205 = _tmp1204 * _tmp622;
  const Scalar _tmp1206 = _tmp1204 * _tmp630;
  const Scalar _tmp1207 = _tmp1206 * _tmp889;
  const Scalar _tmp1208 = -_tmp1203 * _tmp1207 + _tmp631 * (_tmp619 * _tmp877 + _tmp623);
  const Scalar _tmp1209 = 2 * _tmp632;
  const Scalar _tmp1210 =
      -_tmp1203 * _tmp1205 * _tmp628 * _views_1_calibration[0] + _tmp1208 * _tmp1209;
  const Scalar _tmp1211 = _tmp639 / (_tmp633 * std::sqrt(_tmp633));
  const Scalar _tmp1212 = (Scalar(1) / Scalar(2)) * _tmp628;
  const Scalar _tmp1213 = _tmp1211 * _tmp1212;
  const Scalar _tmp1214 = _tmp1205 * _tmp918;
  const Scalar _tmp1215 =
      _tmp178 * _tmp634 * std::pow(_tmp635, _tmp901) * _tmp637 * _tmp638 / _tmp636;
  const Scalar _tmp1216 = _tmp1212 * _tmp1215;
  const Scalar _tmp1217 =
      -_tmp1203 * _tmp1214 * _tmp640 - _tmp1210 * _tmp1213 + _tmp1210 * _tmp1216;
  const Scalar _tmp1218 = (Scalar(1) / Scalar(2)) * _tmp388;
  const Scalar _tmp1219 = _tmp1127 * _tmp1218;
  const Scalar _tmp1220 = _tmp1129 * _tmp1218;
  const Scalar _tmp1221 = -_tmp1124 * _tmp400 * _tmp918 + _tmp1125 * _tmp1219 - _tmp1125 * _tmp1220;
  const Scalar _tmp1222 = _tmp408 * _tmp882 + _tmp409 * _tmp885 + _tmp410 * _tmp880;
  const Scalar _tmp1223 =
      ((((_tmp35 + _tmp414) > 0) - ((_tmp35 + _tmp414) < 0)) + 1) / std::pow(_tmp415, Scalar(2));
  const Scalar _tmp1224 = _tmp1223 * _tmp412;
  const Scalar _tmp1225 = _tmp1222 * _tmp1224;
  const Scalar _tmp1226 = _tmp1223 * _tmp420;
  const Scalar _tmp1227 = _tmp1226 * _tmp889;
  const Scalar _tmp1228 = -_tmp1222 * _tmp1227 + _tmp421 * (_tmp410 * _tmp877 + _tmp413);
  const Scalar _tmp1229 = 2 * _tmp422;
  const Scalar _tmp1230 = -_tmp1225 * _tmp418 * _views_1_calibration[0] + _tmp1228 * _tmp1229;
  const Scalar _tmp1231 = (Scalar(1) / Scalar(2)) * _tmp422;
  const Scalar _tmp1232 =
      _tmp178 * _tmp424 * _tmp425 * std::pow(_tmp426, _tmp901) * _tmp428 / _tmp427;
  const Scalar _tmp1233 = _tmp1231 * _tmp1232;
  const Scalar _tmp1234 = _tmp429 / (_tmp423 * std::sqrt(_tmp423));
  const Scalar _tmp1235 = _tmp1230 * _tmp1234;
  const Scalar _tmp1236 = _tmp1228 * _tmp430 + _tmp1230 * _tmp1233 - _tmp1231 * _tmp1235;
  const Scalar _tmp1237 = _tmp1108 * _tmp918;
  const Scalar _tmp1238 = (Scalar(1) / Scalar(2)) * _tmp170;
  const Scalar _tmp1239 = _tmp1114 * _tmp1238;
  const Scalar _tmp1240 = _tmp1112 * _tmp1238;
  const Scalar _tmp1241 =
      -_tmp1103 * _tmp1237 * _tmp190 - _tmp1110 * _tmp1239 + _tmp1110 * _tmp1240;
  const Scalar _tmp1242 = (Scalar(1) / Scalar(2)) * _tmp692;
  const Scalar _tmp1243 = _tmp1049 * _tmp1242;
  const Scalar _tmp1244 = _tmp1047 * _tmp1242;
  const Scalar _tmp1245 = _tmp1042 * _tmp700 - _tmp1045 * _tmp1243 + _tmp1045 * _tmp1244;
  const Scalar _tmp1246 = _tmp918 * _tmp928;
  const Scalar _tmp1247 = _tmp568 * _tmp934;
  const Scalar _tmp1248 = (Scalar(1) / Scalar(2)) * _tmp1247;
  const Scalar _tmp1249 = _tmp568 * _tmp574 * _tmp577 * _tmp578 * _tmp937 * _tmp938;
  const Scalar _tmp1250 = _tmp1006 * _tmp1249;
  const Scalar _tmp1251 = -_tmp1246 * _tmp580 * _tmp926 - _tmp1248 * _tmp933 + _tmp1250 * _tmp933;
  const Scalar _tmp1252 = (Scalar(1) / Scalar(2)) * _tmp598;
  const Scalar _tmp1253 = _tmp1252 * _tmp902;
  const Scalar _tmp1254 = -_tmp1252 * _tmp900 + _tmp1253 * _tmp898 - _tmp610 * _tmp896 * _tmp918;
  const Scalar _tmp1255 = (Scalar(1) / Scalar(2)) * _tmp362;
  const Scalar _tmp1256 = _tmp1255 * _tmp991;
  const Scalar _tmp1257 = -_tmp1255 * _tmp989 + _tmp1256 * _tmp987 + _tmp370 * _tmp983;
  const Scalar _tmp1258 = _tmp1003 * _tmp542;
  const Scalar _tmp1259 = _tmp1008 * _tmp542;
  const Scalar _tmp1260 = -_tmp1001 * _tmp1258 + _tmp1001 * _tmp1259 + _tmp550 * _tmp999;
  const Scalar _tmp1261 = _tmp57 * priors_0_1_sqrt_info(2, 2);
  const Scalar _tmp1262 = _tmp53 * priors_0_1_sqrt_info(2, 0);
  const Scalar _tmp1263 =
      _tmp1058 * priors_0_1_sqrt_info(2, 2) + _tmp1063 * priors_0_1_sqrt_info(2, 0) +
      _tmp1068 * priors_0_1_sqrt_info(2, 1) + _tmp1076 * _tmp1261 + _tmp1076 * _tmp1262 +
      _tmp1077 * priors_0_1_sqrt_info(2, 1) - _tmp1080 * _tmp1261 -
      _tmp1081 * priors_0_1_sqrt_info(2, 0) - _tmp1083 * priors_0_1_sqrt_info(2, 1);
  const Scalar _tmp1264 = _tmp130 * priors_1_0_sqrt_info(5, 0);
  const Scalar _tmp1265 =
      -_tmp1264 * _tmp850 + _tmp1264 * _tmp869 + _tmp858 * priors_1_0_sqrt_info(5, 2) +
      _tmp862 * priors_1_0_sqrt_info(5, 0) + _tmp866 * priors_1_0_sqrt_info(5, 1) +
      _tmp871 * priors_1_0_sqrt_info(5, 1) + _tmp878 * priors_1_0_sqrt_info(5, 4) +
      _tmp886 * priors_1_0_sqrt_info(5, 5) - _tmp957 * priors_1_0_sqrt_info(5, 2) -
      _tmp958 * priors_1_0_sqrt_info(5, 1) + _tmp959 * priors_1_0_sqrt_info(5, 2);
  const Scalar _tmp1266 = (Scalar(1) / Scalar(2)) * _tmp418;
  const Scalar _tmp1267 = _tmp1232 * _tmp1266;
  const Scalar _tmp1268 = -_tmp1225 * _tmp430 * _tmp918 + _tmp1230 * _tmp1267 - _tmp1235 * _tmp1266;
  const Scalar _tmp1269 = (Scalar(1) / Scalar(2)) * _tmp272;
  const Scalar _tmp1270 = _tmp1023 * _tmp1269;
  const Scalar _tmp1271 = _tmp1020 * _tmp1269;
  const Scalar _tmp1272 = _tmp1016 * _tmp280 - _tmp1018 * _tmp1270 + _tmp1018 * _tmp1271;
  const Scalar _tmp1273 = _tmp1157 * _tmp242;
  const Scalar _tmp1274 = _tmp1160 * _tmp242;
  const Scalar _tmp1275 = _tmp1153 * _tmp250 + _tmp1155 * _tmp1273 - _tmp1155 * _tmp1274;
  const Scalar _tmp1276 = (Scalar(1) / Scalar(2)) * _tmp332;
  const Scalar _tmp1277 = _tmp1037 * _tmp1276;
  const Scalar _tmp1278 = _tmp1035 * _tmp1276;
  const Scalar _tmp1279 = _tmp1029 * _tmp340 + _tmp1033 * _tmp1277 - _tmp1033 * _tmp1278;
  const Scalar _tmp1280 = _tmp292 * _tmp918;
  const Scalar _tmp1281 = _tmp1188 * _tmp1280;
  const Scalar _tmp1282 = (Scalar(1) / Scalar(2)) * _tmp298;
  const Scalar _tmp1283 = _tmp1197 * _tmp1282;
  const Scalar _tmp1284 = _tmp1195 * _tmp1282;
  const Scalar _tmp1285 =
      -_tmp1187 * _tmp1281 * _tmp310 + _tmp1193 * _tmp1283 - _tmp1193 * _tmp1284;
  const Scalar _tmp1286 =
      ((((_tmp35 + _tmp444) > 0) - ((_tmp35 + _tmp444) < 0)) + 1) / std::pow(_tmp445, Scalar(2));
  const Scalar _tmp1287 = _tmp1286 * (_tmp438 * _tmp882 + _tmp439 * _tmp885 + _tmp440 * _tmp880);
  const Scalar _tmp1288 = _tmp1287 * _tmp442;
  const Scalar _tmp1289 = _tmp450 * _tmp889;
  const Scalar _tmp1290 = -_tmp1287 * _tmp1289 + _tmp451 * (_tmp440 * _tmp877 + _tmp443);
  const Scalar _tmp1291 = 2 * _tmp452;
  const Scalar _tmp1292 = -_tmp1288 * _tmp448 * _views_1_calibration[0] + _tmp1290 * _tmp1291;
  const Scalar _tmp1293 = (Scalar(1) / Scalar(2)) * _tmp452;
  const Scalar _tmp1294 =
      _tmp178 * _tmp454 * _tmp455 * _tmp456 * std::pow(_tmp457, _tmp901) / _tmp458;
  const Scalar _tmp1295 = _tmp1293 * _tmp1294;
  const Scalar _tmp1296 = _tmp459 / (_tmp453 * std::sqrt(_tmp453));
  const Scalar _tmp1297 = _tmp1293 * _tmp1296;
  const Scalar _tmp1298 = _tmp1290 * _tmp460 + _tmp1292 * _tmp1295 - _tmp1292 * _tmp1297;
  const Scalar _tmp1299 = (Scalar(1) / Scalar(2)) * _tmp632;
  const Scalar _tmp1300 = _tmp1215 * _tmp1299;
  const Scalar _tmp1301 = _tmp1211 * _tmp1299;
  const Scalar _tmp1302 = _tmp1208 * _tmp640 + _tmp1210 * _tmp1300 - _tmp1210 * _tmp1301;
  const Scalar _tmp1303 = _tmp1085 * priors_0_1_sqrt_info(1, 2);
  const Scalar _tmp1304 = _tmp53 * priors_0_1_sqrt_info(1, 0);
  const Scalar _tmp1305 = _tmp1058 * priors_0_1_sqrt_info(1, 2) +
                          _tmp1063 * priors_0_1_sqrt_info(1, 0) + _tmp1067 * _tmp65 +
                          _tmp1072 * _tmp1303 + _tmp1076 * _tmp1304 - _tmp1080 * _tmp1304 -
                          _tmp1082 * priors_0_1_sqrt_info(1, 2) -
                          _tmp1083 * priors_0_1_sqrt_info(1, 1) + _tmp1177 * _tmp64;
  const Scalar _tmp1306 = _tmp648 * _tmp882 + _tmp649 * _tmp885 + _tmp650 * _tmp880;
  const Scalar _tmp1307 =
      ((((_tmp35 + _tmp654) > 0) - ((_tmp35 + _tmp654) < 0)) + 1) / std::pow(_tmp655, Scalar(2));
  const Scalar _tmp1308 = _tmp1307 * _tmp660;
  const Scalar _tmp1309 = _tmp1308 * _tmp889;
  const Scalar _tmp1310 = -_tmp1306 * _tmp1309 + _tmp661 * (_tmp650 * _tmp877 + _tmp653);
  const Scalar _tmp1311 = 2 * _tmp662;
  const Scalar _tmp1312 = _tmp1307 * _tmp652;
  const Scalar _tmp1313 =
      -_tmp1306 * _tmp1312 * _tmp658 * _views_1_calibration[0] + _tmp1310 * _tmp1311;
  const Scalar _tmp1314 = (Scalar(1) / Scalar(2)) * _tmp662;
  const Scalar _tmp1315 =
      _tmp178 * _tmp664 * _tmp665 * _tmp666 * std::pow(_tmp667, _tmp901) / _tmp668;
  const Scalar _tmp1316 = _tmp1314 * _tmp1315;
  const Scalar _tmp1317 = _tmp669 / (_tmp663 * std::sqrt(_tmp663));
  const Scalar _tmp1318 = _tmp1314 * _tmp1317;
  const Scalar _tmp1319 = _tmp1310 * _tmp670 + _tmp1313 * _tmp1316 - _tmp1313 * _tmp1318;
  const Scalar _tmp1320 = (Scalar(1) / Scalar(2)) * _tmp448;
  const Scalar _tmp1321 = _tmp1294 * _tmp1320;
  const Scalar _tmp1322 = _tmp1296 * _tmp1320;
  const Scalar _tmp1323 = -_tmp1288 * _tmp460 * _tmp918 + _tmp1292 * _tmp1321 - _tmp1292 * _tmp1322;
  const Scalar _tmp1324 = (Scalar(1) / Scalar(2)) * _tmp208;
  const Scalar _tmp1325 = _tmp1324 * _tmp953;
  const Scalar _tmp1326 = _tmp918 * _tmp944;
  const Scalar _tmp1327 = _tmp1324 * _tmp951;
  const Scalar _tmp1328 = _tmp1325 * _tmp949 - _tmp1326 * _tmp220 * _tmp942 - _tmp1327 * _tmp949;
  const Scalar _tmp1329 = _tmp652 * _tmp918;
  const Scalar _tmp1330 = _tmp1307 * _tmp1329;
  const Scalar _tmp1331 = (Scalar(1) / Scalar(2)) * _tmp658;
  const Scalar _tmp1332 = _tmp1315 * _tmp1331;
  const Scalar _tmp1333 = _tmp1317 * _tmp1331;
  const Scalar _tmp1334 =
      -_tmp1306 * _tmp1330 * _tmp670 + _tmp1313 * _tmp1332 - _tmp1313 * _tmp1333;
  const Scalar _tmp1335 = (Scalar(1) / Scalar(2)) * _tmp478;
  const Scalar _tmp1336 = _tmp1335 * _tmp973;
  const Scalar _tmp1337 = _tmp1335 * _tmp971;
  const Scalar _tmp1338 = -_tmp1336 * _tmp969 + _tmp1337 * _tmp969 - _tmp490 * _tmp918 * _tmp964;
  const Scalar _tmp1339 = -_tmp834 + _tmp835 - _tmp836 + _tmp837;
  const Scalar _tmp1340 = _priors_0_1_target_T_src[3] * _tmp844 + _tmp1064;
  const Scalar _tmp1341 = -_priors_0_1_target_T_src[1] * _tmp1339 - _tmp1065 + _tmp1340;
  const Scalar _tmp1342 = _tmp1341 * _tmp55;
  const Scalar _tmp1343 = _priors_0_1_target_T_src[0] * _tmp844;
  const Scalar _tmp1344 = _priors_0_1_target_T_src[2] * _tmp1339 + _tmp1057 + _tmp1343;
  const Scalar _tmp1345 = _tmp1079 * _tmp1344;
  const Scalar _tmp1346 = _tmp1075 * _tmp1344;
  const Scalar _tmp1347 = -_priors_0_1_target_T_src[2] * _tmp844;
  const Scalar _tmp1348 =
      _tmp44 * (_priors_0_1_target_T_src[0] * _tmp1339 + _tmp1059 + _tmp1060 + _tmp1347);
  const Scalar _tmp1349 = _tmp1348 * _tmp54;
  const Scalar _tmp1350 = _tmp1346 * _tmp32;
  const Scalar _tmp1351 = _priors_0_1_target_T_src[1] * _tmp844;
  const Scalar _tmp1352 =
      _tmp55 * (_priors_0_1_target_T_src[3] * _tmp1339 - _tmp1069 - _tmp1070 + _tmp1351);
  const Scalar _tmp1353 = _tmp1345 * _tmp53;
  const Scalar _tmp1354 = _tmp1345 * _tmp32;
  const Scalar _tmp1355 = _tmp1346 * _tmp53;
  const Scalar _tmp1356 =
      -_tmp1261 * _tmp1345 + _tmp1261 * _tmp1346 + _tmp1342 * priors_0_1_sqrt_info(2, 0) +
      _tmp1349 * priors_0_1_sqrt_info(2, 1) + _tmp1350 * priors_0_1_sqrt_info(2, 1) +
      _tmp1352 * priors_0_1_sqrt_info(2, 2) - _tmp1353 * priors_0_1_sqrt_info(2, 0) -
      _tmp1354 * priors_0_1_sqrt_info(2, 1) + _tmp1355 * priors_0_1_sqrt_info(2, 0);
  const Scalar _tmp1357 = -_tmp73;
  const Scalar _tmp1358 = _tmp1357 + _tmp873 + _tmp875 + _tmp93;
  const Scalar _tmp1359 = _tmp1358 * _tmp678 + _tmp681;
  const Scalar _tmp1360 = _tmp1040 * _tmp690;
  const Scalar _tmp1361 = _tmp1359 * _tmp1360;
  const Scalar _tmp1362 = _tmp879 + _tmp97;
  const Scalar _tmp1363 = _tmp1357 + _tmp76;
  const Scalar _tmp1364 = _tmp1363 + _tmp884;
  const Scalar _tmp1365 = -_tmp81;
  const Scalar _tmp1366 = _tmp1365 + _tmp84;
  const Scalar _tmp1367 = _tmp1040 * _tmp682;
  const Scalar _tmp1368 = _tmp1367 * _tmp918;
  const Scalar _tmp1369 = -_tmp1359 * _tmp1368 +
                          _tmp687 * (_tmp1362 * _tmp679 + _tmp1364 * _tmp680 + _tmp1366 * _tmp678);
  const Scalar _tmp1370 = 2 * _tmp688;
  const Scalar _tmp1371 = -_tmp1361 * _tmp692 * _views_1_calibration[1] + _tmp1369 * _tmp1370;
  const Scalar _tmp1372 = _tmp1049 * _tmp1371;
  const Scalar _tmp1373 = -_tmp1046 * _tmp1372 + _tmp1048 * _tmp1371 + _tmp1369 * _tmp700;
  const Scalar _tmp1374 = _tmp906 * (_tmp1358 * _tmp498 + _tmp501);
  const Scalar _tmp1375 = -_tmp1374 * _tmp919 +
                          _tmp507 * (_tmp1362 * _tmp499 + _tmp1364 * _tmp500 + _tmp1366 * _tmp498);
  const Scalar _tmp1376 = 2 * _tmp508;
  const Scalar _tmp1377 = _tmp1374 * _tmp510;
  const Scalar _tmp1378 = _tmp1375 * _tmp1376 - _tmp1377 * _tmp512 * _views_1_calibration[1];
  const Scalar _tmp1379 = _tmp1378 * _tmp913;
  const Scalar _tmp1380 = _tmp1375 * _tmp520 - _tmp1379 * _tmp914 + _tmp1379 * _tmp916;
  const Scalar _tmp1381 =
      -_tmp1180 * _tmp1345 + _tmp1180 * _tmp1346 + _tmp1181 * _tmp1346 + _tmp1341 * _tmp69 +
      _tmp1349 * priors_0_1_sqrt_info(3, 1) + _tmp1350 * priors_0_1_sqrt_info(3, 1) +
      _tmp1352 * priors_0_1_sqrt_info(3, 2) - _tmp1353 * priors_0_1_sqrt_info(3, 0) -
      _tmp1354 * priors_0_1_sqrt_info(3, 1);
  const Scalar _tmp1382 = _tmp1358 * _tmp408 + _tmp411;
  const Scalar _tmp1383 = _tmp1226 * _tmp1382;
  const Scalar _tmp1384 = _tmp1224 * _tmp918;
  const Scalar _tmp1385 = -_tmp1382 * _tmp1384 +
                          _tmp417 * (_tmp1362 * _tmp409 + _tmp1364 * _tmp410 + _tmp1366 * _tmp408);
  const Scalar _tmp1386 = 2 * _tmp418;
  const Scalar _tmp1387 = -_tmp1383 * _tmp422 * _views_1_calibration[1] + _tmp1385 * _tmp1386;
  const Scalar _tmp1388 = _tmp1234 * _tmp1266;
  const Scalar _tmp1389 = _tmp1267 * _tmp1387 + _tmp1385 * _tmp430 - _tmp1387 * _tmp1388;
  const Scalar _tmp1390 = _tmp1231 * _tmp1234;
  const Scalar _tmp1391 = _tmp1233 * _tmp1387 - _tmp1383 * _tmp430 * _tmp889 - _tmp1387 * _tmp1390;
  const Scalar _tmp1392 = _tmp1345 * _tmp57;
  const Scalar _tmp1393 = _tmp1176 * _tmp1344;
  const Scalar _tmp1394 =
      _tmp1173 * _tmp1344 - _tmp1175 * _tmp1344 + _tmp1342 * priors_0_1_sqrt_info(0, 0) +
      _tmp1348 * _tmp42 + _tmp1352 * priors_0_1_sqrt_info(0, 2) -
      _tmp1353 * priors_0_1_sqrt_info(0, 0) + _tmp1355 * priors_0_1_sqrt_info(0, 0) -
      _tmp1392 * priors_0_1_sqrt_info(0, 2) + _tmp1393 * _tmp42;
  const Scalar _tmp1395 = -_tmp1377 * _tmp520 * _tmp889 - _tmp1378 * _tmp923 + _tmp1378 * _tmp924;
  const Scalar _tmp1396 = _tmp1358 * _tmp198 + _tmp201;
  const Scalar _tmp1397 = _tmp1396 * _tmp945;
  const Scalar _tmp1398 = -_tmp1326 * _tmp1396 +
                          _tmp207 * (_tmp1362 * _tmp199 + _tmp1364 * _tmp200 + _tmp1366 * _tmp198);
  const Scalar _tmp1399 = 2 * _tmp208;
  const Scalar _tmp1400 = -_tmp1397 * _tmp212 * _views_1_calibration[1] + _tmp1398 * _tmp1399;
  const Scalar _tmp1401 = _tmp1400 * _tmp951;
  const Scalar _tmp1402 = -_tmp1397 * _tmp220 * _tmp889 + _tmp1400 * _tmp954 - _tmp1401 * _tmp950;
  const Scalar _tmp1403 = _priors_1_0_target_T_src[3] * _tmp1056;
  const Scalar _tmp1404 = _priors_1_0_target_T_src[0] * _tmp1053 + _tmp1403 + _tmp855 + _tmp856;
  const Scalar _tmp1405 = _tmp1404 * _tmp849;
  const Scalar _tmp1406 = _tmp117 * _tmp1405;
  const Scalar _tmp1407 = _tmp1404 * _tmp852;
  const Scalar _tmp1408 = _priors_1_0_target_T_src[1] * _tmp1056;
  const Scalar _tmp1409 =
      _tmp126 * (-_priors_1_0_target_T_src[2] * _tmp1053 - _tmp1408 + _tmp859 + _tmp860);
  const Scalar _tmp1410 = _tmp1404 * _tmp868;
  const Scalar _tmp1411 = _tmp117 * _tmp1410;
  const Scalar _tmp1412 = _priors_1_0_target_T_src[0] * _tmp1056;
  const Scalar _tmp1413 =
      _tmp126 * (_priors_1_0_target_T_src[3] * _tmp1053 - _tmp1412 + _tmp863 + _tmp864);
  const Scalar _tmp1414 = _tmp1404 * _tmp870;
  const Scalar _tmp1415 = _tmp1362 * _views_0_pose[5] - _tmp1362 * _views_1_pose[5] +
                          _tmp1364 * _views_0_pose[6] - _tmp1364 * _views_1_pose[6] +
                          _tmp1366 * _views_0_pose[4] - _tmp1366 * _views_1_pose[4];
  const Scalar _tmp1416 =
      _tmp1358 * _views_0_pose[4] - _tmp1358 * _views_1_pose[4] - _tmp86 - _tmp90 + _tmp91;
  const Scalar _tmp1417 = -_priors_1_0_target_T_src[2] * _tmp1056;
  const Scalar _tmp1418 =
      _tmp126 * (_priors_1_0_target_T_src[1] * _tmp1053 + _tmp1417 - _tmp828 + _tmp839);
  const Scalar _tmp1419 =
      -_tmp1405 * _tmp956 - _tmp1406 * priors_1_0_sqrt_info(0, 2) -
      _tmp1407 * priors_1_0_sqrt_info(0, 1) + _tmp1409 * priors_1_0_sqrt_info(0, 1) +
      _tmp1410 * _tmp956 + _tmp1411 * priors_1_0_sqrt_info(0, 2) +
      _tmp1413 * priors_1_0_sqrt_info(0, 0) + _tmp1414 * priors_1_0_sqrt_info(0, 1) +
      _tmp1415 * priors_1_0_sqrt_info(0, 3) + _tmp1416 * priors_1_0_sqrt_info(0, 5) +
      _tmp1418 * priors_1_0_sqrt_info(0, 2);
  const Scalar _tmp1420 = _tmp1358 * _tmp438 + _tmp441;
  const Scalar _tmp1421 = _tmp1286 * _tmp442;
  const Scalar _tmp1422 = _tmp1421 * _tmp918;
  const Scalar _tmp1423 = -_tmp1420 * _tmp1422 +
                          _tmp447 * (_tmp1362 * _tmp439 + _tmp1364 * _tmp440 + _tmp1366 * _tmp438);
  const Scalar _tmp1424 = 2 * _tmp448;
  const Scalar _tmp1425 =
      -_tmp1286 * _tmp1420 * _tmp450 * _tmp452 * _views_1_calibration[1] + _tmp1423 * _tmp1424;
  const Scalar _tmp1426 = _tmp1321 * _tmp1425 - _tmp1322 * _tmp1425 + _tmp1423 * _tmp460;
  const Scalar _tmp1427 = _tmp1358 * _tmp258 + _tmp261;
  const Scalar _tmp1428 = -_tmp1022 * _tmp1427 +
                          _tmp267 * (_tmp1362 * _tmp259 + _tmp1364 * _tmp260 + _tmp1366 * _tmp258);
  const Scalar _tmp1429 = 2 * _tmp268;
  const Scalar _tmp1430 =
      -_tmp1014 * _tmp1427 * _tmp272 * _views_1_calibration[1] + _tmp1428 * _tmp1429;
  const Scalar _tmp1431 =
      -_tmp1015 * _tmp1427 * _tmp280 - _tmp1270 * _tmp1430 + _tmp1271 * _tmp1430;
  const Scalar _tmp1432 = _tmp1188 * (_tmp1358 * _tmp288 + _tmp291);
  const Scalar _tmp1433 = -_tmp1280 * _tmp1432 +
                          _tmp297 * (_tmp1362 * _tmp290 + _tmp1364 * _tmp289 + _tmp1366 * _tmp288);
  const Scalar _tmp1434 = 2 * _tmp298;
  const Scalar _tmp1435 = _tmp1432 * _tmp300;
  const Scalar _tmp1436 = _tmp1433 * _tmp1434 - _tmp1435 * _tmp302 * _views_1_calibration[1];
  const Scalar _tmp1437 = -_tmp1196 * _tmp1436 + _tmp1198 * _tmp1436 - _tmp1435 * _tmp310 * _tmp889;
  const Scalar _tmp1438 = _tmp1286 * _tmp1289;
  const Scalar _tmp1439 = _tmp1295 * _tmp1425 - _tmp1297 * _tmp1425 - _tmp1420 * _tmp1438 * _tmp460;
  const Scalar _tmp1440 = _tmp1307 * (_tmp1358 * _tmp648 + _tmp651);
  const Scalar _tmp1441 = _tmp1440 * _tmp660;
  const Scalar _tmp1442 = -_tmp1329 * _tmp1440 +
                          _tmp657 * (_tmp1362 * _tmp649 + _tmp1364 * _tmp650 + _tmp1366 * _tmp648);
  const Scalar _tmp1443 = 2 * _tmp658;
  const Scalar _tmp1444 = -_tmp1441 * _tmp662 * _views_1_calibration[1] + _tmp1442 * _tmp1443;
  const Scalar _tmp1445 = _tmp1316 * _tmp1444 - _tmp1318 * _tmp1444 - _tmp1441 * _tmp670 * _tmp889;
  const Scalar _tmp1446 = _tmp1358 * _tmp378 + _tmp381;
  const Scalar _tmp1447 = _tmp1119 * _tmp1446;
  const Scalar _tmp1448 = _tmp1123 * _tmp918;
  const Scalar _tmp1449 = -_tmp1446 * _tmp1448 +
                          _tmp387 * (_tmp1362 * _tmp379 + _tmp1364 * _tmp380 + _tmp1366 * _tmp378);
  const Scalar _tmp1450 = 2 * _tmp388;
  const Scalar _tmp1451 = -_tmp1447 * _tmp392 * _views_1_calibration[1] + _tmp1449 * _tmp1450;
  const Scalar _tmp1452 = _tmp1129 * _tmp1451;
  const Scalar _tmp1453 = -_tmp1126 * _tmp1452 + _tmp1128 * _tmp1451 - _tmp1447 * _tmp400 * _tmp889;
  const Scalar _tmp1454 = _tmp962 * (_tmp1358 * _tmp468 + _tmp471);
  const Scalar _tmp1455 = -_tmp1454 * _tmp472 * _tmp918 +
                          _tmp477 * (_tmp1362 * _tmp470 + _tmp1364 * _tmp469 + _tmp1366 * _tmp468);
  const Scalar _tmp1456 = 2 * _tmp478;
  const Scalar _tmp1457 = _tmp1454 * _tmp965;
  const Scalar _tmp1458 = _tmp1455 * _tmp1456 - _tmp1457 * _tmp482;
  const Scalar _tmp1459 = -_tmp1336 * _tmp1458 + _tmp1337 * _tmp1458 + _tmp1455 * _tmp490;
  const Scalar _tmp1460 = _tmp1358 * _tmp154 + _tmp163;
  const Scalar _tmp1461 = -_tmp1237 * _tmp1460 +
                          _tmp169 * (_tmp1362 * _tmp158 + _tmp1364 * _tmp162 + _tmp1366 * _tmp154);
  const Scalar _tmp1462 = 2 * _tmp170;
  const Scalar _tmp1463 =
      -_tmp1105 * _tmp1460 * _tmp174 * _views_1_calibration[1] + _tmp1461 * _tmp1462;
  const Scalar _tmp1464 = -_tmp1239 * _tmp1463 + _tmp1240 * _tmp1463 + _tmp1461 * _tmp190;
  const Scalar _tmp1465 = _tmp1358 * _tmp588 + _tmp591;
  const Scalar _tmp1466 = _tmp895 * _tmp918;
  const Scalar _tmp1467 = -_tmp1465 * _tmp1466 +
                          _tmp597 * (_tmp1362 * _tmp589 + _tmp1364 * _tmp590 + _tmp1366 * _tmp588);
  const Scalar _tmp1468 = 2 * _tmp598;
  const Scalar _tmp1469 =
      -_tmp1465 * _tmp602 * _tmp891 * _views_1_calibration[1] + _tmp1467 * _tmp1468;
  const Scalar _tmp1470 = _tmp1252 * _tmp899;
  const Scalar _tmp1471 = _tmp1253 * _tmp1469 + _tmp1467 * _tmp610 - _tmp1469 * _tmp1470;
  const Scalar _tmp1472 = _tmp1026 * (_tmp1358 * _tmp318 + _tmp321);
  const Scalar _tmp1473 = _tmp1472 * _tmp330;
  const Scalar _tmp1474 = (Scalar(1) / Scalar(2)) * _tmp1031;
  const Scalar _tmp1475 = -_tmp1472 * _tmp1474 +
                          _tmp327 * (_tmp1362 * _tmp319 + _tmp1364 * _tmp320 + _tmp1366 * _tmp318);
  const Scalar _tmp1476 = 2 * _tmp328;
  const Scalar _tmp1477 = -_tmp1473 * _tmp332 * _views_1_calibration[1] + _tmp1475 * _tmp1476;
  const Scalar _tmp1478 = -_tmp1036 * _tmp1477 + _tmp1038 * _tmp1477 + _tmp1475 * _tmp340;
  const Scalar _tmp1479 = _tmp894 * _tmp899;
  const Scalar _tmp1480 = -_tmp1465 * _tmp610 * _tmp892 - _tmp1469 * _tmp1479 + _tmp1469 * _tmp903;
  const Scalar _tmp1481 = _tmp1358 * _tmp348 + _tmp351;
  const Scalar _tmp1482 = _tmp918 * _tmp985;
  const Scalar _tmp1483 = -_tmp1481 * _tmp1482 +
                          _tmp357 * (_tmp1362 * _tmp349 + _tmp1364 * _tmp350 + _tmp1366 * _tmp348);
  const Scalar _tmp1484 = 2 * _tmp358;
  const Scalar _tmp1485 =
      -_tmp1481 * _tmp362 * _tmp981 * _views_1_calibration[1] + _tmp1483 * _tmp1484;
  const Scalar _tmp1486 = _tmp1255 * _tmp988;
  const Scalar _tmp1487 = _tmp1256 * _tmp1485 - _tmp1481 * _tmp370 * _tmp982 - _tmp1485 * _tmp1486;
  const Scalar _tmp1488 = _tmp1358 * _tmp738 + _tmp741;
  const Scalar _tmp1489 = _tmp1094 * _tmp918;
  const Scalar _tmp1490 = -_tmp1488 * _tmp1489 +
                          _tmp747 * (_tmp1362 * _tmp740 + _tmp1364 * _tmp739 + _tmp1366 * _tmp738);
  const Scalar _tmp1491 = 2 * _tmp748;
  const Scalar _tmp1492 =
      -_tmp1090 * _tmp1488 * _tmp752 * _views_1_calibration[1] + _tmp1490 * _tmp1491;
  const Scalar _tmp1493 = _tmp1183 * _tmp1492;
  const Scalar _tmp1494 = -_tmp1097 * _tmp1493 + _tmp1100 * _tmp1493 + _tmp1490 * _tmp760;
  const Scalar _tmp1495 = _tmp1283 * _tmp1436 - _tmp1284 * _tmp1436 + _tmp1433 * _tmp310;
  const Scalar _tmp1496 =
      -_tmp1091 * _tmp1488 * _tmp760 - _tmp1099 * _tmp1492 + _tmp1101 * _tmp1492;
  const Scalar _tmp1497 = -_tmp1324 * _tmp1401 + _tmp1325 * _tmp1400 + _tmp1398 * _tmp220;
  const Scalar _tmp1498 = -_tmp1242 * _tmp1372 + _tmp1244 * _tmp1371 - _tmp1361 * _tmp700 * _tmp889;
  const Scalar _tmp1499 =
      -_tmp1264 * _tmp1405 + _tmp1264 * _tmp1410 - _tmp1406 * priors_1_0_sqrt_info(5, 2) -
      _tmp1407 * priors_1_0_sqrt_info(5, 1) + _tmp1409 * priors_1_0_sqrt_info(5, 1) +
      _tmp1411 * priors_1_0_sqrt_info(5, 2) + _tmp1413 * priors_1_0_sqrt_info(5, 0) +
      _tmp1414 * priors_1_0_sqrt_info(5, 1) + _tmp1415 * priors_1_0_sqrt_info(5, 3) +
      _tmp1416 * priors_1_0_sqrt_info(5, 5) + _tmp1418 * priors_1_0_sqrt_info(5, 2);
  const Scalar _tmp1500 = _tmp1358 * _tmp708 + _tmp711;
  const Scalar _tmp1501 = _tmp1138 * _tmp918;
  const Scalar _tmp1502 = -_tmp1500 * _tmp1501 +
                          _tmp717 * (_tmp1362 * _tmp710 + _tmp1364 * _tmp709 + _tmp1366 * _tmp708);
  const Scalar _tmp1503 = 2 * _tmp718;
  const Scalar _tmp1504 =
      -_tmp1134 * _tmp1500 * _tmp722 * _views_1_calibration[1] + _tmp1502 * _tmp1503;
  const Scalar _tmp1505 = _tmp1142 * _tmp1504;
  const Scalar _tmp1506 =
      -_tmp1135 * _tmp1500 * _tmp730 - _tmp1141 * _tmp1505 + _tmp1145 * _tmp1504;
  const Scalar _tmp1507 = _tmp1085 * _tmp1344;
  const Scalar _tmp1508 =
      -_tmp1304 * _tmp1345 + _tmp1304 * _tmp1346 + _tmp1342 * priors_0_1_sqrt_info(1, 0) +
      _tmp1348 * _tmp64 + _tmp1352 * priors_0_1_sqrt_info(1, 2) -
      _tmp1354 * priors_0_1_sqrt_info(1, 1) - _tmp1392 * priors_0_1_sqrt_info(1, 2) +
      _tmp1393 * _tmp64 + _tmp1507 * priors_0_1_sqrt_info(1, 2);
  const Scalar _tmp1509 =
      -_tmp1163 * _tmp1405 + _tmp1163 * _tmp1410 + _tmp1164 * _tmp1404 - _tmp1165 * _tmp1404 -
      _tmp1406 * priors_1_0_sqrt_info(2, 2) + _tmp1409 * priors_1_0_sqrt_info(2, 1) +
      _tmp1411 * priors_1_0_sqrt_info(2, 2) + _tmp1413 * priors_1_0_sqrt_info(2, 0) +
      _tmp1415 * priors_1_0_sqrt_info(2, 3) + _tmp1416 * priors_1_0_sqrt_info(2, 5) +
      _tmp1418 * priors_1_0_sqrt_info(2, 2);
  const Scalar _tmp1510 = _tmp988 * _tmp990;
  const Scalar _tmp1511 = _tmp1483 * _tmp370 - _tmp1485 * _tmp1510 + _tmp1485 * _tmp992;
  const Scalar _tmp1512 = _tmp1021 * _tmp1430 - _tmp1024 * _tmp1430 + _tmp1428 * _tmp280;
  const Scalar _tmp1513 = _tmp1358 * _tmp558 + _tmp561;
  const Scalar _tmp1514 = _tmp1513 * _tmp929;
  const Scalar _tmp1515 = -_tmp1246 * _tmp1513 +
                          _tmp567 * (_tmp1362 * _tmp559 + _tmp1364 * _tmp560 + _tmp1366 * _tmp558);
  const Scalar _tmp1516 = 2 * _tmp568;
  const Scalar _tmp1517 = -_tmp1514 * _tmp572 * _views_1_calibration[1] + _tmp1515 * _tmp1516;
  const Scalar _tmp1518 = -_tmp1514 * _tmp580 * _tmp889 - _tmp1517 * _tmp936 + _tmp1517 * _tmp940;
  const Scalar _tmp1519 = _tmp1148 * (_tmp1358 * _tmp228 + _tmp231);
  const Scalar _tmp1520 = -_tmp1149 * _tmp1519 +
                          _tmp237 * (_tmp1362 * _tmp230 + _tmp1364 * _tmp229 + _tmp1366 * _tmp228);
  const Scalar _tmp1521 = 2 * _tmp238;
  const Scalar _tmp1522 = _tmp1519 * _tmp240;
  const Scalar _tmp1523 = (Scalar(1) / Scalar(2)) * _tmp1520 * _tmp1521 -
                          Scalar(1) / Scalar(2) * _tmp1522 * _tmp242 * _views_1_calibration[1];
  const Scalar _tmp1524 = _tmp1523 * _tmp238;
  const Scalar _tmp1525 = _tmp1156 * _tmp178;
  const Scalar _tmp1526 = -_tmp1159 * _tmp1524 + _tmp1520 * _tmp250 + _tmp1524 * _tmp1525;
  const Scalar _tmp1527 =
      _tmp1084 * _tmp1346 + _tmp1086 * _tmp1344 + _tmp1342 * priors_0_1_sqrt_info(4, 0) +
      _tmp1349 * priors_0_1_sqrt_info(4, 1) + _tmp1350 * priors_0_1_sqrt_info(4, 1) +
      _tmp1352 * priors_0_1_sqrt_info(4, 2) - _tmp1353 * priors_0_1_sqrt_info(4, 0) -
      _tmp1354 * priors_0_1_sqrt_info(4, 1) - _tmp1392 * priors_0_1_sqrt_info(4, 2);
  const Scalar _tmp1528 = _tmp1523 * _tmp242;
  const Scalar _tmp1529 = -_tmp1159 * _tmp1528 - _tmp1522 * _tmp250 * _tmp889 + _tmp1525 * _tmp1528;
  const Scalar _tmp1530 =
      _tmp1342 * priors_0_1_sqrt_info(5, 0) + _tmp1349 * priors_0_1_sqrt_info(5, 1) +
      _tmp1350 * priors_0_1_sqrt_info(5, 1) + _tmp1352 * priors_0_1_sqrt_info(5, 2) -
      _tmp1353 * priors_0_1_sqrt_info(5, 0) - _tmp1354 * priors_0_1_sqrt_info(5, 1) +
      _tmp1355 * priors_0_1_sqrt_info(5, 0) - _tmp1392 * priors_0_1_sqrt_info(5, 2) +
      _tmp1507 * priors_0_1_sqrt_info(5, 2);
  const Scalar _tmp1531 = -_tmp1218 * _tmp1452 + _tmp1219 * _tmp1451 + _tmp1449 * _tmp400;
  const Scalar _tmp1532 = _tmp1358 * _tmp528 + _tmp531;
  const Scalar _tmp1533 = -_tmp1005 * _tmp1532 +
                          _tmp537 * (_tmp1362 * _tmp530 + _tmp1364 * _tmp529 + _tmp1366 * _tmp528);
  const Scalar _tmp1534 = 2 * _tmp538;
  const Scalar _tmp1535 =
      -_tmp1532 * _tmp542 * _tmp997 * _views_1_calibration[1] + _tmp1533 * _tmp1534;
  const Scalar _tmp1536 = -_tmp1004 * _tmp1535 + _tmp1009 * _tmp1535 + _tmp1533 * _tmp550;
  const Scalar _tmp1537 = _tmp1358 * _tmp618 + _tmp621;
  const Scalar _tmp1538 = -_tmp1214 * _tmp1537 +
                          _tmp627 * (_tmp1362 * _tmp620 + _tmp1364 * _tmp619 + _tmp1366 * _tmp618);
  const Scalar _tmp1539 = 2 * _tmp628;
  const Scalar _tmp1540 =
      -_tmp1206 * _tmp1537 * _tmp632 * _views_1_calibration[1] + _tmp1538 * _tmp1539;
  const Scalar _tmp1541 =
      -_tmp1207 * _tmp1537 * _tmp640 + _tmp1300 * _tmp1540 - _tmp1301 * _tmp1540;
  const Scalar _tmp1542 = _tmp1458 * _tmp970;
  const Scalar _tmp1543 =
      -Scalar(1) / Scalar(2) * _tmp1457 * _tmp490 + _tmp1542 * _tmp971 - _tmp1542 * _tmp973;
  const Scalar _tmp1544 = _tmp1332 * _tmp1444 - _tmp1333 * _tmp1444 + _tmp1442 * _tmp670;
  const Scalar _tmp1545 = -_tmp1248 * _tmp1517 + _tmp1250 * _tmp1517 + _tmp1515 * _tmp580;
  const Scalar _tmp1546 =
      -_tmp1171 * _tmp1405 + _tmp1171 * _tmp1410 - _tmp1406 * priors_1_0_sqrt_info(3, 2) -
      _tmp1407 * priors_1_0_sqrt_info(3, 1) + _tmp1409 * priors_1_0_sqrt_info(3, 1) +
      _tmp1411 * priors_1_0_sqrt_info(3, 2) + _tmp1413 * priors_1_0_sqrt_info(3, 0) +
      _tmp1414 * priors_1_0_sqrt_info(3, 1) + _tmp1415 * priors_1_0_sqrt_info(3, 3) +
      _tmp1416 * priors_1_0_sqrt_info(3, 5) + _tmp1418 * priors_1_0_sqrt_info(3, 2);
  const Scalar _tmp1547 = _tmp1277 * _tmp1477 - _tmp1278 * _tmp1477 - _tmp1473 * _tmp340 * _tmp889;
  const Scalar _tmp1548 =
      -_tmp1106 * _tmp1460 * _tmp190 + _tmp1113 * _tmp1463 - _tmp1115 * _tmp1463;
  const Scalar _tmp1549 =
      -_tmp1405 * _tmp976 - _tmp1405 * _tmp977 - _tmp1407 * priors_1_0_sqrt_info(1, 1) +
      _tmp1409 * priors_1_0_sqrt_info(1, 1) + _tmp1410 * _tmp976 + _tmp1410 * _tmp977 +
      _tmp1413 * priors_1_0_sqrt_info(1, 0) + _tmp1414 * priors_1_0_sqrt_info(1, 1) +
      _tmp1415 * priors_1_0_sqrt_info(1, 3) + _tmp1416 * priors_1_0_sqrt_info(1, 5) +
      _tmp1418 * priors_1_0_sqrt_info(1, 2);
  const Scalar _tmp1550 =
      -_tmp1404 * _tmp853 - _tmp1405 * _tmp851 - _tmp1405 * _tmp854 +
      _tmp1409 * priors_1_0_sqrt_info(4, 1) + _tmp1410 * _tmp851 + _tmp1410 * _tmp854 +
      _tmp1413 * priors_1_0_sqrt_info(4, 0) + _tmp1414 * priors_1_0_sqrt_info(4, 1) +
      _tmp1415 * priors_1_0_sqrt_info(4, 3) + _tmp1416 * priors_1_0_sqrt_info(4, 5) +
      _tmp1418 * priors_1_0_sqrt_info(4, 2);
  const Scalar _tmp1551 = -_tmp1213 * _tmp1540 + _tmp1216 * _tmp1540 + _tmp1538 * _tmp640;
  const Scalar _tmp1552 = -_tmp1258 * _tmp1535 + _tmp1259 * _tmp1535 - _tmp1532 * _tmp550 * _tmp998;
  const Scalar _tmp1553 = -_tmp1167 * _tmp1505 + _tmp1168 * _tmp1504 + _tmp1502 * _tmp730;
  const Scalar _tmp1554 = _tmp1363 + _tmp874;
  const Scalar _tmp1555 = _tmp597 * (_tmp1554 * _tmp589 + _tmp599);
  const Scalar _tmp1556 = _tmp73 + _tmp76 + _tmp872 + _tmp883;
  const Scalar _tmp1557 = _tmp101 + _tmp881;
  const Scalar _tmp1558 = _tmp1365 + _tmp83;
  const Scalar _tmp1559 = _tmp601 * (_tmp1556 * _tmp588 + _tmp1557 * _tmp589 + _tmp1558 * _tmp590);
  const Scalar _tmp1560 = _tmp1468 * _tmp1555 + _tmp1559 * _tmp897;
  const Scalar _tmp1561 = -_tmp1479 * _tmp1560 + _tmp1559 * _tmp610 + _tmp1560 * _tmp903;
  const Scalar _tmp1562 = _tmp421 * (_tmp1556 * _tmp408 + _tmp1557 * _tmp409 + _tmp1558 * _tmp410);
  const Scalar _tmp1563 = _tmp417 * (_tmp1554 * _tmp409 + _tmp419);
  const Scalar _tmp1564 = _tmp1229 * _tmp1562 + _tmp1386 * _tmp1563;
  const Scalar _tmp1565 = _tmp1233 * _tmp1564 - _tmp1390 * _tmp1564 + _tmp1562 * _tmp430;
  const Scalar _tmp1566 = _tmp751 * (_tmp1556 * _tmp738 + _tmp1557 * _tmp740 + _tmp1558 * _tmp739);
  const Scalar _tmp1567 = _tmp747 * (_tmp1554 * _tmp740 + _tmp749);
  const Scalar _tmp1568 = _tmp1093 * _tmp1566 + _tmp1491 * _tmp1567;
  const Scalar _tmp1569 = _tmp1184 * _tmp1568 - _tmp1185 * _tmp1568 + _tmp1567 * _tmp760;
  const Scalar _tmp1570 = _priors_1_0_target_T_src[1] * _tmp1339 + _tmp1412 + _tmp863 + _tmp865;
  const Scalar _tmp1571 = _tmp1570 * _tmp868;
  const Scalar _tmp1572 =
      _tmp126 * (_priors_1_0_target_T_src[2] * _tmp1339 + _tmp1403 - _tmp855 + _tmp857);
  const Scalar _tmp1573 = _tmp1570 * _tmp852;
  const Scalar _tmp1574 = _tmp1570 * _tmp849;
  const Scalar _tmp1575 =
      -_tmp100 - _tmp103 + _tmp104 + _tmp1554 * _views_0_pose[5] - _tmp1554 * _views_1_pose[5];
  const Scalar _tmp1576 = _tmp1556 * _views_0_pose[4] - _tmp1556 * _views_1_pose[4] +
                          _tmp1557 * _views_0_pose[5] - _tmp1557 * _views_1_pose[5] +
                          _tmp1558 * _views_0_pose[6] - _tmp1558 * _views_1_pose[6];
  const Scalar _tmp1577 = _tmp1570 * _tmp870;
  const Scalar _tmp1578 =
      _tmp126 * (_priors_1_0_target_T_src[3] * _tmp1339 + _tmp1417 + _tmp828 - _tmp845);
  const Scalar _tmp1579 = _tmp117 * _tmp1571;
  const Scalar _tmp1580 =
      _tmp126 * (-_priors_1_0_target_T_src[0] * _tmp1339 + _tmp1408 + _tmp859 - _tmp861);
  const Scalar _tmp1581 = _tmp117 * _tmp1574;
  const Scalar _tmp1582 =
      _tmp1264 * _tmp1571 - _tmp1264 * _tmp1574 + _tmp1572 * priors_1_0_sqrt_info(5, 0) -
      _tmp1573 * priors_1_0_sqrt_info(5, 1) + _tmp1575 * priors_1_0_sqrt_info(5, 3) +
      _tmp1576 * priors_1_0_sqrt_info(5, 4) + _tmp1577 * priors_1_0_sqrt_info(5, 1) +
      _tmp1578 * priors_1_0_sqrt_info(5, 1) + _tmp1579 * priors_1_0_sqrt_info(5, 2) +
      _tmp1580 * priors_1_0_sqrt_info(5, 2) - _tmp1581 * priors_1_0_sqrt_info(5, 2);
  const Scalar _tmp1583 = _priors_0_1_target_T_src[0] * _tmp833 + _tmp1066 + _tmp1340;
  const Scalar _tmp1584 = _tmp1079 * _tmp1583;
  const Scalar _tmp1585 = _tmp1584 * _tmp32;
  const Scalar _tmp1586 = _tmp1584 * _tmp57;
  const Scalar _tmp1587 = _tmp1075 * _tmp1583;
  const Scalar _tmp1588 = _tmp55 * (_priors_0_1_target_T_src[1] * _tmp833 + _tmp1061 + _tmp1347);
  const Scalar _tmp1589 = _priors_0_1_target_T_src[3] * _tmp833 + _tmp1052 - _tmp1055 - _tmp1343;
  const Scalar _tmp1590 = _tmp1589 * _tmp55;
  const Scalar _tmp1591 = -_priors_0_1_target_T_src[2] * _tmp833 + _tmp1071 - _tmp1351;
  const Scalar _tmp1592 = _tmp1591 * _tmp44;
  const Scalar _tmp1593 = _tmp1583 * _tmp32;
  const Scalar _tmp1594 = _tmp1074 * _tmp1593;
  const Scalar _tmp1595 =
      _tmp1303 * _tmp1583 - _tmp1304 * _tmp1584 + _tmp1304 * _tmp1587 -
      _tmp1585 * priors_0_1_sqrt_info(1, 1) - _tmp1586 * priors_0_1_sqrt_info(1, 2) +
      _tmp1588 * priors_0_1_sqrt_info(1, 2) + _tmp1590 * priors_0_1_sqrt_info(1, 0) +
      _tmp1592 * _tmp64 + _tmp1594 * _tmp64;
  const Scalar _tmp1596 = _tmp1075 * _tmp1593;
  const Scalar _tmp1597 = _tmp1591 * _tmp55;
  const Scalar _tmp1598 = _tmp1584 * _tmp53;
  const Scalar _tmp1599 =
      -_tmp1180 * _tmp1584 + _tmp1180 * _tmp1587 + _tmp1181 * _tmp1587 -
      _tmp1585 * priors_0_1_sqrt_info(3, 1) + _tmp1588 * priors_0_1_sqrt_info(3, 2) +
      _tmp1589 * _tmp69 + _tmp1596 * priors_0_1_sqrt_info(3, 1) +
      _tmp1597 * priors_0_1_sqrt_info(3, 1) - _tmp1598 * priors_0_1_sqrt_info(3, 0);
  const Scalar _tmp1600 =
      _tmp1571 * _tmp851 + _tmp1571 * _tmp854 + _tmp1572 * priors_1_0_sqrt_info(4, 0) -
      _tmp1573 * priors_1_0_sqrt_info(4, 1) - _tmp1574 * _tmp851 +
      _tmp1575 * priors_1_0_sqrt_info(4, 3) + _tmp1576 * priors_1_0_sqrt_info(4, 4) +
      _tmp1577 * priors_1_0_sqrt_info(4, 1) + _tmp1578 * priors_1_0_sqrt_info(4, 1) +
      _tmp1580 * priors_1_0_sqrt_info(4, 2) - _tmp1581 * priors_1_0_sqrt_info(4, 2);
  const Scalar _tmp1601 = _tmp717 * (_tmp1554 * _tmp710 + _tmp719);
  const Scalar _tmp1602 = _tmp721 * (_tmp1556 * _tmp708 + _tmp1557 * _tmp710 + _tmp1558 * _tmp709);
  const Scalar _tmp1603 = _tmp1137 * _tmp1602 + _tmp1503 * _tmp1601;
  const Scalar _tmp1604 = -_tmp1143 * _tmp1603 + _tmp1145 * _tmp1603 + _tmp1602 * _tmp730;
  const Scalar _tmp1605 = _tmp1173 * _tmp1583 - _tmp1174 * _tmp1593 + _tmp1178 * _tmp1587 -
                          _tmp1586 * priors_0_1_sqrt_info(0, 2) +
                          _tmp1588 * priors_0_1_sqrt_info(0, 2) +
                          _tmp1590 * priors_0_1_sqrt_info(0, 0) + _tmp1592 * _tmp42 +
                          _tmp1594 * _tmp42 - _tmp1598 * priors_0_1_sqrt_info(0, 0);
  const Scalar _tmp1606 = _tmp481 * (_tmp1556 * _tmp468 + _tmp1557 * _tmp470 + _tmp1558 * _tmp469);
  const Scalar _tmp1607 = _tmp477 * (_tmp1554 * _tmp470 + _tmp479);
  const Scalar _tmp1608 = _tmp1456 * _tmp1607 + _tmp1606 * _tmp968;
  const Scalar _tmp1609 = _tmp1606 * _tmp490 + _tmp1608 * _tmp972 - _tmp1608 * _tmp974;
  const Scalar _tmp1610 = _tmp173 * (_tmp154 * _tmp1556 + _tmp1557 * _tmp158 + _tmp1558 * _tmp162);
  const Scalar _tmp1611 = _tmp169 * (_tmp1554 * _tmp158 + _tmp171);
  const Scalar _tmp1612 = _tmp1109 * _tmp1610 + _tmp1462 * _tmp1611;
  const Scalar _tmp1613 = _tmp1113 * _tmp1612 - _tmp1115 * _tmp1612 + _tmp1610 * _tmp190;
  const Scalar _tmp1614 = _tmp661 * (_tmp1556 * _tmp648 + _tmp1557 * _tmp649 + _tmp1558 * _tmp650);
  const Scalar _tmp1615 = _tmp657 * (_tmp1554 * _tmp649 + _tmp659);
  const Scalar _tmp1616 = _tmp1311 * _tmp1614 + _tmp1443 * _tmp1615;
  const Scalar _tmp1617 = _tmp1332 * _tmp1616 - _tmp1333 * _tmp1616 + _tmp1615 * _tmp670;
  const Scalar _tmp1618 =
      -_tmp1261 * _tmp1584 + _tmp1261 * _tmp1587 + _tmp1262 * _tmp1587 -
      _tmp1585 * priors_0_1_sqrt_info(2, 1) + _tmp1588 * priors_0_1_sqrt_info(2, 2) +
      _tmp1590 * priors_0_1_sqrt_info(2, 0) + _tmp1596 * priors_0_1_sqrt_info(2, 1) +
      _tmp1597 * priors_0_1_sqrt_info(2, 1) - _tmp1598 * priors_0_1_sqrt_info(2, 0);
  const Scalar _tmp1619 = -_tmp1239 * _tmp1612 + _tmp1240 * _tmp1612 + _tmp1611 * _tmp190;
  const Scalar _tmp1620 = _tmp241 * (_tmp1556 * _tmp228 + _tmp1557 * _tmp230 + _tmp1558 * _tmp229);
  const Scalar _tmp1621 = _tmp237 * (_tmp1554 * _tmp230 + _tmp239);
  const Scalar _tmp1622 = _tmp1154 * _tmp1620 + _tmp1521 * _tmp1621;
  const Scalar _tmp1623 = _tmp1273 * _tmp1622 - _tmp1274 * _tmp1622 + _tmp1620 * _tmp250;
  const Scalar _tmp1624 = _tmp361 * (_tmp1556 * _tmp348 + _tmp1557 * _tmp349 + _tmp1558 * _tmp350);
  const Scalar _tmp1625 = _tmp357 * (_tmp1554 * _tmp349 + _tmp359);
  const Scalar _tmp1626 = _tmp1484 * _tmp1625 + _tmp1624 * _tmp984;
  const Scalar _tmp1627 = -_tmp1510 * _tmp1626 + _tmp1625 * _tmp370 + _tmp1626 * _tmp992;
  const Scalar _tmp1628 = _tmp687 * (_tmp1554 * _tmp679 + _tmp689);
  const Scalar _tmp1629 = _tmp691 * (_tmp1556 * _tmp678 + _tmp1557 * _tmp679 + _tmp1558 * _tmp680);
  const Scalar _tmp1630 = _tmp1043 * _tmp1629 + _tmp1370 * _tmp1628;
  const Scalar _tmp1631 = -_tmp1243 * _tmp1630 + _tmp1244 * _tmp1630 + _tmp1629 * _tmp700;
  const Scalar _tmp1632 = _tmp327 * (_tmp1554 * _tmp319 + _tmp329);
  const Scalar _tmp1633 = _tmp331 * (_tmp1556 * _tmp318 + _tmp1557 * _tmp319 + _tmp1558 * _tmp320);
  const Scalar _tmp1634 = _tmp1030 * _tmp1633 + _tmp1476 * _tmp1632;
  const Scalar _tmp1635 = -_tmp1036 * _tmp1634 + _tmp1038 * _tmp1634 + _tmp1632 * _tmp340;
  const Scalar _tmp1636 = _tmp1158 * _tmp1622 - _tmp1161 * _tmp1622 + _tmp1621 * _tmp250;
  const Scalar _tmp1637 = _tmp627 * (_tmp1554 * _tmp620 + _tmp629);
  const Scalar _tmp1638 = _tmp631 * (_tmp1556 * _tmp618 + _tmp1557 * _tmp620 + _tmp1558 * _tmp619);
  const Scalar _tmp1639 = _tmp1209 * _tmp1638 + _tmp1539 * _tmp1637;
  const Scalar _tmp1640 = _tmp1299 * _tmp1639;
  const Scalar _tmp1641 = -_tmp1211 * _tmp1640 + _tmp1215 * _tmp1640 + _tmp1638 * _tmp640;
  const Scalar _tmp1642 = _tmp1267 * _tmp1564 - _tmp1388 * _tmp1564 + _tmp1563 * _tmp430;
  const Scalar _tmp1643 = _tmp541 * (_tmp1556 * _tmp528 + _tmp1557 * _tmp530 + _tmp1558 * _tmp529);
  const Scalar _tmp1644 = _tmp537 * (_tmp1554 * _tmp530 + _tmp539);
  const Scalar _tmp1645 = _tmp1000 * _tmp1643 + _tmp1534 * _tmp1644;
  const Scalar _tmp1646 = -_tmp1258 * _tmp1645 + _tmp1259 * _tmp1645 + _tmp1643 * _tmp550;
  const Scalar _tmp1647 = _tmp571 * (_tmp1556 * _tmp558 + _tmp1557 * _tmp559 + _tmp1558 * _tmp560);
  const Scalar _tmp1648 = _tmp567 * (_tmp1554 * _tmp559 + _tmp569);
  const Scalar _tmp1649 = _tmp1516 * _tmp1648 + _tmp1647 * _tmp932;
  const Scalar _tmp1650 = _tmp1647 * _tmp580 - _tmp1649 * _tmp936 + _tmp1649 * _tmp940;
  const Scalar _tmp1651 = _tmp507 * (_tmp1554 * _tmp499 + _tmp509);
  const Scalar _tmp1652 = _tmp511 * (_tmp1556 * _tmp498 + _tmp1557 * _tmp499 + _tmp1558 * _tmp500);
  const Scalar _tmp1653 = _tmp1376 * _tmp1651 + _tmp1652 * _tmp911;
  const Scalar _tmp1654 = _tmp1651 * _tmp520 - _tmp1653 * _tmp915 + _tmp1653 * _tmp917;
  const Scalar _tmp1655 = -_tmp1336 * _tmp1608 + _tmp1337 * _tmp1608 + _tmp1607 * _tmp490;
  const Scalar _tmp1656 = _tmp1277 * _tmp1634 - _tmp1278 * _tmp1634 + _tmp1633 * _tmp340;
  const Scalar _tmp1657 =
      _tmp1171 * _tmp1571 - _tmp1171 * _tmp1574 + _tmp1572 * priors_1_0_sqrt_info(3, 0) -
      _tmp1573 * priors_1_0_sqrt_info(3, 1) + _tmp1575 * priors_1_0_sqrt_info(3, 3) +
      _tmp1576 * priors_1_0_sqrt_info(3, 4) + _tmp1577 * priors_1_0_sqrt_info(3, 1) +
      _tmp1578 * priors_1_0_sqrt_info(3, 1) + _tmp1579 * priors_1_0_sqrt_info(3, 2) +
      _tmp1580 * priors_1_0_sqrt_info(3, 2) - _tmp1581 * priors_1_0_sqrt_info(3, 2);
  const Scalar _tmp1658 = _tmp391 * (_tmp1556 * _tmp378 + _tmp1557 * _tmp379 + _tmp1558 * _tmp380);
  const Scalar _tmp1659 = _tmp387 * (_tmp1554 * _tmp379 + _tmp389);
  const Scalar _tmp1660 = _tmp1122 * _tmp1658 + _tmp1450 * _tmp1659;
  const Scalar _tmp1661 = _tmp1128 * _tmp1660 - _tmp1130 * _tmp1660 + _tmp1658 * _tmp400;
  const Scalar _tmp1662 = _tmp297 * (_tmp1554 * _tmp290 + _tmp299);
  const Scalar _tmp1663 = _tmp301 * (_tmp1556 * _tmp288 + _tmp1557 * _tmp290 + _tmp1558 * _tmp289);
  const Scalar _tmp1664 = _tmp1192 * _tmp1663 + _tmp1434 * _tmp1662;
  const Scalar _tmp1665 = _tmp1283 * _tmp1664 - _tmp1284 * _tmp1664 + _tmp1662 * _tmp310;
  const Scalar _tmp1666 = _tmp1652 * _tmp520 - _tmp1653 * _tmp923 + _tmp1653 * _tmp924;
  const Scalar _tmp1667 = _tmp1048 * _tmp1630 - _tmp1050 * _tmp1630 + _tmp1628 * _tmp700;
  const Scalar _tmp1668 = _tmp271 * (_tmp1556 * _tmp258 + _tmp1557 * _tmp259 + _tmp1558 * _tmp260);
  const Scalar _tmp1669 = _tmp267 * (_tmp1554 * _tmp259 + _tmp269);
  const Scalar _tmp1670 = _tmp1017 * _tmp1668 + _tmp1429 * _tmp1669;
  const Scalar _tmp1671 = -_tmp1270 * _tmp1670 + _tmp1271 * _tmp1670 + _tmp1668 * _tmp280;
  const Scalar _tmp1672 = _tmp1253 * _tmp1560 - _tmp1470 * _tmp1560 + _tmp1555 * _tmp610;
  const Scalar _tmp1673 = _tmp207 * (_tmp1554 * _tmp199 + _tmp209);
  const Scalar _tmp1674 = _tmp211 * (_tmp1556 * _tmp198 + _tmp1557 * _tmp199 + _tmp1558 * _tmp200);
  const Scalar _tmp1675 = _tmp1399 * _tmp1673 + _tmp1674 * _tmp948;
  const Scalar _tmp1676 = _tmp1674 * _tmp220 - _tmp1675 * _tmp952 + _tmp1675 * _tmp954;
  const Scalar _tmp1677 =
      _tmp1571 * _tmp956 + _tmp1572 * priors_1_0_sqrt_info(0, 0) -
      _tmp1573 * priors_1_0_sqrt_info(0, 1) - _tmp1574 * _tmp956 +
      _tmp1575 * priors_1_0_sqrt_info(0, 3) + _tmp1576 * priors_1_0_sqrt_info(0, 4) +
      _tmp1577 * priors_1_0_sqrt_info(0, 1) + _tmp1578 * priors_1_0_sqrt_info(0, 1) +
      _tmp1579 * priors_1_0_sqrt_info(0, 2) + _tmp1580 * priors_1_0_sqrt_info(0, 2) -
      _tmp1581 * priors_1_0_sqrt_info(0, 2);
  const Scalar _tmp1678 = -_tmp1248 * _tmp1649 + _tmp1250 * _tmp1649 + _tmp1648 * _tmp580;
  const Scalar _tmp1679 =
      _tmp1200 * _tmp1587 + _tmp1201 * _tmp1583 - _tmp1585 * priors_0_1_sqrt_info(5, 1) -
      _tmp1586 * priors_0_1_sqrt_info(5, 2) + _tmp1588 * priors_0_1_sqrt_info(5, 2) +
      _tmp1590 * priors_0_1_sqrt_info(5, 0) + _tmp1596 * priors_0_1_sqrt_info(5, 1) +
      _tmp1597 * priors_0_1_sqrt_info(5, 1) - _tmp1598 * priors_0_1_sqrt_info(5, 0);
  const Scalar _tmp1680 = _tmp1168 * _tmp1603 - _tmp1169 * _tmp1603 + _tmp1601 * _tmp730;
  const Scalar _tmp1681 = _tmp1021 * _tmp1670 - _tmp1024 * _tmp1670 + _tmp1669 * _tmp280;
  const Scalar _tmp1682 = _tmp1325 * _tmp1675 - _tmp1327 * _tmp1675 + _tmp1673 * _tmp220;
  const Scalar _tmp1683 = -_tmp1196 * _tmp1664 + _tmp1198 * _tmp1664 + _tmp1663 * _tmp310;
  const Scalar _tmp1684 = -_tmp1004 * _tmp1645 + _tmp1009 * _tmp1645 + _tmp1644 * _tmp550;
  const Scalar _tmp1685 = -_tmp1099 * _tmp1568 + _tmp1101 * _tmp1568 + _tmp1566 * _tmp760;
  const Scalar _tmp1686 = -_tmp1213 * _tmp1639 + _tmp1216 * _tmp1639 + _tmp1637 * _tmp640;
  const Scalar _tmp1687 = _tmp1255 * _tmp1626;
  const Scalar _tmp1688 = _tmp1624 * _tmp370 - _tmp1687 * _tmp988 + _tmp1687 * _tmp991;
  const Scalar _tmp1689 =
      _tmp1163 * _tmp1571 - _tmp1163 * _tmp1574 + _tmp1164 * _tmp1570 - _tmp1165 * _tmp1570 +
      _tmp1572 * priors_1_0_sqrt_info(2, 0) + _tmp1575 * priors_1_0_sqrt_info(2, 3) +
      _tmp1576 * priors_1_0_sqrt_info(2, 4) + _tmp1578 * priors_1_0_sqrt_info(2, 1) +
      _tmp1579 * priors_1_0_sqrt_info(2, 2) + _tmp1580 * priors_1_0_sqrt_info(2, 2) -
      _tmp1581 * priors_1_0_sqrt_info(2, 2);
  const Scalar _tmp1690 =
      _tmp1084 * _tmp1587 + _tmp1086 * _tmp1583 - _tmp1585 * priors_0_1_sqrt_info(4, 1) -
      _tmp1586 * priors_0_1_sqrt_info(4, 2) + _tmp1588 * priors_0_1_sqrt_info(4, 2) +
      _tmp1590 * priors_0_1_sqrt_info(4, 0) + _tmp1596 * priors_0_1_sqrt_info(4, 1) +
      _tmp1597 * priors_0_1_sqrt_info(4, 1) - _tmp1598 * priors_0_1_sqrt_info(4, 0);
  const Scalar _tmp1691 = _tmp1219 * _tmp1660 - _tmp1220 * _tmp1660 + _tmp1659 * _tmp400;
  const Scalar _tmp1692 = _tmp451 * (_tmp1556 * _tmp438 + _tmp1557 * _tmp439 + _tmp1558 * _tmp440);
  const Scalar _tmp1693 = _tmp447 * (_tmp1554 * _tmp439 + _tmp449);
  const Scalar _tmp1694 = _tmp1291 * _tmp1692 + _tmp1424 * _tmp1693;
  const Scalar _tmp1695 = _tmp1296 * _tmp1694;
  const Scalar _tmp1696 = -_tmp1293 * _tmp1695 + _tmp1295 * _tmp1694 + _tmp1692 * _tmp460;
  const Scalar _tmp1697 = _tmp1316 * _tmp1616 - _tmp1318 * _tmp1616 + _tmp1614 * _tmp670;
  const Scalar _tmp1698 =
      _tmp1571 * _tmp976 + _tmp1571 * _tmp977 + _tmp1572 * priors_1_0_sqrt_info(1, 0) -
      _tmp1573 * priors_1_0_sqrt_info(1, 1) - _tmp1574 * _tmp976 - _tmp1574 * _tmp977 +
      _tmp1575 * priors_1_0_sqrt_info(1, 3) + _tmp1576 * priors_1_0_sqrt_info(1, 4) +
      _tmp1577 * priors_1_0_sqrt_info(1, 1) + _tmp1578 * priors_1_0_sqrt_info(1, 1) +
      _tmp1580 * priors_1_0_sqrt_info(1, 2);
  const Scalar _tmp1699 = -_tmp1320 * _tmp1695 + _tmp1321 * _tmp1694 + _tmp1693 * _tmp460;
  const Scalar _tmp1700 = _tmp241 * landmarks_2_;
  const Scalar _tmp1701 = _tmp1152 * landmarks_2_;
  const Scalar _tmp1702 = -_tmp102 * _tmp1700 + _tmp110 * _tmp1701;
  const Scalar _tmp1703 = _tmp237 * landmarks_2_;
  const Scalar _tmp1704 = _tmp1150 * landmarks_2_;
  const Scalar _tmp1705 = _tmp110 * _tmp1704 - _tmp1703 * _tmp79;
  const Scalar _tmp1706 = _tmp1154 * _tmp1702 + _tmp1521 * _tmp1705;
  const Scalar _tmp1707 = _tmp1160 * _tmp1706;
  const Scalar _tmp1708 = _tmp1273 * _tmp1706 + _tmp1702 * _tmp250 - _tmp1707 * _tmp242;
  const Scalar _tmp1709 = _tmp747 * landmarks_19_;
  const Scalar _tmp1710 = _tmp110 * landmarks_19_;
  const Scalar _tmp1711 = _tmp1489 * _tmp1710 - _tmp1709 * _tmp79;
  const Scalar _tmp1712 = _tmp751 * landmarks_19_;
  const Scalar _tmp1713 = -_tmp102 * _tmp1712 + _tmp1091 * _tmp1710;
  const Scalar _tmp1714 = _tmp1093 * _tmp1713 + _tmp1491 * _tmp1711;
  const Scalar _tmp1715 = _tmp1097 * _tmp1714;
  const Scalar _tmp1716 = _tmp1100 * _tmp1714;
  const Scalar _tmp1717 = -_tmp1183 * _tmp1715 + _tmp1183 * _tmp1716 + _tmp1711 * _tmp760;
  const Scalar _tmp1718 = _tmp110 * landmarks_13_;
  const Scalar _tmp1719 = _tmp571 * landmarks_13_;
  const Scalar _tmp1720 = -_tmp102 * _tmp1719 + _tmp1718 * _tmp930;
  const Scalar _tmp1721 = _tmp567 * landmarks_13_;
  const Scalar _tmp1722 = _tmp1246 * _tmp1718 - _tmp1721 * _tmp79;
  const Scalar _tmp1723 =
      (Scalar(1) / Scalar(2)) * _tmp1516 * _tmp1722 + (Scalar(1) / Scalar(2)) * _tmp1720 * _tmp932;
  const Scalar _tmp1724 = _tmp1723 * _tmp572;
  const Scalar _tmp1725 = _tmp1720 * _tmp580 - _tmp1724 * _tmp934 + _tmp1724 * _tmp939;
  const Scalar _tmp1726 = _tmp3 * priors_0_1_sqrt_info(5, 4) + _tmp50 * priors_0_1_sqrt_info(5, 5) +
                          _tmp60 * priors_0_1_sqrt_info(5, 3);
  const Scalar _tmp1727 = _tmp717 * landmarks_18_;
  const Scalar _tmp1728 = _tmp1501 * landmarks_18_;
  const Scalar _tmp1729 = _tmp110 * _tmp1728 - _tmp1727 * _tmp79;
  const Scalar _tmp1730 = _tmp721 * landmarks_18_;
  const Scalar _tmp1731 = _tmp1135 * landmarks_18_;
  const Scalar _tmp1732 = -_tmp102 * _tmp1730 + _tmp110 * _tmp1731;
  const Scalar _tmp1733 = _tmp1137 * _tmp1732 + _tmp1503 * _tmp1729;
  const Scalar _tmp1734 = _tmp1168 * _tmp1733 - _tmp1169 * _tmp1733 + _tmp1729 * _tmp730;
  const Scalar _tmp1735 = -_tmp1098 * _tmp1715 + _tmp1098 * _tmp1716 + _tmp1713 * _tmp760;
  const Scalar _tmp1736 = _tmp3 * priors_0_1_sqrt_info(2, 4) + _tmp50 * priors_0_1_sqrt_info(2, 5) +
                          _tmp60 * priors_0_1_sqrt_info(2, 3);
  const Scalar _tmp1737 = _tmp110 * landmarks_12_;
  const Scalar _tmp1738 = _tmp537 * landmarks_12_;
  const Scalar _tmp1739 = _tmp1005 * _tmp1737 - _tmp1738 * _tmp79;
  const Scalar _tmp1740 = _tmp541 * landmarks_12_;
  const Scalar _tmp1741 = -_tmp102 * _tmp1740 + _tmp1737 * _tmp998;
  const Scalar _tmp1742 = _tmp1000 * _tmp1741 + _tmp1534 * _tmp1739;
  const Scalar _tmp1743 = -_tmp1258 * _tmp1742 + _tmp1259 * _tmp1742 + _tmp1741 * _tmp550;
  const Scalar _tmp1744 = _tmp507 * landmarks_11_;
  const Scalar _tmp1745 = _tmp110 * landmarks_11_;
  const Scalar _tmp1746 = -_tmp1744 * _tmp79 + _tmp1745 * _tmp920;
  const Scalar _tmp1747 = _tmp511 * landmarks_11_;
  const Scalar _tmp1748 = -_tmp102 * _tmp1747 + _tmp1745 * _tmp909;
  const Scalar _tmp1749 = _tmp1376 * _tmp1746 + _tmp1748 * _tmp911;
  const Scalar _tmp1750 = _tmp1748 * _tmp520 - _tmp1749 * _tmp923 + _tmp1749 * _tmp924;
  const Scalar _tmp1751 = -_tmp1004 * _tmp1742 + _tmp1009 * _tmp1742 + _tmp1739 * _tmp550;
  const Scalar _tmp1752 = _tmp3 * priors_0_1_sqrt_info(4, 4) + _tmp50 * priors_0_1_sqrt_info(4, 5) +
                          _tmp60 * priors_0_1_sqrt_info(4, 3);
  const Scalar _tmp1753 = _tmp982 * landmarks_6_;
  const Scalar _tmp1754 = _tmp361 * landmarks_6_;
  const Scalar _tmp1755 = -_tmp102 * _tmp1754 + _tmp110 * _tmp1753;
  const Scalar _tmp1756 = _tmp357 * landmarks_6_;
  const Scalar _tmp1757 = _tmp1482 * landmarks_6_;
  const Scalar _tmp1758 = _tmp110 * _tmp1757 - _tmp1756 * _tmp79;
  const Scalar _tmp1759 = _tmp1484 * _tmp1758 + _tmp1755 * _tmp984;
  const Scalar _tmp1760 = _tmp1256 * _tmp1759 - _tmp1486 * _tmp1759 + _tmp1755 * _tmp370;
  const Scalar _tmp1761 = -_tmp1510 * _tmp1759 + _tmp1758 * _tmp370 + _tmp1759 * _tmp992;
  const Scalar _tmp1762 = _tmp1026 * _tmp1474;
  const Scalar _tmp1763 = _tmp1762 * landmarks_5_;
  const Scalar _tmp1764 = _tmp327 * landmarks_5_;
  const Scalar _tmp1765 = _tmp110 * _tmp1763 - _tmp1764 * _tmp79;
  const Scalar _tmp1766 = _tmp331 * landmarks_5_;
  const Scalar _tmp1767 = _tmp1026 * _tmp1028 * landmarks_5_;
  const Scalar _tmp1768 = -_tmp102 * _tmp1766 + _tmp110 * _tmp1767;
  const Scalar _tmp1769 = _tmp1030 * _tmp1768 + _tmp1476 * _tmp1765;
  const Scalar _tmp1770 = -_tmp1036 * _tmp1769 + _tmp1038 * _tmp1769 + _tmp1765 * _tmp340;
  const Scalar _tmp1771 = _tmp110 * landmarks_0_;
  const Scalar _tmp1772 = _tmp169 * landmarks_0_;
  const Scalar _tmp1773 = _tmp1237 * _tmp1771 - _tmp1772 * _tmp79;
  const Scalar _tmp1774 = _tmp173 * landmarks_0_;
  const Scalar _tmp1775 = -_tmp102 * _tmp1774 + _tmp1106 * _tmp1771;
  const Scalar _tmp1776 = _tmp1109 * _tmp1775 + _tmp1462 * _tmp1773;
  const Scalar _tmp1777 = -_tmp1239 * _tmp1776 + _tmp1240 * _tmp1776 + _tmp1773 * _tmp190;
  const Scalar _tmp1778 = _tmp297 * landmarks_4_;
  const Scalar _tmp1779 = _tmp110 * landmarks_4_;
  const Scalar _tmp1780 = _tmp1281 * _tmp1779 - _tmp1778 * _tmp79;
  const Scalar _tmp1781 = _tmp1188 * _tmp1190;
  const Scalar _tmp1782 = _tmp301 * landmarks_4_;
  const Scalar _tmp1783 = -_tmp102 * _tmp1782 + _tmp1779 * _tmp1781;
  const Scalar _tmp1784 = _tmp1192 * _tmp1783 + _tmp1434 * _tmp1780;
  const Scalar _tmp1785 = -_tmp1196 * _tmp1784 + _tmp1198 * _tmp1784 + _tmp1783 * _tmp310;
  const Scalar _tmp1786 = _tmp1207 * landmarks_15_;
  const Scalar _tmp1787 = _tmp631 * landmarks_15_;
  const Scalar _tmp1788 = -_tmp102 * _tmp1787 + _tmp110 * _tmp1786;
  const Scalar _tmp1789 = _tmp627 * landmarks_15_;
  const Scalar _tmp1790 = _tmp1214 * landmarks_15_;
  const Scalar _tmp1791 = _tmp110 * _tmp1790 - _tmp1789 * _tmp79;
  const Scalar _tmp1792 = _tmp1209 * _tmp1788 + _tmp1539 * _tmp1791;
  const Scalar _tmp1793 = _tmp1300 * _tmp1792 - _tmp1301 * _tmp1792 + _tmp1788 * _tmp640;
  const Scalar _tmp1794 = _tmp74 - 1;
  const Scalar _tmp1795 = _tmp1794 + _tmp77;
  const Scalar _tmp1796 = _tmp1366 * priors_1_0_sqrt_info(1, 5) +
                          _tmp1795 * priors_1_0_sqrt_info(1, 3) +
                          _tmp882 * priors_1_0_sqrt_info(1, 4);
  const Scalar _tmp1797 = _tmp3 * priors_0_1_sqrt_info(1, 4) + _tmp50 * priors_0_1_sqrt_info(1, 5) +
                          _tmp60 * priors_0_1_sqrt_info(1, 3);
  const Scalar _tmp1798 = _tmp387 * landmarks_7_;
  const Scalar _tmp1799 = _tmp1448 * landmarks_7_;
  const Scalar _tmp1800 = _tmp110 * _tmp1799 - _tmp1798 * _tmp79;
  const Scalar _tmp1801 = _tmp1120 * landmarks_7_;
  const Scalar _tmp1802 = _tmp391 * landmarks_7_;
  const Scalar _tmp1803 = -_tmp102 * _tmp1802 + _tmp110 * _tmp1801;
  const Scalar _tmp1804 = _tmp1122 * _tmp1803 + _tmp1450 * _tmp1800;
  const Scalar _tmp1805 = _tmp1219 * _tmp1804 - _tmp1220 * _tmp1804 + _tmp1800 * _tmp400;
  const Scalar _tmp1806 = _tmp1277 * _tmp1769 - _tmp1278 * _tmp1769 + _tmp1768 * _tmp340;
  const Scalar _tmp1807 = _tmp1366 * priors_1_0_sqrt_info(0, 5) +
                          _tmp1795 * priors_1_0_sqrt_info(0, 3) +
                          _tmp882 * priors_1_0_sqrt_info(0, 4);
  const Scalar _tmp1808 = _tmp1158 * _tmp1706 + _tmp1705 * _tmp250 - _tmp1707 * _tmp238;
  const Scalar _tmp1809 = _tmp1111 * _tmp1776;
  const Scalar _tmp1810 = _tmp1112 * _tmp1809 - _tmp1114 * _tmp1809 + _tmp1775 * _tmp190;
  const Scalar _tmp1811 = _tmp1227 * landmarks_8_;
  const Scalar _tmp1812 = _tmp421 * landmarks_8_;
  const Scalar _tmp1813 = -_tmp102 * _tmp1812 + _tmp110 * _tmp1811;
  const Scalar _tmp1814 = _tmp1384 * landmarks_8_;
  const Scalar _tmp1815 = _tmp417 * landmarks_8_;
  const Scalar _tmp1816 = _tmp110 * _tmp1814 - _tmp1815 * _tmp79;
  const Scalar _tmp1817 = _tmp1229 * _tmp1813 + _tmp1386 * _tmp1816;
  const Scalar _tmp1818 = _tmp1267 * _tmp1817 - _tmp1388 * _tmp1817 + _tmp1816 * _tmp430;
  const Scalar _tmp1819 = _tmp1366 * priors_1_0_sqrt_info(4, 5) +
                          _tmp1795 * priors_1_0_sqrt_info(4, 3) +
                          _tmp882 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp1820 = _tmp1466 * landmarks_14_;
  const Scalar _tmp1821 = _tmp597 * landmarks_14_;
  const Scalar _tmp1822 = _tmp110 * _tmp1820 - _tmp1821 * _tmp79;
  const Scalar _tmp1823 = _tmp892 * landmarks_14_;
  const Scalar _tmp1824 = _tmp601 * landmarks_14_;
  const Scalar _tmp1825 = -_tmp102 * _tmp1824 + _tmp110 * _tmp1823;
  const Scalar _tmp1826 = _tmp1468 * _tmp1822 + _tmp1825 * _tmp897;
  const Scalar _tmp1827 = _tmp1252 * _tmp1826;
  const Scalar _tmp1828 = _tmp1822 * _tmp610 - _tmp1827 * _tmp899 + _tmp1827 * _tmp902;
  const Scalar _tmp1829 = _tmp211 * landmarks_1_;
  const Scalar _tmp1830 = _tmp110 * landmarks_1_;
  const Scalar _tmp1831 = -_tmp102 * _tmp1829 + _tmp1830 * _tmp946;
  const Scalar _tmp1832 = _tmp207 * landmarks_1_;
  const Scalar _tmp1833 = _tmp1326 * _tmp1830 - _tmp1832 * _tmp79;
  const Scalar _tmp1834 = _tmp1399 * _tmp1833 + _tmp1831 * _tmp948;
  const Scalar _tmp1835 = _tmp1831 * _tmp220 - _tmp1834 * _tmp952 + _tmp1834 * _tmp954;
  const Scalar _tmp1836 = _tmp1231 * _tmp1817;
  const Scalar _tmp1837 = _tmp1232 * _tmp1836 - _tmp1234 * _tmp1836 + _tmp1813 * _tmp430;
  const Scalar _tmp1838 = _tmp1366 * priors_1_0_sqrt_info(3, 5) +
                          _tmp1795 * priors_1_0_sqrt_info(3, 3) +
                          _tmp882 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp1839 = _tmp1746 * _tmp520 - _tmp1749 * _tmp915 + _tmp1749 * _tmp917;
  const Scalar _tmp1840 = _tmp3 * priors_0_1_sqrt_info(0, 4) + _tmp50 * priors_0_1_sqrt_info(0, 5) +
                          _tmp60 * priors_0_1_sqrt_info(0, 3);
  const Scalar _tmp1841 = _tmp1325 * _tmp1834 - _tmp1327 * _tmp1834 + _tmp1833 * _tmp220;
  const Scalar _tmp1842 = _tmp1283 * _tmp1784 - _tmp1284 * _tmp1784 + _tmp1780 * _tmp310;
  const Scalar _tmp1843 = _tmp1128 * _tmp1804 - _tmp1130 * _tmp1804 + _tmp1803 * _tmp400;
  const Scalar _tmp1844 = _tmp477 * landmarks_10_;
  const Scalar _tmp1845 = _tmp110 * landmarks_10_;
  const Scalar _tmp1846 = _tmp918 * _tmp963;
  const Scalar _tmp1847 = -_tmp1844 * _tmp79 + _tmp1845 * _tmp1846;
  const Scalar _tmp1848 = _tmp481 * landmarks_10_;
  const Scalar _tmp1849 = -_tmp102 * _tmp1848 + _tmp1845 * _tmp966;
  const Scalar _tmp1850 = _tmp1456 * _tmp1847 + _tmp1849 * _tmp968;
  const Scalar _tmp1851 = -_tmp1336 * _tmp1850 + _tmp1337 * _tmp1850 + _tmp1847 * _tmp490;
  const Scalar _tmp1852 = _tmp110 * landmarks_16_;
  const Scalar _tmp1853 = _tmp661 * landmarks_16_;
  const Scalar _tmp1854 = -_tmp102 * _tmp1853 + _tmp1309 * _tmp1852;
  const Scalar _tmp1855 = _tmp657 * landmarks_16_;
  const Scalar _tmp1856 = _tmp1330 * _tmp1852 - _tmp1855 * _tmp79;
  const Scalar _tmp1857 = _tmp1311 * _tmp1854 + _tmp1443 * _tmp1856;
  const Scalar _tmp1858 = _tmp1316 * _tmp1857 - _tmp1318 * _tmp1857 + _tmp1854 * _tmp670;
  const Scalar _tmp1859 = _tmp1849 * _tmp490 + _tmp1850 * _tmp972 - _tmp1850 * _tmp974;
  const Scalar _tmp1860 = _tmp691 * landmarks_17_;
  const Scalar _tmp1861 = _tmp1360 * _tmp889 * landmarks_17_;
  const Scalar _tmp1862 = -_tmp102 * _tmp1860 + _tmp110 * _tmp1861;
  const Scalar _tmp1863 = _tmp1368 * landmarks_17_;
  const Scalar _tmp1864 = _tmp687 * landmarks_17_;
  const Scalar _tmp1865 = _tmp110 * _tmp1863 - _tmp1864 * _tmp79;
  const Scalar _tmp1866 = _tmp1043 * _tmp1862 + _tmp1370 * _tmp1865;
  const Scalar _tmp1867 = -_tmp1243 * _tmp1866 + _tmp1244 * _tmp1866 + _tmp1862 * _tmp700;
  const Scalar _tmp1868 = _tmp1141 * _tmp1733;
  const Scalar _tmp1869 = -_tmp1142 * _tmp1868 + _tmp1144 * _tmp1868 + _tmp1732 * _tmp730;
  const Scalar _tmp1870 = _tmp267 * landmarks_3_;
  const Scalar _tmp1871 = _tmp110 * landmarks_3_;
  const Scalar _tmp1872 = _tmp1022 * _tmp1871 - _tmp1870 * _tmp79;
  const Scalar _tmp1873 = _tmp271 * landmarks_3_;
  const Scalar _tmp1874 = _tmp1015 * _tmp1871 - _tmp102 * _tmp1873;
  const Scalar _tmp1875 = _tmp1017 * _tmp1874 + _tmp1429 * _tmp1872;
  const Scalar _tmp1876 = _tmp1021 * _tmp1875 - _tmp1024 * _tmp1875 + _tmp1872 * _tmp280;
  const Scalar _tmp1877 = -_tmp1479 * _tmp1826 + _tmp1825 * _tmp610 + _tmp1826 * _tmp903;
  const Scalar _tmp1878 = -_tmp1213 * _tmp1792 + _tmp1216 * _tmp1792 + _tmp1791 * _tmp640;
  const Scalar _tmp1879 = _tmp451 * landmarks_9_;
  const Scalar _tmp1880 = _tmp1438 * landmarks_9_;
  const Scalar _tmp1881 = -_tmp102 * _tmp1879 + _tmp110 * _tmp1880;
  const Scalar _tmp1882 = _tmp1422 * landmarks_9_;
  const Scalar _tmp1883 = _tmp447 * landmarks_9_;
  const Scalar _tmp1884 = _tmp110 * _tmp1882 - _tmp1883 * _tmp79;
  const Scalar _tmp1885 = _tmp1291 * _tmp1881 + _tmp1424 * _tmp1884;
  const Scalar _tmp1886 = _tmp1295 * _tmp1885 - _tmp1297 * _tmp1885 + _tmp1881 * _tmp460;
  const Scalar _tmp1887 = _tmp3 * priors_0_1_sqrt_info(3, 4) + _tmp50 * priors_0_1_sqrt_info(3, 5) +
                          _tmp60 * priors_0_1_sqrt_info(3, 3);
  const Scalar _tmp1888 = _tmp1320 * _tmp1885;
  const Scalar _tmp1889 = _tmp1294 * _tmp1888 - _tmp1296 * _tmp1888 + _tmp1884 * _tmp460;
  const Scalar _tmp1890 = _tmp1366 * priors_1_0_sqrt_info(2, 5) +
                          _tmp1795 * priors_1_0_sqrt_info(2, 3) +
                          _tmp882 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp1891 = -_tmp1247 * _tmp1723 + _tmp1249 * _tmp1723 * _tmp178 + _tmp1722 * _tmp580;
  const Scalar _tmp1892 = _tmp1331 * _tmp1857;
  const Scalar _tmp1893 = _tmp1315 * _tmp1892 - _tmp1317 * _tmp1892 + _tmp1856 * _tmp670;
  const Scalar _tmp1894 = _tmp1048 * _tmp1866 - _tmp1050 * _tmp1866 + _tmp1865 * _tmp700;
  const Scalar _tmp1895 = -_tmp1270 * _tmp1875 + _tmp1271 * _tmp1875 + _tmp1874 * _tmp280;
  const Scalar _tmp1896 = _tmp1366 * priors_1_0_sqrt_info(5, 5) +
                          _tmp1795 * priors_1_0_sqrt_info(5, 3) +
                          _tmp882 * priors_1_0_sqrt_info(5, 4);
  const Scalar _tmp1897 = _tmp108 * _tmp1814 - _tmp1815 * _tmp89;
  const Scalar _tmp1898 = _tmp108 * _tmp1811 - _tmp1812 * _tmp96;
  const Scalar _tmp1899 = _tmp1229 * _tmp1898 + _tmp1386 * _tmp1897;
  const Scalar _tmp1900 = _tmp1267 * _tmp1899 - _tmp1388 * _tmp1899 + _tmp1897 * _tmp430;
  const Scalar _tmp1901 = _tmp920 * landmarks_11_;
  const Scalar _tmp1902 = _tmp108 * _tmp1901 - _tmp1744 * _tmp89;
  const Scalar _tmp1903 = _tmp909 * landmarks_11_;
  const Scalar _tmp1904 = _tmp108 * _tmp1903 - _tmp1747 * _tmp96;
  const Scalar _tmp1905 = _tmp1376 * _tmp1902 + _tmp1904 * _tmp911;
  const Scalar _tmp1906 = _tmp1902 * _tmp520 - _tmp1905 * _tmp915 + _tmp1905 * _tmp917;
  const Scalar _tmp1907 = _tmp108 * _tmp1861 - _tmp1860 * _tmp96;
  const Scalar _tmp1908 = _tmp108 * _tmp1863 - _tmp1864 * _tmp89;
  const Scalar _tmp1909 = _tmp1043 * _tmp1907 + _tmp1370 * _tmp1908;
  const Scalar _tmp1910 = -_tmp1243 * _tmp1909 + _tmp1244 * _tmp1909 + _tmp1907 * _tmp700;
  const Scalar _tmp1911 = _tmp108 * landmarks_13_;
  const Scalar _tmp1912 = -_tmp1719 * _tmp96 + _tmp1911 * _tmp930;
  const Scalar _tmp1913 = _tmp1246 * _tmp1911 - _tmp1721 * _tmp89;
  const Scalar _tmp1914 = _tmp1516 * _tmp1913 + _tmp1912 * _tmp932;
  const Scalar _tmp1915 = _tmp1912 * _tmp580 - _tmp1914 * _tmp936 + _tmp1914 * _tmp940;
  const Scalar _tmp1916 = -_tmp1248 * _tmp1914 + _tmp1250 * _tmp1914 + _tmp1913 * _tmp580;
  const Scalar _tmp1917 = _tmp108 * landmarks_10_;
  const Scalar _tmp1918 = -_tmp1844 * _tmp89 + _tmp1846 * _tmp1917;
  const Scalar _tmp1919 = -_tmp1848 * _tmp96 + _tmp1917 * _tmp966;
  const Scalar _tmp1920 = _tmp1456 * _tmp1918 + _tmp1919 * _tmp968;
  const Scalar _tmp1921 = _tmp1919 * _tmp490 + _tmp1920 * _tmp972 - _tmp1920 * _tmp974;
  const Scalar _tmp1922 = _tmp108 * landmarks_3_;
  const Scalar _tmp1923 = _tmp1022 * _tmp1922 - _tmp1870 * _tmp89;
  const Scalar _tmp1924 = _tmp1015 * _tmp1922 - _tmp1873 * _tmp96;
  const Scalar _tmp1925 = _tmp1017 * _tmp1924 + _tmp1429 * _tmp1923;
  const Scalar _tmp1926 = -_tmp1270 * _tmp1925 + _tmp1271 * _tmp1925 + _tmp1924 * _tmp280;
  const Scalar _tmp1927 = _tmp51 * priors_0_1_sqrt_info(5, 5) +
                          _tmp59 * priors_0_1_sqrt_info(5, 3) + _tmp6 * priors_0_1_sqrt_info(5, 4);
  const Scalar _tmp1928 = _tmp51 * priors_0_1_sqrt_info(4, 5) +
                          _tmp59 * priors_0_1_sqrt_info(4, 3) + _tmp6 * priors_0_1_sqrt_info(4, 4);
  const Scalar _tmp1929 = _tmp108 * _tmp1763 - _tmp1764 * _tmp89;
  const Scalar _tmp1930 = _tmp108 * _tmp1767 - _tmp1766 * _tmp96;
  const Scalar _tmp1931 = _tmp1030 * _tmp1930 + _tmp1476 * _tmp1929;
  const Scalar _tmp1932 = -_tmp1036 * _tmp1931 + _tmp1038 * _tmp1931 + _tmp1929 * _tmp340;
  const Scalar _tmp1933 = _tmp108 * _tmp1820 - _tmp1821 * _tmp89;
  const Scalar _tmp1934 = _tmp108 * _tmp1823 - _tmp1824 * _tmp96;
  const Scalar _tmp1935 = _tmp1468 * _tmp1933 + _tmp1934 * _tmp897;
  const Scalar _tmp1936 = _tmp1935 * _tmp899;
  const Scalar _tmp1937 = _tmp1934 * _tmp610 + _tmp1935 * _tmp903 - _tmp1936 * _tmp894;
  const Scalar _tmp1938 = _tmp108 * _tmp1731 - _tmp1730 * _tmp96;
  const Scalar _tmp1939 = _tmp108 * _tmp1728 - _tmp1727 * _tmp89;
  const Scalar _tmp1940 = _tmp1137 * _tmp1938 + _tmp1503 * _tmp1939;
  const Scalar _tmp1941 = -_tmp1143 * _tmp1940 + _tmp1145 * _tmp1940 + _tmp1938 * _tmp730;
  const Scalar _tmp1942 = _tmp108 * _tmp1753 - _tmp1754 * _tmp96;
  const Scalar _tmp1943 = _tmp108 * _tmp1757 - _tmp1756 * _tmp89;
  const Scalar _tmp1944 = _tmp1484 * _tmp1943 + _tmp1942 * _tmp984;
  const Scalar _tmp1945 = _tmp1256 * _tmp1944 - _tmp1486 * _tmp1944 + _tmp1942 * _tmp370;
  const Scalar _tmp1946 = _tmp108 * landmarks_12_;
  const Scalar _tmp1947 = _tmp1005 * _tmp1946 - _tmp1738 * _tmp89;
  const Scalar _tmp1948 = -_tmp1740 * _tmp96 + _tmp1946 * _tmp998;
  const Scalar _tmp1949 = _tmp1000 * _tmp1948 + _tmp1534 * _tmp1947;
  const Scalar _tmp1950 = -_tmp1004 * _tmp1949 + _tmp1009 * _tmp1949 + _tmp1947 * _tmp550;
  const Scalar _tmp1951 = _tmp108 * _tmp1701 - _tmp1700 * _tmp96;
  const Scalar _tmp1952 = _tmp108 * _tmp1704 - _tmp1703 * _tmp89;
  const Scalar _tmp1953 = _tmp1154 * _tmp1951 + _tmp1521 * _tmp1952;
  const Scalar _tmp1954 = _tmp1273 * _tmp1953 - _tmp1274 * _tmp1953 + _tmp1951 * _tmp250;
  const Scalar _tmp1955 = _tmp51 * priors_0_1_sqrt_info(2, 5) +
                          _tmp59 * priors_0_1_sqrt_info(2, 3) + _tmp6 * priors_0_1_sqrt_info(2, 4);
  const Scalar _tmp1956 = _tmp1794 + _tmp94;
  const Scalar _tmp1957 = _tmp1362 * priors_1_0_sqrt_info(1, 5) +
                          _tmp1557 * priors_1_0_sqrt_info(1, 3) +
                          _tmp1956 * priors_1_0_sqrt_info(1, 4);
  const Scalar _tmp1958 = _tmp108 * landmarks_1_;
  const Scalar _tmp1959 = _tmp1326 * _tmp1958 - _tmp1832 * _tmp89;
  const Scalar _tmp1960 = -_tmp1829 * _tmp96 + _tmp1958 * _tmp946;
  const Scalar _tmp1961 = _tmp1399 * _tmp1959 + _tmp1960 * _tmp948;
  const Scalar _tmp1962 = _tmp1325 * _tmp1961 - _tmp1327 * _tmp1961 + _tmp1959 * _tmp220;
  const Scalar _tmp1963 = -_tmp1510 * _tmp1944 + _tmp1943 * _tmp370 + _tmp1944 * _tmp992;
  const Scalar _tmp1964 = _tmp1904 * _tmp520 - _tmp1905 * _tmp923 + _tmp1905 * _tmp924;
  const Scalar _tmp1965 = _tmp1048 * _tmp1909 - _tmp1050 * _tmp1909 + _tmp1908 * _tmp700;
  const Scalar _tmp1966 = _tmp1168 * _tmp1940 - _tmp1169 * _tmp1940 + _tmp1939 * _tmp730;
  const Scalar _tmp1967 = _tmp1362 * priors_1_0_sqrt_info(4, 5) +
                          _tmp1557 * priors_1_0_sqrt_info(4, 3) +
                          _tmp1956 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp1968 = _tmp108 * landmarks_15_;
  const Scalar _tmp1969 = _tmp1207 * _tmp1968 - _tmp1787 * _tmp96;
  const Scalar _tmp1970 = _tmp1214 * _tmp1968 - _tmp1789 * _tmp89;
  const Scalar _tmp1971 = _tmp1209 * _tmp1969 + _tmp1539 * _tmp1970;
  const Scalar _tmp1972 = _tmp1300 * _tmp1971 - _tmp1301 * _tmp1971 + _tmp1969 * _tmp640;
  const Scalar _tmp1973 = _tmp1362 * priors_1_0_sqrt_info(0, 5) +
                          _tmp1557 * priors_1_0_sqrt_info(0, 3) +
                          _tmp1956 * priors_1_0_sqrt_info(0, 4);
  const Scalar _tmp1974 = _tmp1233 * _tmp1899 - _tmp1390 * _tmp1899 + _tmp1898 * _tmp430;
  const Scalar _tmp1975 = _tmp108 * _tmp1801 - _tmp1802 * _tmp96;
  const Scalar _tmp1976 = _tmp108 * _tmp1799 - _tmp1798 * _tmp89;
  const Scalar _tmp1977 = _tmp1122 * _tmp1975 + _tmp1450 * _tmp1976;
  const Scalar _tmp1978 = _tmp1126 * _tmp1977;
  const Scalar _tmp1979 = _tmp1127 * _tmp1978 - _tmp1129 * _tmp1978 + _tmp1975 * _tmp400;
  const Scalar _tmp1980 = _tmp108 * _tmp1882 - _tmp1883 * _tmp89;
  const Scalar _tmp1981 = _tmp108 * _tmp1880 - _tmp1879 * _tmp96;
  const Scalar _tmp1982 = _tmp1291 * _tmp1981 + _tmp1424 * _tmp1980;
  const Scalar _tmp1983 = _tmp1321 * _tmp1982 - _tmp1322 * _tmp1982 + _tmp1980 * _tmp460;
  const Scalar _tmp1984 = -_tmp1213 * _tmp1971 + _tmp1216 * _tmp1971 + _tmp1970 * _tmp640;
  const Scalar _tmp1985 = -_tmp1336 * _tmp1920 + _tmp1337 * _tmp1920 + _tmp1918 * _tmp490;
  const Scalar _tmp1986 = _tmp1106 * landmarks_0_;
  const Scalar _tmp1987 = _tmp108 * _tmp1986 - _tmp1774 * _tmp96;
  const Scalar _tmp1988 = _tmp1237 * landmarks_0_;
  const Scalar _tmp1989 = _tmp108 * _tmp1988 - _tmp1772 * _tmp89;
  const Scalar _tmp1990 = _tmp1109 * _tmp1987 + _tmp1462 * _tmp1989;
  const Scalar _tmp1991 = _tmp1113 * _tmp1990 - _tmp1115 * _tmp1990 + _tmp190 * _tmp1987;
  const Scalar _tmp1992 = _tmp51 * priors_0_1_sqrt_info(0, 5) +
                          _tmp59 * priors_0_1_sqrt_info(0, 3) + _tmp6 * priors_0_1_sqrt_info(0, 4);
  const Scalar _tmp1993 = _tmp51 * priors_0_1_sqrt_info(1, 5) +
                          _tmp59 * priors_0_1_sqrt_info(1, 3) + _tmp6 * priors_0_1_sqrt_info(1, 4);
  const Scalar _tmp1994 = _tmp108 * landmarks_4_;
  const Scalar _tmp1995 = _tmp1281 * _tmp1994 - _tmp1778 * _tmp89;
  const Scalar _tmp1996 = _tmp1781 * _tmp1994 - _tmp1782 * _tmp96;
  const Scalar _tmp1997 = _tmp1192 * _tmp1996 + _tmp1434 * _tmp1995;
  const Scalar _tmp1998 = _tmp1283 * _tmp1997 - _tmp1284 * _tmp1997 + _tmp1995 * _tmp310;
  const Scalar _tmp1999 = _tmp51 * priors_0_1_sqrt_info(3, 5) +
                          _tmp59 * priors_0_1_sqrt_info(3, 3) + _tmp6 * priors_0_1_sqrt_info(3, 4);
  const Scalar _tmp2000 = _tmp1194 * _tmp1997;
  const Scalar _tmp2001 = -_tmp1195 * _tmp2000 + _tmp1197 * _tmp2000 + _tmp1996 * _tmp310;
  const Scalar _tmp2002 = _tmp1362 * priors_1_0_sqrt_info(3, 5) +
                          _tmp1557 * priors_1_0_sqrt_info(3, 3) +
                          _tmp1956 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp2003 = _tmp108 * landmarks_16_;
  const Scalar _tmp2004 = _tmp1330 * _tmp2003 - _tmp1855 * _tmp89;
  const Scalar _tmp2005 = _tmp1309 * _tmp2003 - _tmp1853 * _tmp96;
  const Scalar _tmp2006 = _tmp1311 * _tmp2005 + _tmp1443 * _tmp2004;
  const Scalar _tmp2007 = _tmp1332 * _tmp2006 - _tmp1333 * _tmp2006 + _tmp2004 * _tmp670;
  const Scalar _tmp2008 = _tmp1961 * _tmp950;
  const Scalar _tmp2009 = _tmp1960 * _tmp220 - _tmp2008 * _tmp951 + _tmp2008 * _tmp953;
  const Scalar _tmp2010 = -_tmp1239 * _tmp1990 + _tmp1240 * _tmp1990 + _tmp190 * _tmp1989;
  const Scalar _tmp2011 = _tmp1316 * _tmp2006 - _tmp1318 * _tmp2006 + _tmp2005 * _tmp670;
  const Scalar _tmp2012 = _tmp1158 * _tmp1953 - _tmp1161 * _tmp1953 + _tmp1952 * _tmp250;
  const Scalar _tmp2013 = _tmp1021 * _tmp1925 - _tmp1024 * _tmp1925 + _tmp1923 * _tmp280;
  const Scalar _tmp2014 = _tmp1091 * landmarks_19_;
  const Scalar _tmp2015 = _tmp108 * _tmp2014 - _tmp1712 * _tmp96;
  const Scalar _tmp2016 = _tmp1489 * landmarks_19_;
  const Scalar _tmp2017 = _tmp108 * _tmp2016 - _tmp1709 * _tmp89;
  const Scalar _tmp2018 = _tmp1093 * _tmp2015 + _tmp1491 * _tmp2017;
  const Scalar _tmp2019 = _tmp1184 * _tmp2018 - _tmp1185 * _tmp2018 + _tmp2017 * _tmp760;
  const Scalar _tmp2020 = _tmp1295 * _tmp1982 - _tmp1297 * _tmp1982 + _tmp1981 * _tmp460;
  const Scalar _tmp2021 = -_tmp1099 * _tmp2018 + _tmp1101 * _tmp2018 + _tmp2015 * _tmp760;
  const Scalar _tmp2022 = _tmp1362 * priors_1_0_sqrt_info(2, 5) +
                          _tmp1557 * priors_1_0_sqrt_info(2, 3) +
                          _tmp1956 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp2023 = -_tmp1252 * _tmp1936 + _tmp1253 * _tmp1935 + _tmp1933 * _tmp610;
  const Scalar _tmp2024 = -_tmp1258 * _tmp1949 + _tmp1259 * _tmp1949 + _tmp1948 * _tmp550;
  const Scalar _tmp2025 = _tmp1277 * _tmp1931 - _tmp1278 * _tmp1931 + _tmp1930 * _tmp340;
  const Scalar _tmp2026 = _tmp1362 * priors_1_0_sqrt_info(5, 5) +
                          _tmp1557 * priors_1_0_sqrt_info(5, 3) +
                          _tmp1956 * priors_1_0_sqrt_info(5, 4);
  const Scalar _tmp2027 = _tmp1219 * _tmp1977 - _tmp1220 * _tmp1977 + _tmp1976 * _tmp400;
  const Scalar _tmp2028 = _tmp106 * _tmp1731 - _tmp1730 * _tmp99;
  const Scalar _tmp2029 = _tmp106 * _tmp1728 - _tmp1727 * _tmp85;
  const Scalar _tmp2030 = _tmp1137 * _tmp2028 + _tmp1503 * _tmp2029;
  const Scalar _tmp2031 = -_tmp1143 * _tmp2030 + _tmp1145 * _tmp2030 + _tmp2028 * _tmp730;
  const Scalar _tmp2032 = _tmp106 * _tmp1799 - _tmp1798 * _tmp85;
  const Scalar _tmp2033 = _tmp106 * _tmp1801 - _tmp1802 * _tmp99;
  const Scalar _tmp2034 = _tmp1122 * _tmp2033 + _tmp1450 * _tmp2032;
  const Scalar _tmp2035 = _tmp1219 * _tmp2034 - _tmp1220 * _tmp2034 + _tmp2032 * _tmp400;
  const Scalar _tmp2036 = _tmp106 * _tmp1861 - _tmp1860 * _tmp99;
  const Scalar _tmp2037 = _tmp106 * _tmp1863 - _tmp1864 * _tmp85;
  const Scalar _tmp2038 = _tmp1043 * _tmp2036 + _tmp1370 * _tmp2037;
  const Scalar _tmp2039 = _tmp1047 * _tmp2038;
  const Scalar _tmp2040 = _tmp1242 * _tmp2039 - _tmp1243 * _tmp2038 + _tmp2036 * _tmp700;
  const Scalar _tmp2041 = _tmp1128 * _tmp2034 - _tmp1130 * _tmp2034 + _tmp2033 * _tmp400;
  const Scalar _tmp2042 = _tmp106 * _tmp1701 - _tmp1700 * _tmp99;
  const Scalar _tmp2043 = _tmp106 * _tmp1704 - _tmp1703 * _tmp85;
  const Scalar _tmp2044 = _tmp1154 * _tmp2042 + _tmp1521 * _tmp2043;
  const Scalar _tmp2045 = _tmp1273 * _tmp2044 - _tmp1274 * _tmp2044 + _tmp2042 * _tmp250;
  const Scalar _tmp2046 = _tmp106 * _tmp1901 - _tmp1744 * _tmp85;
  const Scalar _tmp2047 = _tmp106 * _tmp1903 - _tmp1747 * _tmp99;
  const Scalar _tmp2048 = _tmp1376 * _tmp2046 + _tmp2047 * _tmp911;
  const Scalar _tmp2049 = _tmp2046 * _tmp520 - _tmp2048 * _tmp915 + _tmp2048 * _tmp917;
  const Scalar _tmp2050 = _tmp106 * landmarks_13_;
  const Scalar _tmp2051 = _tmp1246 * _tmp2050 - _tmp1721 * _tmp85;
  const Scalar _tmp2052 = -_tmp1719 * _tmp99 + _tmp2050 * _tmp930;
  const Scalar _tmp2053 = _tmp1516 * _tmp2051 + _tmp2052 * _tmp932;
  const Scalar _tmp2054 = -_tmp1248 * _tmp2053 + _tmp1250 * _tmp2053 + _tmp2051 * _tmp580;
  const Scalar _tmp2055 = _tmp106 * landmarks_10_;
  const Scalar _tmp2056 = -_tmp1844 * _tmp85 + _tmp1846 * _tmp2055;
  const Scalar _tmp2057 = -_tmp1848 * _tmp99 + _tmp2055 * _tmp966;
  const Scalar _tmp2058 = _tmp1456 * _tmp2056 + _tmp2057 * _tmp968;
  const Scalar _tmp2059 = -_tmp1336 * _tmp2058 + _tmp1337 * _tmp2058 + _tmp2056 * _tmp490;
  const Scalar _tmp2060 = _tmp10 * priors_0_1_sqrt_info(2, 4) +
                          _tmp47 * priors_0_1_sqrt_info(2, 5) + _tmp61 * priors_0_1_sqrt_info(2, 3);
  const Scalar _tmp2061 = _tmp1168 * _tmp2030 - _tmp1169 * _tmp2030 + _tmp2029 * _tmp730;
  const Scalar _tmp2062 = _tmp106 * landmarks_4_;
  const Scalar _tmp2063 = _tmp1281 * _tmp2062 - _tmp1778 * _tmp85;
  const Scalar _tmp2064 = _tmp1781 * _tmp2062 - _tmp1782 * _tmp99;
  const Scalar _tmp2065 = _tmp1192 * _tmp2064 + _tmp1434 * _tmp2063;
  const Scalar _tmp2066 = _tmp1283 * _tmp2065 - _tmp1284 * _tmp2065 + _tmp2063 * _tmp310;
  const Scalar _tmp2067 = _tmp106 * _tmp1988 - _tmp1772 * _tmp85;
  const Scalar _tmp2068 = _tmp106 * _tmp1986 - _tmp1774 * _tmp99;
  const Scalar _tmp2069 = _tmp1109 * _tmp2068 + _tmp1462 * _tmp2067;
  const Scalar _tmp2070 = -_tmp1239 * _tmp2069 + _tmp1240 * _tmp2069 + _tmp190 * _tmp2067;
  const Scalar _tmp2071 = _tmp10 * priors_0_1_sqrt_info(4, 4) +
                          _tmp47 * priors_0_1_sqrt_info(4, 5) + _tmp61 * priors_0_1_sqrt_info(4, 3);
  const Scalar _tmp2072 = _tmp10 * priors_0_1_sqrt_info(5, 4) +
                          _tmp47 * priors_0_1_sqrt_info(5, 5) + _tmp61 * priors_0_1_sqrt_info(5, 3);
  const Scalar _tmp2073 = _tmp106 * _tmp2014 - _tmp1712 * _tmp99;
  const Scalar _tmp2074 = _tmp106 * _tmp2016 - _tmp1709 * _tmp85;
  const Scalar _tmp2075 = _tmp1093 * _tmp2073 + _tmp1491 * _tmp2074;
  const Scalar _tmp2076 = -_tmp1099 * _tmp2075 + _tmp1101 * _tmp2075 + _tmp2073 * _tmp760;
  const Scalar _tmp2077 = _tmp106 * _tmp1882 - _tmp1883 * _tmp85;
  const Scalar _tmp2078 = _tmp106 * _tmp1880 - _tmp1879 * _tmp99;
  const Scalar _tmp2079 = _tmp1291 * _tmp2078 + _tmp1424 * _tmp2077;
  const Scalar _tmp2080 = _tmp1296 * _tmp2079;
  const Scalar _tmp2081 = -_tmp1320 * _tmp2080 + _tmp1321 * _tmp2079 + _tmp2077 * _tmp460;
  const Scalar _tmp2082 = _tmp106 * _tmp1757 - _tmp1756 * _tmp85;
  const Scalar _tmp2083 = _tmp106 * _tmp1753 - _tmp1754 * _tmp99;
  const Scalar _tmp2084 = _tmp1484 * _tmp2082 + _tmp2083 * _tmp984;
  const Scalar _tmp2085 = -_tmp1510 * _tmp2084 + _tmp2082 * _tmp370 + _tmp2084 * _tmp992;
  const Scalar _tmp2086 = _tmp1256 * _tmp2084 - _tmp1486 * _tmp2084 + _tmp2083 * _tmp370;
  const Scalar _tmp2087 = _tmp106 * landmarks_16_;
  const Scalar _tmp2088 = _tmp1309 * _tmp2087 - _tmp1853 * _tmp99;
  const Scalar _tmp2089 = _tmp1330 * _tmp2087 - _tmp1855 * _tmp85;
  const Scalar _tmp2090 = _tmp1311 * _tmp2088 + _tmp1443 * _tmp2089;
  const Scalar _tmp2091 = _tmp1316 * _tmp2090 - _tmp1318 * _tmp2090 + _tmp2088 * _tmp670;
  const Scalar _tmp2092 = _tmp2052 * _tmp580 - _tmp2053 * _tmp936 + _tmp2053 * _tmp940;
  const Scalar _tmp2093 = _tmp106 * landmarks_1_;
  const Scalar _tmp2094 = -_tmp1829 * _tmp99 + _tmp2093 * _tmp946;
  const Scalar _tmp2095 = _tmp1326 * _tmp2093 - _tmp1832 * _tmp85;
  const Scalar _tmp2096 = _tmp1399 * _tmp2095 + _tmp2094 * _tmp948;
  const Scalar _tmp2097 = _tmp1325 * _tmp2096 - _tmp1327 * _tmp2096 + _tmp2095 * _tmp220;
  const Scalar _tmp2098 = _tmp106 * _tmp1763 - _tmp1764 * _tmp85;
  const Scalar _tmp2099 = _tmp106 * _tmp1767 - _tmp1766 * _tmp99;
  const Scalar _tmp2100 = _tmp1030 * _tmp2099 + _tmp1476 * _tmp2098;
  const Scalar _tmp2101 = _tmp1277 * _tmp2100 - _tmp1278 * _tmp2100 + _tmp2099 * _tmp340;
  const Scalar _tmp2102 = -_tmp1293 * _tmp2080 + _tmp1295 * _tmp2079 + _tmp2078 * _tmp460;
  const Scalar _tmp2103 = _tmp106 * landmarks_14_;
  const Scalar _tmp2104 = _tmp1466 * _tmp2103 - _tmp1821 * _tmp85;
  const Scalar _tmp2105 = -_tmp1824 * _tmp99 + _tmp2103 * _tmp892;
  const Scalar _tmp2106 = _tmp1468 * _tmp2104 + _tmp2105 * _tmp897;
  const Scalar _tmp2107 = _tmp1253 * _tmp2106 - _tmp1470 * _tmp2106 + _tmp2104 * _tmp610;
  const Scalar _tmp2108 = _tmp1184 * _tmp2075 - _tmp1185 * _tmp2075 + _tmp2074 * _tmp760;
  const Scalar _tmp2109 = _tmp10 * priors_0_1_sqrt_info(1, 4) +
                          _tmp47 * priors_0_1_sqrt_info(1, 5) + _tmp61 * priors_0_1_sqrt_info(1, 3);
  const Scalar _tmp2110 = _tmp106 * landmarks_12_;
  const Scalar _tmp2111 = -_tmp1740 * _tmp99 + _tmp2110 * _tmp998;
  const Scalar _tmp2112 = _tmp1005 * _tmp2110 - _tmp1738 * _tmp85;
  const Scalar _tmp2113 =
      (Scalar(1) / Scalar(2)) * _tmp1000 * _tmp2111 + (Scalar(1) / Scalar(2)) * _tmp1534 * _tmp2112;
  const Scalar _tmp2114 = _tmp2113 * _tmp538;
  const Scalar _tmp2115 = _tmp1007 * _tmp178;
  const Scalar _tmp2116 = -_tmp1002 * _tmp2114 + _tmp2112 * _tmp550 + _tmp2114 * _tmp2115;
  const Scalar _tmp2117 = _tmp77 + _tmp94 - 1;
  const Scalar _tmp2118 = _tmp1558 * priors_1_0_sqrt_info(1, 3) +
                          _tmp2117 * priors_1_0_sqrt_info(1, 5) +
                          _tmp880 * priors_1_0_sqrt_info(1, 4);
  const Scalar _tmp2119 = _tmp2113 * _tmp542;
  const Scalar _tmp2120 = -_tmp1002 * _tmp2119 + _tmp2111 * _tmp550 + _tmp2115 * _tmp2119;
  const Scalar _tmp2121 = _tmp1558 * priors_1_0_sqrt_info(4, 3) +
                          _tmp2117 * priors_1_0_sqrt_info(4, 5) +
                          _tmp880 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp2122 = _tmp1558 * priors_1_0_sqrt_info(0, 3) +
                          _tmp2117 * priors_1_0_sqrt_info(0, 5) +
                          _tmp880 * priors_1_0_sqrt_info(0, 4);
  const Scalar _tmp2123 = _tmp1332 * _tmp2090 - _tmp1333 * _tmp2090 + _tmp2089 * _tmp670;
  const Scalar _tmp2124 = _tmp106 * landmarks_3_;
  const Scalar _tmp2125 = _tmp1015 * _tmp2124 - _tmp1873 * _tmp99;
  const Scalar _tmp2126 = _tmp1022 * _tmp2124 - _tmp1870 * _tmp85;
  const Scalar _tmp2127 = _tmp1017 * _tmp2125 + _tmp1429 * _tmp2126;
  const Scalar _tmp2128 = -_tmp1270 * _tmp2127 + _tmp1271 * _tmp2127 + _tmp2125 * _tmp280;
  const Scalar _tmp2129 = _tmp106 * _tmp1786 - _tmp1787 * _tmp99;
  const Scalar _tmp2130 = _tmp106 * _tmp1790 - _tmp1789 * _tmp85;
  const Scalar _tmp2131 = _tmp1209 * _tmp2129 + _tmp1539 * _tmp2130;
  const Scalar _tmp2132 = _tmp1300 * _tmp2131 - _tmp1301 * _tmp2131 + _tmp2129 * _tmp640;
  const Scalar _tmp2133 = _tmp2047 * _tmp520 - _tmp2048 * _tmp923 + _tmp2048 * _tmp924;
  const Scalar _tmp2134 = -_tmp1036 * _tmp2100 + _tmp1038 * _tmp2100 + _tmp2098 * _tmp340;
  const Scalar _tmp2135 = _tmp106 * _tmp1814 - _tmp1815 * _tmp85;
  const Scalar _tmp2136 = _tmp106 * _tmp1811 - _tmp1812 * _tmp99;
  const Scalar _tmp2137 = _tmp1229 * _tmp2136 + _tmp1386 * _tmp2135;
  const Scalar _tmp2138 = _tmp1267 * _tmp2137 - _tmp1388 * _tmp2137 + _tmp2135 * _tmp430;
  const Scalar _tmp2139 = _tmp10 * priors_0_1_sqrt_info(0, 4) +
                          _tmp47 * priors_0_1_sqrt_info(0, 5) + _tmp61 * priors_0_1_sqrt_info(0, 3);
  const Scalar _tmp2140 = _tmp1233 * _tmp2137 - _tmp1390 * _tmp2137 + _tmp2136 * _tmp430;
  const Scalar _tmp2141 = _tmp2094 * _tmp220 - _tmp2096 * _tmp952 + _tmp2096 * _tmp954;
  const Scalar _tmp2142 = _tmp10 * priors_0_1_sqrt_info(3, 4) +
                          _tmp47 * priors_0_1_sqrt_info(3, 5) + _tmp61 * priors_0_1_sqrt_info(3, 3);
  const Scalar _tmp2143 = _tmp2057 * _tmp490 + _tmp2058 * _tmp972 - _tmp2058 * _tmp974;
  const Scalar _tmp2144 = -_tmp1213 * _tmp2131 + _tmp1216 * _tmp2131 + _tmp2130 * _tmp640;
  const Scalar _tmp2145 = _tmp1113 * _tmp2069 - _tmp1115 * _tmp2069 + _tmp190 * _tmp2068;
  const Scalar _tmp2146 = _tmp1558 * priors_1_0_sqrt_info(3, 3) +
                          _tmp2117 * priors_1_0_sqrt_info(3, 5) +
                          _tmp880 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp2147 = -_tmp1196 * _tmp2065 + _tmp1198 * _tmp2065 + _tmp2064 * _tmp310;
  const Scalar _tmp2148 = _tmp1021 * _tmp2127 - _tmp1024 * _tmp2127 + _tmp2126 * _tmp280;
  const Scalar _tmp2149 = -_tmp1479 * _tmp2106 + _tmp2105 * _tmp610 + _tmp2106 * _tmp903;
  const Scalar _tmp2150 = _tmp1158 * _tmp2044 - _tmp1161 * _tmp2044 + _tmp2043 * _tmp250;
  const Scalar _tmp2151 = _tmp1046 * _tmp2039 - _tmp1050 * _tmp2038 + _tmp2037 * _tmp700;
  const Scalar _tmp2152 = _tmp1558 * priors_1_0_sqrt_info(2, 3) +
                          _tmp2117 * priors_1_0_sqrt_info(2, 5) +
                          _tmp880 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp2153 = _tmp1558 * priors_1_0_sqrt_info(5, 3) +
                          _tmp2117 * priors_1_0_sqrt_info(5, 5) +
                          _tmp880 * priors_1_0_sqrt_info(5, 4);
  const Scalar _tmp2154 =
      _views_1_calibration[1] * (_tmp102 * _tmp150 + _tmp157 * _tmp96 + _tmp161 * _tmp99);
  const Scalar _tmp2155 = _tmp106 * _tmp161 + _tmp108 * _tmp157 + _tmp110 * _tmp150;
  const Scalar _tmp2156 = _tmp2155 * _tmp889;
  const Scalar _tmp2157 = -_tmp1105 * _tmp2156 + _tmp168 * _tmp2154;
  const Scalar _tmp2158 =
      _views_1_calibration[0] * (_tmp150 * _tmp79 + _tmp157 * _tmp89 + _tmp161 * _tmp85);
  const Scalar _tmp2159 = -_tmp1237 * _tmp2155 + _tmp168 * _tmp2158;
  const Scalar _tmp2160 = _tmp1109 * _tmp2157 + _tmp1462 * _tmp2159;
  const Scalar _tmp2161 = -_tmp1239 * _tmp2160 + _tmp1240 * _tmp2160 + _tmp190 * _tmp2159;
  const Scalar _tmp2162 = std::pow(matches_0_0_weight, Scalar(2)) / std::pow(_tmp764, Scalar(2));
  const Scalar _tmp2163 = _tmp1113 * _tmp2160 - _tmp1115 * _tmp2160 + _tmp190 * _tmp2157;
  const Scalar _tmp2164 = std::pow(matches_0_1_weight, Scalar(2)) / std::pow(_tmp767, Scalar(2));
  const Scalar _tmp2165 = _tmp2155 * _tmp918;
  const Scalar _tmp2166 = _tmp206 * _tmp2158 - _tmp2165 * _tmp944;
  const Scalar _tmp2167 = _tmp206 * _tmp2154 - _tmp2156 * _tmp945;
  const Scalar _tmp2168 = _tmp1399 * _tmp2166 + _tmp2167 * _tmp948;
  const Scalar _tmp2169 = _tmp1325 * _tmp2168 - _tmp1327 * _tmp2168 + _tmp2166 * _tmp220;
  const Scalar _tmp2170 = _tmp2167 * _tmp220 - _tmp2168 * _tmp952 + _tmp2168 * _tmp954;
  const Scalar _tmp2171 = std::pow(matches_0_2_weight, Scalar(2)) / std::pow(_tmp770, Scalar(2));
  const Scalar _tmp2172 = -_tmp1150 * _tmp2155 + _tmp2158 * _tmp236;
  const Scalar _tmp2173 = -_tmp1151 * _tmp2156 + _tmp2154 * _tmp236;
  const Scalar _tmp2174 = _tmp1154 * _tmp2173 + _tmp1521 * _tmp2172;
  const Scalar _tmp2175 = _tmp1158 * _tmp2174 - _tmp1161 * _tmp2174 + _tmp2172 * _tmp250;
  const Scalar _tmp2176 = _tmp1273 * _tmp2174 - _tmp1274 * _tmp2174 + _tmp2173 * _tmp250;
  const Scalar _tmp2177 = -_tmp1013 * _tmp2165 + _tmp2158 * _tmp266;
  const Scalar _tmp2178 = -_tmp1014 * _tmp2156 + _tmp2154 * _tmp266;
  const Scalar _tmp2179 = _tmp1017 * _tmp2178 + _tmp1429 * _tmp2177;
  const Scalar _tmp2180 = _tmp1021 * _tmp2179 - _tmp1024 * _tmp2179 + _tmp2177 * _tmp280;
  const Scalar _tmp2181 = std::pow(matches_0_3_weight, Scalar(2)) / std::pow(_tmp773, Scalar(2));
  const Scalar _tmp2182 = _tmp1269 * _tmp2179;
  const Scalar _tmp2183 = _tmp1020 * _tmp2182 - _tmp1023 * _tmp2182 + _tmp2178 * _tmp280;
  const Scalar _tmp2184 = std::pow(matches_0_4_weight, Scalar(2)) / std::pow(_tmp776, Scalar(2));
  const Scalar _tmp2185 = -_tmp1188 * _tmp2156 * _tmp300 + _tmp2154 * _tmp296;
  const Scalar _tmp2186 = -_tmp1281 * _tmp2155 + _tmp2158 * _tmp296;
  const Scalar _tmp2187 = _tmp1192 * _tmp2185 + _tmp1434 * _tmp2186;
  const Scalar _tmp2188 = -_tmp1196 * _tmp2187 + _tmp1198 * _tmp2187 + _tmp2185 * _tmp310;
  const Scalar _tmp2189 = _tmp1283 * _tmp2187 - _tmp1284 * _tmp2187 + _tmp2186 * _tmp310;
  const Scalar _tmp2190 = -_tmp1762 * _tmp2155 + _tmp2158 * _tmp326;
  const Scalar _tmp2191 = -_tmp1026 * _tmp2156 * _tmp330 + _tmp2154 * _tmp326;
  const Scalar _tmp2192 = _tmp1030 * _tmp2191 + _tmp1476 * _tmp2190;
  const Scalar _tmp2193 = _tmp1034 * _tmp2192;
  const Scalar _tmp2194 = -_tmp1035 * _tmp2193 + _tmp1037 * _tmp2193 + _tmp2190 * _tmp340;
  const Scalar _tmp2195 = _tmp1277 * _tmp2192 - _tmp1278 * _tmp2192 + _tmp2191 * _tmp340;
  const Scalar _tmp2196 = std::pow(matches_0_5_weight, Scalar(2)) / std::pow(_tmp779, Scalar(2));
  const Scalar _tmp2197 = _tmp2154 * _tmp356 - _tmp2156 * _tmp981;
  const Scalar _tmp2198 = _tmp2158 * _tmp356 - _tmp2165 * _tmp985;
  const Scalar _tmp2199 = _tmp1484 * _tmp2198 + _tmp2197 * _tmp984;
  const Scalar _tmp2200 = -_tmp1510 * _tmp2199 + _tmp2198 * _tmp370 + _tmp2199 * _tmp992;
  const Scalar _tmp2201 = _tmp1256 * _tmp2199 - _tmp1486 * _tmp2199 + _tmp2197 * _tmp370;
  const Scalar _tmp2202 = std::pow(matches_0_6_weight, Scalar(2)) / std::pow(_tmp782, Scalar(2));
  const Scalar _tmp2203 = std::pow(matches_0_7_weight, Scalar(2)) / std::pow(_tmp785, Scalar(2));
  const Scalar _tmp2204 = -_tmp1123 * _tmp2165 + _tmp2158 * _tmp386;
  const Scalar _tmp2205 = -_tmp1119 * _tmp2156 + _tmp2154 * _tmp386;
  const Scalar _tmp2206 = _tmp1122 * _tmp2205 + _tmp1450 * _tmp2204;
  const Scalar _tmp2207 = _tmp1219 * _tmp2206 - _tmp1220 * _tmp2206 + _tmp2204 * _tmp400;
  const Scalar _tmp2208 = _tmp1128 * _tmp2206 - _tmp1130 * _tmp2206 + _tmp2205 * _tmp400;
  const Scalar _tmp2209 = -_tmp1224 * _tmp2165 + _tmp2158 * _tmp416;
  const Scalar _tmp2210 = -_tmp1226 * _tmp2156 + _tmp2154 * _tmp416;
  const Scalar _tmp2211 = _tmp1229 * _tmp2210 + _tmp1386 * _tmp2209;
  const Scalar _tmp2212 = _tmp1267 * _tmp2211 - _tmp1388 * _tmp2211 + _tmp2209 * _tmp430;
  const Scalar _tmp2213 = std::pow(matches_0_8_weight, Scalar(2)) / std::pow(_tmp788, Scalar(2));
  const Scalar _tmp2214 = _tmp1233 * _tmp2211 - _tmp1390 * _tmp2211 + _tmp2210 * _tmp430;
  const Scalar _tmp2215 = -_tmp1438 * _tmp2155 + _tmp2154 * _tmp446;
  const Scalar _tmp2216 = -_tmp1421 * _tmp2165 + _tmp2158 * _tmp446;
  const Scalar _tmp2217 = _tmp1291 * _tmp2215 + _tmp1424 * _tmp2216;
  const Scalar _tmp2218 = _tmp1295 * _tmp2217 - _tmp1297 * _tmp2217 + _tmp2215 * _tmp460;
  const Scalar _tmp2219 = std::pow(matches_0_9_weight, Scalar(2)) / std::pow(_tmp791, Scalar(2));
  const Scalar _tmp2220 = _tmp1321 * _tmp2217 - _tmp1322 * _tmp2217 + _tmp2216 * _tmp460;
  const Scalar _tmp2221 = _tmp2158 * _tmp476 - _tmp2165 * _tmp963;
  const Scalar _tmp2222 = _tmp2154 * _tmp476 - _tmp2155 * _tmp966;
  const Scalar _tmp2223 = _tmp1456 * _tmp2221 + _tmp2222 * _tmp968;
  const Scalar _tmp2224 = -_tmp1336 * _tmp2223 + _tmp1337 * _tmp2223 + _tmp2221 * _tmp490;
  const Scalar _tmp2225 = _tmp2222 * _tmp490 + _tmp2223 * _tmp972 - _tmp2223 * _tmp974;
  const Scalar _tmp2226 = std::pow(matches_0_10_weight, Scalar(2)) / std::pow(_tmp794, Scalar(2));
  const Scalar _tmp2227 = std::pow(matches_0_11_weight, Scalar(2)) / std::pow(_tmp797, Scalar(2));
  const Scalar _tmp2228 = _tmp2154 * _tmp506 - _tmp2156 * _tmp908;
  const Scalar _tmp2229 = _tmp2158 * _tmp506 - _tmp2165 * _tmp907;
  const Scalar _tmp2230 = _tmp1376 * _tmp2229 + _tmp2228 * _tmp911;
  const Scalar _tmp2231 = _tmp2228 * _tmp520 - _tmp2230 * _tmp923 + _tmp2230 * _tmp924;
  const Scalar _tmp2232 = _tmp2229 * _tmp520 - _tmp2230 * _tmp915 + _tmp2230 * _tmp917;
  const Scalar _tmp2233 = _tmp2158 * _tmp536 - _tmp2165 * _tmp996;
  const Scalar _tmp2234 = _tmp2154 * _tmp536 - _tmp2156 * _tmp997;
  const Scalar _tmp2235 = _tmp1000 * _tmp2234 + _tmp1534 * _tmp2233;
  const Scalar _tmp2236 = -_tmp1258 * _tmp2235 + _tmp1259 * _tmp2235 + _tmp2234 * _tmp550;
  const Scalar _tmp2237 = std::pow(matches_0_12_weight, Scalar(2)) / std::pow(_tmp800, Scalar(2));
  const Scalar _tmp2238 = -_tmp1004 * _tmp2235 + _tmp1009 * _tmp2235 + _tmp2233 * _tmp550;
  const Scalar _tmp2239 = std::pow(matches_0_13_weight, Scalar(2)) / std::pow(_tmp803, Scalar(2));
  const Scalar _tmp2240 = _tmp2154 * _tmp566 - _tmp2156 * _tmp929;
  const Scalar _tmp2241 = _tmp2158 * _tmp566 - _tmp2165 * _tmp928;
  const Scalar _tmp2242 = _tmp1516 * _tmp2241 + _tmp2240 * _tmp932;
  const Scalar _tmp2243 = -_tmp1248 * _tmp2242 + _tmp1250 * _tmp2242 + _tmp2241 * _tmp580;
  const Scalar _tmp2244 = _tmp2240 * _tmp580 - _tmp2242 * _tmp936 + _tmp2242 * _tmp940;
  const Scalar _tmp2245 = _tmp2158 * _tmp596 - _tmp2165 * _tmp895;
  const Scalar _tmp2246 = _tmp2154 * _tmp596 - _tmp2156 * _tmp891;
  const Scalar _tmp2247 = _tmp1468 * _tmp2245 + _tmp2246 * _tmp897;
  const Scalar _tmp2248 = _tmp1253 * _tmp2247 - _tmp1470 * _tmp2247 + _tmp2245 * _tmp610;
  const Scalar _tmp2249 = -_tmp1479 * _tmp2247 + _tmp2246 * _tmp610 + _tmp2247 * _tmp903;
  const Scalar _tmp2250 = std::pow(matches_0_14_weight, Scalar(2)) / std::pow(_tmp806, Scalar(2));
  const Scalar _tmp2251 = std::pow(matches_0_15_weight, Scalar(2)) / std::pow(_tmp809, Scalar(2));
  const Scalar _tmp2252 = -_tmp1206 * _tmp2156 + _tmp2154 * _tmp626;
  const Scalar _tmp2253 = -_tmp1214 * _tmp2155 + _tmp2158 * _tmp626;
  const Scalar _tmp2254 = _tmp1209 * _tmp2252 + _tmp1539 * _tmp2253;
  const Scalar _tmp2255 = -_tmp1213 * _tmp2254 + _tmp1216 * _tmp2254 + _tmp2253 * _tmp640;
  const Scalar _tmp2256 = _tmp1300 * _tmp2254 - _tmp1301 * _tmp2254 + _tmp2252 * _tmp640;
  const Scalar _tmp2257 = std::pow(matches_0_16_weight, Scalar(2)) / std::pow(_tmp812, Scalar(2));
  const Scalar _tmp2258 = -_tmp1312 * _tmp2165 + _tmp2158 * _tmp656;
  const Scalar _tmp2259 = -_tmp1308 * _tmp2156 + _tmp2154 * _tmp656;
  const Scalar _tmp2260 = _tmp1311 * _tmp2259 + _tmp1443 * _tmp2258;
  const Scalar _tmp2261 = _tmp1316 * _tmp2260 - _tmp1318 * _tmp2260 + _tmp2259 * _tmp670;
  const Scalar _tmp2262 = _tmp1332 * _tmp2260 - _tmp1333 * _tmp2260 + _tmp2258 * _tmp670;
  const Scalar _tmp2263 = std::pow(matches_0_17_weight, Scalar(2)) / std::pow(_tmp815, Scalar(2));
  const Scalar _tmp2264 = -_tmp1367 * _tmp2165 + _tmp2158 * _tmp686;
  const Scalar _tmp2265 = -_tmp1360 * _tmp2156 + _tmp2154 * _tmp686;
  const Scalar _tmp2266 = _tmp1043 * _tmp2265 + _tmp1370 * _tmp2264;
  const Scalar _tmp2267 = _tmp1046 * _tmp2266;
  const Scalar _tmp2268 = _tmp1047 * _tmp2267 - _tmp1049 * _tmp2267 + _tmp2264 * _tmp700;
  const Scalar _tmp2269 = -_tmp1243 * _tmp2266 + _tmp1244 * _tmp2266 + _tmp2265 * _tmp700;
  const Scalar _tmp2270 = -_tmp1134 * _tmp2156 + _tmp2154 * _tmp716;
  const Scalar _tmp2271 = -_tmp1138 * _tmp2165 + _tmp2158 * _tmp716;
  const Scalar _tmp2272 = _tmp1137 * _tmp2270 + _tmp1503 * _tmp2271;
  const Scalar _tmp2273 = _tmp1168 * _tmp2272 - _tmp1169 * _tmp2272 + _tmp2271 * _tmp730;
  const Scalar _tmp2274 = std::pow(matches_0_18_weight, Scalar(2)) / std::pow(_tmp818, Scalar(2));
  const Scalar _tmp2275 = -_tmp1143 * _tmp2272 + _tmp1145 * _tmp2272 + _tmp2270 * _tmp730;
  const Scalar _tmp2276 = std::pow(matches_0_19_weight, Scalar(2)) / std::pow(_tmp821, Scalar(2));
  const Scalar _tmp2277 = -_tmp1090 * _tmp2156 + _tmp2154 * _tmp746;
  const Scalar _tmp2278 = -_tmp1094 * _tmp2165 + _tmp2158 * _tmp746;
  const Scalar _tmp2279 = _tmp1093 * _tmp2277 + _tmp1491 * _tmp2278;
  const Scalar _tmp2280 = _tmp1097 * _tmp2279;
  const Scalar _tmp2281 = -_tmp1183 * _tmp2280 + _tmp1184 * _tmp2279 + _tmp2278 * _tmp760;
  const Scalar _tmp2282 = -_tmp1098 * _tmp2280 + _tmp1101 * _tmp2279 + _tmp2277 * _tmp760;

  // Output terms (4)
  if (residual != nullptr) {
    Eigen::Matrix<Scalar, 72, 1>& _residual = (*residual);

    _residual(0, 0) = _tmp63;
    _residual(1, 0) = _tmp66;
    _residual(2, 0) = _tmp68;
    _residual(3, 0) = _tmp70;
    _residual(4, 0) = _tmp71;
    _residual(5, 0) = _tmp72;
    _residual(6, 0) = _tmp132;
    _residual(7, 0) = _tmp133;
    _residual(8, 0) = _tmp135;
    _residual(9, 0) = _tmp136;
    _residual(10, 0) = _tmp137;
    _residual(11, 0) = _tmp138;
    _residual(12, 0) = _tmp191;
    _residual(13, 0) = _tmp192;
    _residual(14, 0) = _tmp221;
    _residual(15, 0) = _tmp222;
    _residual(16, 0) = _tmp251;
    _residual(17, 0) = _tmp252;
    _residual(18, 0) = _tmp281;
    _residual(19, 0) = _tmp282;
    _residual(20, 0) = _tmp311;
    _residual(21, 0) = _tmp312;
    _residual(22, 0) = _tmp341;
    _residual(23, 0) = _tmp342;
    _residual(24, 0) = _tmp371;
    _residual(25, 0) = _tmp372;
    _residual(26, 0) = _tmp401;
    _residual(27, 0) = _tmp402;
    _residual(28, 0) = _tmp431;
    _residual(29, 0) = _tmp432;
    _residual(30, 0) = _tmp461;
    _residual(31, 0) = _tmp462;
    _residual(32, 0) = _tmp491;
    _residual(33, 0) = _tmp492;
    _residual(34, 0) = _tmp521;
    _residual(35, 0) = _tmp522;
    _residual(36, 0) = _tmp551;
    _residual(37, 0) = _tmp552;
    _residual(38, 0) = _tmp581;
    _residual(39, 0) = _tmp582;
    _residual(40, 0) = _tmp611;
    _residual(41, 0) = _tmp612;
    _residual(42, 0) = _tmp641;
    _residual(43, 0) = _tmp642;
    _residual(44, 0) = _tmp671;
    _residual(45, 0) = _tmp672;
    _residual(46, 0) = _tmp701;
    _residual(47, 0) = _tmp702;
    _residual(48, 0) = _tmp731;
    _residual(49, 0) = _tmp732;
    _residual(50, 0) = _tmp761;
    _residual(51, 0) = _tmp762;
    _residual(52, 0) = _tmp763 * _tmp765;
    _residual(53, 0) = _tmp766 * _tmp768;
    _residual(54, 0) = _tmp769 * _tmp771;
    _residual(55, 0) = _tmp772 * _tmp774;
    _residual(56, 0) = _tmp775 * _tmp777;
    _residual(57, 0) = _tmp778 * _tmp780;
    _residual(58, 0) = _tmp781 * _tmp783;
    _residual(59, 0) = _tmp784 * _tmp786;
    _residual(60, 0) = _tmp787 * _tmp789;
    _residual(61, 0) = _tmp790 * _tmp792;
    _residual(62, 0) = _tmp793 * _tmp795;
    _residual(63, 0) = _tmp796 * _tmp798;
    _residual(64, 0) = _tmp799 * _tmp801;
    _residual(65, 0) = _tmp802 * _tmp804;
    _residual(66, 0) = _tmp805 * _tmp807;
    _residual(67, 0) = _tmp808 * _tmp810;
    _residual(68, 0) = _tmp811 * _tmp813;
    _residual(69, 0) = _tmp814 * _tmp816;
    _residual(70, 0) = _tmp817 * _tmp819;
    _residual(71, 0) = _tmp820 * _tmp822;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 26, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp1010 * _tmp551 + _tmp1025 * _tmp281 + _tmp1039 * _tmp341 + _tmp1051 * _tmp701 +
                 _tmp1087 * _tmp71 + _tmp1102 * _tmp762 + _tmp1116 * _tmp192 + _tmp1131 * _tmp402 +
                 _tmp1146 * _tmp732 + _tmp1162 * _tmp251 + _tmp1166 * _tmp135 + _tmp1170 * _tmp731 +
                 _tmp1172 * _tmp136 + _tmp1179 * _tmp63 + _tmp1182 * _tmp70 + _tmp1186 * _tmp761 +
                 _tmp1199 * _tmp312 + _tmp1202 * _tmp72 + _tmp1217 * _tmp641 + _tmp1221 * _tmp401 +
                 _tmp1236 * _tmp432 + _tmp1241 * _tmp191 + _tmp1245 * _tmp702 + _tmp1251 * _tmp581 +
                 _tmp1254 * _tmp611 + _tmp1257 * _tmp372 + _tmp1260 * _tmp552 + _tmp1263 * _tmp68 +
                 _tmp1265 * _tmp138 + _tmp1268 * _tmp431 + _tmp1272 * _tmp282 + _tmp1275 * _tmp252 +
                 _tmp1279 * _tmp342 + _tmp1285 * _tmp311 + _tmp1298 * _tmp462 + _tmp1302 * _tmp642 +
                 _tmp1305 * _tmp66 + _tmp1319 * _tmp672 + _tmp132 * _tmp960 + _tmp1323 * _tmp461 +
                 _tmp1328 * _tmp221 + _tmp133 * _tmp978 + _tmp1334 * _tmp671 + _tmp1338 * _tmp491 +
                 _tmp137 * _tmp887 + _tmp222 * _tmp955 + _tmp371 * _tmp993 + _tmp492 * _tmp975 +
                 _tmp521 * _tmp921 + _tmp522 * _tmp925 + _tmp582 * _tmp941 + _tmp612 * _tmp904;
    _rhs(1, 0) = _tmp132 * _tmp1419 + _tmp133 * _tmp1549 + _tmp135 * _tmp1509 + _tmp1356 * _tmp68 +
                 _tmp136 * _tmp1546 + _tmp137 * _tmp1550 + _tmp1373 * _tmp701 + _tmp138 * _tmp1499 +
                 _tmp1380 * _tmp521 + _tmp1381 * _tmp70 + _tmp1389 * _tmp431 + _tmp1391 * _tmp432 +
                 _tmp1394 * _tmp63 + _tmp1395 * _tmp522 + _tmp1402 * _tmp222 + _tmp1426 * _tmp461 +
                 _tmp1431 * _tmp282 + _tmp1437 * _tmp312 + _tmp1439 * _tmp462 + _tmp1445 * _tmp672 +
                 _tmp1453 * _tmp402 + _tmp1459 * _tmp491 + _tmp1464 * _tmp191 + _tmp1471 * _tmp611 +
                 _tmp1478 * _tmp341 + _tmp1480 * _tmp612 + _tmp1487 * _tmp372 + _tmp1494 * _tmp761 +
                 _tmp1495 * _tmp311 + _tmp1496 * _tmp762 + _tmp1497 * _tmp221 + _tmp1498 * _tmp702 +
                 _tmp1506 * _tmp732 + _tmp1508 * _tmp66 + _tmp1511 * _tmp371 + _tmp1512 * _tmp281 +
                 _tmp1518 * _tmp582 + _tmp1526 * _tmp251 + _tmp1527 * _tmp71 + _tmp1529 * _tmp252 +
                 _tmp1530 * _tmp72 + _tmp1531 * _tmp401 + _tmp1536 * _tmp551 + _tmp1541 * _tmp642 +
                 _tmp1543 * _tmp492 + _tmp1544 * _tmp671 + _tmp1545 * _tmp581 + _tmp1547 * _tmp342 +
                 _tmp1548 * _tmp192 + _tmp1551 * _tmp641 + _tmp1552 * _tmp552 + _tmp1553 * _tmp731;
    _rhs(2, 0) = _tmp132 * _tmp1677 + _tmp133 * _tmp1698 + _tmp135 * _tmp1689 + _tmp136 * _tmp1657 +
                 _tmp137 * _tmp1600 + _tmp138 * _tmp1582 + _tmp1561 * _tmp612 + _tmp1565 * _tmp432 +
                 _tmp1569 * _tmp761 + _tmp1595 * _tmp66 + _tmp1599 * _tmp70 + _tmp1604 * _tmp732 +
                 _tmp1605 * _tmp63 + _tmp1609 * _tmp492 + _tmp1613 * _tmp192 + _tmp1617 * _tmp671 +
                 _tmp1618 * _tmp68 + _tmp1619 * _tmp191 + _tmp1623 * _tmp252 + _tmp1627 * _tmp371 +
                 _tmp1631 * _tmp702 + _tmp1635 * _tmp341 + _tmp1636 * _tmp251 + _tmp1641 * _tmp642 +
                 _tmp1642 * _tmp431 + _tmp1646 * _tmp552 + _tmp1650 * _tmp582 + _tmp1654 * _tmp521 +
                 _tmp1655 * _tmp491 + _tmp1656 * _tmp342 + _tmp1661 * _tmp402 + _tmp1665 * _tmp311 +
                 _tmp1666 * _tmp522 + _tmp1667 * _tmp701 + _tmp1671 * _tmp282 + _tmp1672 * _tmp611 +
                 _tmp1676 * _tmp222 + _tmp1678 * _tmp581 + _tmp1679 * _tmp72 + _tmp1680 * _tmp731 +
                 _tmp1681 * _tmp281 + _tmp1682 * _tmp221 + _tmp1683 * _tmp312 + _tmp1684 * _tmp551 +
                 _tmp1685 * _tmp762 + _tmp1686 * _tmp641 + _tmp1688 * _tmp372 + _tmp1690 * _tmp71 +
                 _tmp1691 * _tmp401 + _tmp1696 * _tmp462 + _tmp1697 * _tmp672 + _tmp1699 * _tmp461;
    _rhs(3, 0) = _tmp132 * _tmp1807 + _tmp133 * _tmp1796 + _tmp135 * _tmp1890 + _tmp136 * _tmp1838 +
                 _tmp137 * _tmp1819 + _tmp138 * _tmp1896 + _tmp1708 * _tmp252 + _tmp1717 * _tmp761 +
                 _tmp1725 * _tmp582 + _tmp1726 * _tmp72 + _tmp1734 * _tmp731 + _tmp1735 * _tmp762 +
                 _tmp1736 * _tmp68 + _tmp1743 * _tmp552 + _tmp1750 * _tmp522 + _tmp1751 * _tmp551 +
                 _tmp1752 * _tmp71 + _tmp1760 * _tmp372 + _tmp1761 * _tmp371 + _tmp1770 * _tmp341 +
                 _tmp1777 * _tmp191 + _tmp1785 * _tmp312 + _tmp1793 * _tmp642 + _tmp1797 * _tmp66 +
                 _tmp1805 * _tmp401 + _tmp1806 * _tmp342 + _tmp1808 * _tmp251 + _tmp1810 * _tmp192 +
                 _tmp1818 * _tmp431 + _tmp1828 * _tmp611 + _tmp1835 * _tmp222 + _tmp1837 * _tmp432 +
                 _tmp1839 * _tmp521 + _tmp1840 * _tmp63 + _tmp1841 * _tmp221 + _tmp1842 * _tmp311 +
                 _tmp1843 * _tmp402 + _tmp1851 * _tmp491 + _tmp1858 * _tmp672 + _tmp1859 * _tmp492 +
                 _tmp1867 * _tmp702 + _tmp1869 * _tmp732 + _tmp1876 * _tmp281 + _tmp1877 * _tmp612 +
                 _tmp1878 * _tmp641 + _tmp1886 * _tmp462 + _tmp1887 * _tmp70 + _tmp1889 * _tmp461 +
                 _tmp1891 * _tmp581 + _tmp1893 * _tmp671 + _tmp1894 * _tmp701 + _tmp1895 * _tmp282;
    _rhs(4, 0) = _tmp132 * _tmp1973 + _tmp133 * _tmp1957 + _tmp135 * _tmp2022 + _tmp136 * _tmp2002 +
                 _tmp137 * _tmp1967 + _tmp138 * _tmp2026 + _tmp1900 * _tmp431 + _tmp1906 * _tmp521 +
                 _tmp191 * _tmp2010 + _tmp1910 * _tmp702 + _tmp1915 * _tmp582 + _tmp1916 * _tmp581 +
                 _tmp192 * _tmp1991 + _tmp1921 * _tmp492 + _tmp1926 * _tmp282 + _tmp1927 * _tmp72 +
                 _tmp1928 * _tmp71 + _tmp1932 * _tmp341 + _tmp1937 * _tmp612 + _tmp1941 * _tmp732 +
                 _tmp1945 * _tmp372 + _tmp1950 * _tmp551 + _tmp1954 * _tmp252 + _tmp1955 * _tmp68 +
                 _tmp1962 * _tmp221 + _tmp1963 * _tmp371 + _tmp1964 * _tmp522 + _tmp1965 * _tmp701 +
                 _tmp1966 * _tmp731 + _tmp1972 * _tmp642 + _tmp1974 * _tmp432 + _tmp1979 * _tmp402 +
                 _tmp1983 * _tmp461 + _tmp1984 * _tmp641 + _tmp1985 * _tmp491 + _tmp1992 * _tmp63 +
                 _tmp1993 * _tmp66 + _tmp1998 * _tmp311 + _tmp1999 * _tmp70 + _tmp2001 * _tmp312 +
                 _tmp2007 * _tmp671 + _tmp2009 * _tmp222 + _tmp2011 * _tmp672 + _tmp2012 * _tmp251 +
                 _tmp2013 * _tmp281 + _tmp2019 * _tmp761 + _tmp2020 * _tmp462 + _tmp2021 * _tmp762 +
                 _tmp2023 * _tmp611 + _tmp2024 * _tmp552 + _tmp2025 * _tmp342 + _tmp2027 * _tmp401;
    _rhs(5, 0) = _tmp132 * _tmp2122 + _tmp133 * _tmp2118 + _tmp135 * _tmp2152 + _tmp136 * _tmp2146 +
                 _tmp137 * _tmp2121 + _tmp138 * _tmp2153 + _tmp191 * _tmp2070 + _tmp192 * _tmp2145 +
                 _tmp2031 * _tmp732 + _tmp2035 * _tmp401 + _tmp2040 * _tmp702 + _tmp2041 * _tmp402 +
                 _tmp2045 * _tmp252 + _tmp2049 * _tmp521 + _tmp2054 * _tmp581 + _tmp2059 * _tmp491 +
                 _tmp2060 * _tmp68 + _tmp2061 * _tmp731 + _tmp2066 * _tmp311 + _tmp2071 * _tmp71 +
                 _tmp2072 * _tmp72 + _tmp2076 * _tmp762 + _tmp2081 * _tmp461 + _tmp2085 * _tmp371 +
                 _tmp2086 * _tmp372 + _tmp2091 * _tmp672 + _tmp2092 * _tmp582 + _tmp2097 * _tmp221 +
                 _tmp2101 * _tmp342 + _tmp2102 * _tmp462 + _tmp2107 * _tmp611 + _tmp2108 * _tmp761 +
                 _tmp2109 * _tmp66 + _tmp2116 * _tmp551 + _tmp2120 * _tmp552 + _tmp2123 * _tmp671 +
                 _tmp2128 * _tmp282 + _tmp2132 * _tmp642 + _tmp2133 * _tmp522 + _tmp2134 * _tmp341 +
                 _tmp2138 * _tmp431 + _tmp2139 * _tmp63 + _tmp2140 * _tmp432 + _tmp2141 * _tmp222 +
                 _tmp2142 * _tmp70 + _tmp2143 * _tmp492 + _tmp2144 * _tmp641 + _tmp2147 * _tmp312 +
                 _tmp2148 * _tmp281 + _tmp2149 * _tmp612 + _tmp2150 * _tmp251 + _tmp2151 * _tmp701;
    _rhs(6, 0) = _tmp191 * _tmp2161 + _tmp192 * _tmp2163 + _tmp2162 * _tmp763;
    _rhs(7, 0) = _tmp2164 * _tmp766 + _tmp2169 * _tmp221 + _tmp2170 * _tmp222;
    _rhs(8, 0) = _tmp2171 * _tmp769 + _tmp2175 * _tmp251 + _tmp2176 * _tmp252;
    _rhs(9, 0) = _tmp2180 * _tmp281 + _tmp2181 * _tmp772 + _tmp2183 * _tmp282;
    _rhs(10, 0) = _tmp2184 * _tmp775 + _tmp2188 * _tmp312 + _tmp2189 * _tmp311;
    _rhs(11, 0) = _tmp2194 * _tmp341 + _tmp2195 * _tmp342 + _tmp2196 * _tmp778;
    _rhs(12, 0) = _tmp2200 * _tmp371 + _tmp2201 * _tmp372 + _tmp2202 * _tmp781;
    _rhs(13, 0) = _tmp2203 * _tmp784 + _tmp2207 * _tmp401 + _tmp2208 * _tmp402;
    _rhs(14, 0) = _tmp2212 * _tmp431 + _tmp2213 * _tmp787 + _tmp2214 * _tmp432;
    _rhs(15, 0) = _tmp2218 * _tmp462 + _tmp2219 * _tmp790 + _tmp2220 * _tmp461;
    _rhs(16, 0) = _tmp2224 * _tmp491 + _tmp2225 * _tmp492 + _tmp2226 * _tmp793;
    _rhs(17, 0) = _tmp2227 * _tmp796 + _tmp2231 * _tmp522 + _tmp2232 * _tmp521;
    _rhs(18, 0) = _tmp2236 * _tmp552 + _tmp2237 * _tmp799 + _tmp2238 * _tmp551;
    _rhs(19, 0) = _tmp2239 * _tmp802 + _tmp2243 * _tmp581 + _tmp2244 * _tmp582;
    _rhs(20, 0) = _tmp2248 * _tmp611 + _tmp2249 * _tmp612 + _tmp2250 * _tmp805;
    _rhs(21, 0) = _tmp2251 * _tmp808 + _tmp2255 * _tmp641 + _tmp2256 * _tmp642;
    _rhs(22, 0) = _tmp2257 * _tmp811 + _tmp2261 * _tmp672 + _tmp2262 * _tmp671;
    _rhs(23, 0) = _tmp2263 * _tmp814 + _tmp2268 * _tmp701 + _tmp2269 * _tmp702;
    _rhs(24, 0) = _tmp2273 * _tmp731 + _tmp2274 * _tmp817 + _tmp2275 * _tmp732;
    _rhs(25, 0) = _tmp2276 * _tmp820 + _tmp2281 * _tmp761 + _tmp2282 * _tmp762;
  }

  if (jacobian != nullptr) {
    static constexpr int kRows_jacobian = 72;
    static constexpr int kCols_jacobian = 26;
    static constexpr int kNumNonZero_jacobian = 372;
    static constexpr int kColPtrs_jacobian[] = {0,   52,  104, 156, 208, 260, 312, 315, 318,
                                                321, 324, 327, 330, 333, 336, 339, 342, 345,
                                                348, 351, 354, 357, 360, 363, 366, 369, 372};
    static constexpr int kRowIndices_jacobian[] = {
        0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
        44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13,
        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
        36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,  3,  4,  5,
        6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
        28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
        50, 51, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
        42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11,
        12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,  3,
        4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 49, 50, 51, 12, 13, 52, 14, 15, 53, 16, 17, 54, 18, 19, 55, 20, 21, 56, 22, 23, 57,
        24, 25, 58, 26, 27, 59, 28, 29, 60, 30, 31, 61, 32, 33, 62, 34, 35, 63, 36, 37, 64, 38,
        39, 65, 40, 41, 66, 42, 43, 67, 44, 45, 68, 46, 47, 69, 48, 49, 70, 50, 51, 71};
    if (jacobian->nonZeros() != 372 || jacobian->outerSize() != 26 || jacobian->innerSize() != 72 ||
        !jacobian->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar jacobian_empty_value_ptr[372];
      *jacobian = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_jacobian, kCols_jacobian, kNumNonZero_jacobian, kColPtrs_jacobian,
          kRowIndices_jacobian, jacobian_empty_value_ptr);
    }
    Scalar* jacobian_value_ptr = jacobian->valuePtr();

    jacobian_value_ptr[0] = _tmp1179;
    jacobian_value_ptr[1] = _tmp1305;
    jacobian_value_ptr[2] = _tmp1263;
    jacobian_value_ptr[3] = _tmp1182;
    jacobian_value_ptr[4] = _tmp1087;
    jacobian_value_ptr[5] = _tmp1202;
    jacobian_value_ptr[6] = _tmp960;
    jacobian_value_ptr[7] = _tmp978;
    jacobian_value_ptr[8] = _tmp1166;
    jacobian_value_ptr[9] = _tmp1172;
    jacobian_value_ptr[10] = _tmp887;
    jacobian_value_ptr[11] = _tmp1265;
    jacobian_value_ptr[12] = _tmp1241;
    jacobian_value_ptr[13] = _tmp1116;
    jacobian_value_ptr[14] = _tmp1328;
    jacobian_value_ptr[15] = _tmp955;
    jacobian_value_ptr[16] = _tmp1162;
    jacobian_value_ptr[17] = _tmp1275;
    jacobian_value_ptr[18] = _tmp1025;
    jacobian_value_ptr[19] = _tmp1272;
    jacobian_value_ptr[20] = _tmp1285;
    jacobian_value_ptr[21] = _tmp1199;
    jacobian_value_ptr[22] = _tmp1039;
    jacobian_value_ptr[23] = _tmp1279;
    jacobian_value_ptr[24] = _tmp993;
    jacobian_value_ptr[25] = _tmp1257;
    jacobian_value_ptr[26] = _tmp1221;
    jacobian_value_ptr[27] = _tmp1131;
    jacobian_value_ptr[28] = _tmp1268;
    jacobian_value_ptr[29] = _tmp1236;
    jacobian_value_ptr[30] = _tmp1323;
    jacobian_value_ptr[31] = _tmp1298;
    jacobian_value_ptr[32] = _tmp1338;
    jacobian_value_ptr[33] = _tmp975;
    jacobian_value_ptr[34] = _tmp921;
    jacobian_value_ptr[35] = _tmp925;
    jacobian_value_ptr[36] = _tmp1010;
    jacobian_value_ptr[37] = _tmp1260;
    jacobian_value_ptr[38] = _tmp1251;
    jacobian_value_ptr[39] = _tmp941;
    jacobian_value_ptr[40] = _tmp1254;
    jacobian_value_ptr[41] = _tmp904;
    jacobian_value_ptr[42] = _tmp1217;
    jacobian_value_ptr[43] = _tmp1302;
    jacobian_value_ptr[44] = _tmp1334;
    jacobian_value_ptr[45] = _tmp1319;
    jacobian_value_ptr[46] = _tmp1051;
    jacobian_value_ptr[47] = _tmp1245;
    jacobian_value_ptr[48] = _tmp1170;
    jacobian_value_ptr[49] = _tmp1146;
    jacobian_value_ptr[50] = _tmp1186;
    jacobian_value_ptr[51] = _tmp1102;
    jacobian_value_ptr[52] = _tmp1394;
    jacobian_value_ptr[53] = _tmp1508;
    jacobian_value_ptr[54] = _tmp1356;
    jacobian_value_ptr[55] = _tmp1381;
    jacobian_value_ptr[56] = _tmp1527;
    jacobian_value_ptr[57] = _tmp1530;
    jacobian_value_ptr[58] = _tmp1419;
    jacobian_value_ptr[59] = _tmp1549;
    jacobian_value_ptr[60] = _tmp1509;
    jacobian_value_ptr[61] = _tmp1546;
    jacobian_value_ptr[62] = _tmp1550;
    jacobian_value_ptr[63] = _tmp1499;
    jacobian_value_ptr[64] = _tmp1464;
    jacobian_value_ptr[65] = _tmp1548;
    jacobian_value_ptr[66] = _tmp1497;
    jacobian_value_ptr[67] = _tmp1402;
    jacobian_value_ptr[68] = _tmp1526;
    jacobian_value_ptr[69] = _tmp1529;
    jacobian_value_ptr[70] = _tmp1512;
    jacobian_value_ptr[71] = _tmp1431;
    jacobian_value_ptr[72] = _tmp1495;
    jacobian_value_ptr[73] = _tmp1437;
    jacobian_value_ptr[74] = _tmp1478;
    jacobian_value_ptr[75] = _tmp1547;
    jacobian_value_ptr[76] = _tmp1511;
    jacobian_value_ptr[77] = _tmp1487;
    jacobian_value_ptr[78] = _tmp1531;
    jacobian_value_ptr[79] = _tmp1453;
    jacobian_value_ptr[80] = _tmp1389;
    jacobian_value_ptr[81] = _tmp1391;
    jacobian_value_ptr[82] = _tmp1426;
    jacobian_value_ptr[83] = _tmp1439;
    jacobian_value_ptr[84] = _tmp1459;
    jacobian_value_ptr[85] = _tmp1543;
    jacobian_value_ptr[86] = _tmp1380;
    jacobian_value_ptr[87] = _tmp1395;
    jacobian_value_ptr[88] = _tmp1536;
    jacobian_value_ptr[89] = _tmp1552;
    jacobian_value_ptr[90] = _tmp1545;
    jacobian_value_ptr[91] = _tmp1518;
    jacobian_value_ptr[92] = _tmp1471;
    jacobian_value_ptr[93] = _tmp1480;
    jacobian_value_ptr[94] = _tmp1551;
    jacobian_value_ptr[95] = _tmp1541;
    jacobian_value_ptr[96] = _tmp1544;
    jacobian_value_ptr[97] = _tmp1445;
    jacobian_value_ptr[98] = _tmp1373;
    jacobian_value_ptr[99] = _tmp1498;
    jacobian_value_ptr[100] = _tmp1553;
    jacobian_value_ptr[101] = _tmp1506;
    jacobian_value_ptr[102] = _tmp1494;
    jacobian_value_ptr[103] = _tmp1496;
    jacobian_value_ptr[104] = _tmp1605;
    jacobian_value_ptr[105] = _tmp1595;
    jacobian_value_ptr[106] = _tmp1618;
    jacobian_value_ptr[107] = _tmp1599;
    jacobian_value_ptr[108] = _tmp1690;
    jacobian_value_ptr[109] = _tmp1679;
    jacobian_value_ptr[110] = _tmp1677;
    jacobian_value_ptr[111] = _tmp1698;
    jacobian_value_ptr[112] = _tmp1689;
    jacobian_value_ptr[113] = _tmp1657;
    jacobian_value_ptr[114] = _tmp1600;
    jacobian_value_ptr[115] = _tmp1582;
    jacobian_value_ptr[116] = _tmp1619;
    jacobian_value_ptr[117] = _tmp1613;
    jacobian_value_ptr[118] = _tmp1682;
    jacobian_value_ptr[119] = _tmp1676;
    jacobian_value_ptr[120] = _tmp1636;
    jacobian_value_ptr[121] = _tmp1623;
    jacobian_value_ptr[122] = _tmp1681;
    jacobian_value_ptr[123] = _tmp1671;
    jacobian_value_ptr[124] = _tmp1665;
    jacobian_value_ptr[125] = _tmp1683;
    jacobian_value_ptr[126] = _tmp1635;
    jacobian_value_ptr[127] = _tmp1656;
    jacobian_value_ptr[128] = _tmp1627;
    jacobian_value_ptr[129] = _tmp1688;
    jacobian_value_ptr[130] = _tmp1691;
    jacobian_value_ptr[131] = _tmp1661;
    jacobian_value_ptr[132] = _tmp1642;
    jacobian_value_ptr[133] = _tmp1565;
    jacobian_value_ptr[134] = _tmp1699;
    jacobian_value_ptr[135] = _tmp1696;
    jacobian_value_ptr[136] = _tmp1655;
    jacobian_value_ptr[137] = _tmp1609;
    jacobian_value_ptr[138] = _tmp1654;
    jacobian_value_ptr[139] = _tmp1666;
    jacobian_value_ptr[140] = _tmp1684;
    jacobian_value_ptr[141] = _tmp1646;
    jacobian_value_ptr[142] = _tmp1678;
    jacobian_value_ptr[143] = _tmp1650;
    jacobian_value_ptr[144] = _tmp1672;
    jacobian_value_ptr[145] = _tmp1561;
    jacobian_value_ptr[146] = _tmp1686;
    jacobian_value_ptr[147] = _tmp1641;
    jacobian_value_ptr[148] = _tmp1617;
    jacobian_value_ptr[149] = _tmp1697;
    jacobian_value_ptr[150] = _tmp1667;
    jacobian_value_ptr[151] = _tmp1631;
    jacobian_value_ptr[152] = _tmp1680;
    jacobian_value_ptr[153] = _tmp1604;
    jacobian_value_ptr[154] = _tmp1569;
    jacobian_value_ptr[155] = _tmp1685;
    jacobian_value_ptr[156] = _tmp1840;
    jacobian_value_ptr[157] = _tmp1797;
    jacobian_value_ptr[158] = _tmp1736;
    jacobian_value_ptr[159] = _tmp1887;
    jacobian_value_ptr[160] = _tmp1752;
    jacobian_value_ptr[161] = _tmp1726;
    jacobian_value_ptr[162] = _tmp1807;
    jacobian_value_ptr[163] = _tmp1796;
    jacobian_value_ptr[164] = _tmp1890;
    jacobian_value_ptr[165] = _tmp1838;
    jacobian_value_ptr[166] = _tmp1819;
    jacobian_value_ptr[167] = _tmp1896;
    jacobian_value_ptr[168] = _tmp1777;
    jacobian_value_ptr[169] = _tmp1810;
    jacobian_value_ptr[170] = _tmp1841;
    jacobian_value_ptr[171] = _tmp1835;
    jacobian_value_ptr[172] = _tmp1808;
    jacobian_value_ptr[173] = _tmp1708;
    jacobian_value_ptr[174] = _tmp1876;
    jacobian_value_ptr[175] = _tmp1895;
    jacobian_value_ptr[176] = _tmp1842;
    jacobian_value_ptr[177] = _tmp1785;
    jacobian_value_ptr[178] = _tmp1770;
    jacobian_value_ptr[179] = _tmp1806;
    jacobian_value_ptr[180] = _tmp1761;
    jacobian_value_ptr[181] = _tmp1760;
    jacobian_value_ptr[182] = _tmp1805;
    jacobian_value_ptr[183] = _tmp1843;
    jacobian_value_ptr[184] = _tmp1818;
    jacobian_value_ptr[185] = _tmp1837;
    jacobian_value_ptr[186] = _tmp1889;
    jacobian_value_ptr[187] = _tmp1886;
    jacobian_value_ptr[188] = _tmp1851;
    jacobian_value_ptr[189] = _tmp1859;
    jacobian_value_ptr[190] = _tmp1839;
    jacobian_value_ptr[191] = _tmp1750;
    jacobian_value_ptr[192] = _tmp1751;
    jacobian_value_ptr[193] = _tmp1743;
    jacobian_value_ptr[194] = _tmp1891;
    jacobian_value_ptr[195] = _tmp1725;
    jacobian_value_ptr[196] = _tmp1828;
    jacobian_value_ptr[197] = _tmp1877;
    jacobian_value_ptr[198] = _tmp1878;
    jacobian_value_ptr[199] = _tmp1793;
    jacobian_value_ptr[200] = _tmp1893;
    jacobian_value_ptr[201] = _tmp1858;
    jacobian_value_ptr[202] = _tmp1894;
    jacobian_value_ptr[203] = _tmp1867;
    jacobian_value_ptr[204] = _tmp1734;
    jacobian_value_ptr[205] = _tmp1869;
    jacobian_value_ptr[206] = _tmp1717;
    jacobian_value_ptr[207] = _tmp1735;
    jacobian_value_ptr[208] = _tmp1992;
    jacobian_value_ptr[209] = _tmp1993;
    jacobian_value_ptr[210] = _tmp1955;
    jacobian_value_ptr[211] = _tmp1999;
    jacobian_value_ptr[212] = _tmp1928;
    jacobian_value_ptr[213] = _tmp1927;
    jacobian_value_ptr[214] = _tmp1973;
    jacobian_value_ptr[215] = _tmp1957;
    jacobian_value_ptr[216] = _tmp2022;
    jacobian_value_ptr[217] = _tmp2002;
    jacobian_value_ptr[218] = _tmp1967;
    jacobian_value_ptr[219] = _tmp2026;
    jacobian_value_ptr[220] = _tmp2010;
    jacobian_value_ptr[221] = _tmp1991;
    jacobian_value_ptr[222] = _tmp1962;
    jacobian_value_ptr[223] = _tmp2009;
    jacobian_value_ptr[224] = _tmp2012;
    jacobian_value_ptr[225] = _tmp1954;
    jacobian_value_ptr[226] = _tmp2013;
    jacobian_value_ptr[227] = _tmp1926;
    jacobian_value_ptr[228] = _tmp1998;
    jacobian_value_ptr[229] = _tmp2001;
    jacobian_value_ptr[230] = _tmp1932;
    jacobian_value_ptr[231] = _tmp2025;
    jacobian_value_ptr[232] = _tmp1963;
    jacobian_value_ptr[233] = _tmp1945;
    jacobian_value_ptr[234] = _tmp2027;
    jacobian_value_ptr[235] = _tmp1979;
    jacobian_value_ptr[236] = _tmp1900;
    jacobian_value_ptr[237] = _tmp1974;
    jacobian_value_ptr[238] = _tmp1983;
    jacobian_value_ptr[239] = _tmp2020;
    jacobian_value_ptr[240] = _tmp1985;
    jacobian_value_ptr[241] = _tmp1921;
    jacobian_value_ptr[242] = _tmp1906;
    jacobian_value_ptr[243] = _tmp1964;
    jacobian_value_ptr[244] = _tmp1950;
    jacobian_value_ptr[245] = _tmp2024;
    jacobian_value_ptr[246] = _tmp1916;
    jacobian_value_ptr[247] = _tmp1915;
    jacobian_value_ptr[248] = _tmp2023;
    jacobian_value_ptr[249] = _tmp1937;
    jacobian_value_ptr[250] = _tmp1984;
    jacobian_value_ptr[251] = _tmp1972;
    jacobian_value_ptr[252] = _tmp2007;
    jacobian_value_ptr[253] = _tmp2011;
    jacobian_value_ptr[254] = _tmp1965;
    jacobian_value_ptr[255] = _tmp1910;
    jacobian_value_ptr[256] = _tmp1966;
    jacobian_value_ptr[257] = _tmp1941;
    jacobian_value_ptr[258] = _tmp2019;
    jacobian_value_ptr[259] = _tmp2021;
    jacobian_value_ptr[260] = _tmp2139;
    jacobian_value_ptr[261] = _tmp2109;
    jacobian_value_ptr[262] = _tmp2060;
    jacobian_value_ptr[263] = _tmp2142;
    jacobian_value_ptr[264] = _tmp2071;
    jacobian_value_ptr[265] = _tmp2072;
    jacobian_value_ptr[266] = _tmp2122;
    jacobian_value_ptr[267] = _tmp2118;
    jacobian_value_ptr[268] = _tmp2152;
    jacobian_value_ptr[269] = _tmp2146;
    jacobian_value_ptr[270] = _tmp2121;
    jacobian_value_ptr[271] = _tmp2153;
    jacobian_value_ptr[272] = _tmp2070;
    jacobian_value_ptr[273] = _tmp2145;
    jacobian_value_ptr[274] = _tmp2097;
    jacobian_value_ptr[275] = _tmp2141;
    jacobian_value_ptr[276] = _tmp2150;
    jacobian_value_ptr[277] = _tmp2045;
    jacobian_value_ptr[278] = _tmp2148;
    jacobian_value_ptr[279] = _tmp2128;
    jacobian_value_ptr[280] = _tmp2066;
    jacobian_value_ptr[281] = _tmp2147;
    jacobian_value_ptr[282] = _tmp2134;
    jacobian_value_ptr[283] = _tmp2101;
    jacobian_value_ptr[284] = _tmp2085;
    jacobian_value_ptr[285] = _tmp2086;
    jacobian_value_ptr[286] = _tmp2035;
    jacobian_value_ptr[287] = _tmp2041;
    jacobian_value_ptr[288] = _tmp2138;
    jacobian_value_ptr[289] = _tmp2140;
    jacobian_value_ptr[290] = _tmp2081;
    jacobian_value_ptr[291] = _tmp2102;
    jacobian_value_ptr[292] = _tmp2059;
    jacobian_value_ptr[293] = _tmp2143;
    jacobian_value_ptr[294] = _tmp2049;
    jacobian_value_ptr[295] = _tmp2133;
    jacobian_value_ptr[296] = _tmp2116;
    jacobian_value_ptr[297] = _tmp2120;
    jacobian_value_ptr[298] = _tmp2054;
    jacobian_value_ptr[299] = _tmp2092;
    jacobian_value_ptr[300] = _tmp2107;
    jacobian_value_ptr[301] = _tmp2149;
    jacobian_value_ptr[302] = _tmp2144;
    jacobian_value_ptr[303] = _tmp2132;
    jacobian_value_ptr[304] = _tmp2123;
    jacobian_value_ptr[305] = _tmp2091;
    jacobian_value_ptr[306] = _tmp2151;
    jacobian_value_ptr[307] = _tmp2040;
    jacobian_value_ptr[308] = _tmp2061;
    jacobian_value_ptr[309] = _tmp2031;
    jacobian_value_ptr[310] = _tmp2108;
    jacobian_value_ptr[311] = _tmp2076;
    jacobian_value_ptr[312] = _tmp2161;
    jacobian_value_ptr[313] = _tmp2163;
    jacobian_value_ptr[314] = _tmp765;
    jacobian_value_ptr[315] = _tmp2169;
    jacobian_value_ptr[316] = _tmp2170;
    jacobian_value_ptr[317] = _tmp768;
    jacobian_value_ptr[318] = _tmp2175;
    jacobian_value_ptr[319] = _tmp2176;
    jacobian_value_ptr[320] = _tmp771;
    jacobian_value_ptr[321] = _tmp2180;
    jacobian_value_ptr[322] = _tmp2183;
    jacobian_value_ptr[323] = _tmp774;
    jacobian_value_ptr[324] = _tmp2189;
    jacobian_value_ptr[325] = _tmp2188;
    jacobian_value_ptr[326] = _tmp777;
    jacobian_value_ptr[327] = _tmp2194;
    jacobian_value_ptr[328] = _tmp2195;
    jacobian_value_ptr[329] = _tmp780;
    jacobian_value_ptr[330] = _tmp2200;
    jacobian_value_ptr[331] = _tmp2201;
    jacobian_value_ptr[332] = _tmp783;
    jacobian_value_ptr[333] = _tmp2207;
    jacobian_value_ptr[334] = _tmp2208;
    jacobian_value_ptr[335] = _tmp786;
    jacobian_value_ptr[336] = _tmp2212;
    jacobian_value_ptr[337] = _tmp2214;
    jacobian_value_ptr[338] = _tmp789;
    jacobian_value_ptr[339] = _tmp2220;
    jacobian_value_ptr[340] = _tmp2218;
    jacobian_value_ptr[341] = _tmp792;
    jacobian_value_ptr[342] = _tmp2224;
    jacobian_value_ptr[343] = _tmp2225;
    jacobian_value_ptr[344] = _tmp795;
    jacobian_value_ptr[345] = _tmp2232;
    jacobian_value_ptr[346] = _tmp2231;
    jacobian_value_ptr[347] = _tmp798;
    jacobian_value_ptr[348] = _tmp2238;
    jacobian_value_ptr[349] = _tmp2236;
    jacobian_value_ptr[350] = _tmp801;
    jacobian_value_ptr[351] = _tmp2243;
    jacobian_value_ptr[352] = _tmp2244;
    jacobian_value_ptr[353] = _tmp804;
    jacobian_value_ptr[354] = _tmp2248;
    jacobian_value_ptr[355] = _tmp2249;
    jacobian_value_ptr[356] = _tmp807;
    jacobian_value_ptr[357] = _tmp2255;
    jacobian_value_ptr[358] = _tmp2256;
    jacobian_value_ptr[359] = _tmp810;
    jacobian_value_ptr[360] = _tmp2262;
    jacobian_value_ptr[361] = _tmp2261;
    jacobian_value_ptr[362] = _tmp813;
    jacobian_value_ptr[363] = _tmp2268;
    jacobian_value_ptr[364] = _tmp2269;
    jacobian_value_ptr[365] = _tmp816;
    jacobian_value_ptr[366] = _tmp2273;
    jacobian_value_ptr[367] = _tmp2275;
    jacobian_value_ptr[368] = _tmp819;
    jacobian_value_ptr[369] = _tmp2281;
    jacobian_value_ptr[370] = _tmp2282;
    jacobian_value_ptr[371] = _tmp822;
  }

  if (hessian != nullptr) {
    static constexpr int kRows_hessian = 26;
    static constexpr int kCols_hessian = 26;
    static constexpr int kNumNonZero_hessian = 161;
    static constexpr int kColPtrs_hessian[] = {0,   26,  51,  75,  98,  120, 141, 142, 143,
                                               144, 145, 146, 147, 148, 149, 150, 151, 152,
                                               153, 154, 155, 156, 157, 158, 159, 160, 161};
    static constexpr int kRowIndices_hessian[] = {
        0,  1,  2,  3,  4,  5,  6, 7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 1,  2,  3,  4, 5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 2,  3, 4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 3, 4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 4, 5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 5,  6, 7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
    if (hessian->nonZeros() != 161 || hessian->outerSize() != 26 || hessian->innerSize() != 26 ||
        !hessian->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar hessian_empty_value_ptr[161];
      *hessian = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_hessian, kCols_hessian, kNumNonZero_hessian, kColPtrs_hessian, kRowIndices_hessian,
          hessian_empty_value_ptr);
    }
    Scalar* hessian_value_ptr = hessian->valuePtr();

    hessian_value_ptr[0] = std::pow(_tmp1010, Scalar(2)) + std::pow(_tmp1025, Scalar(2)) +
                           std::pow(_tmp1039, Scalar(2)) + std::pow(_tmp1051, Scalar(2)) +
                           std::pow(_tmp1087, Scalar(2)) + std::pow(_tmp1102, Scalar(2)) +
                           std::pow(_tmp1116, Scalar(2)) + std::pow(_tmp1131, Scalar(2)) +
                           std::pow(_tmp1146, Scalar(2)) + std::pow(_tmp1162, Scalar(2)) +
                           std::pow(_tmp1166, Scalar(2)) + std::pow(_tmp1170, Scalar(2)) +
                           std::pow(_tmp1172, Scalar(2)) + std::pow(_tmp1179, Scalar(2)) +
                           std::pow(_tmp1182, Scalar(2)) + std::pow(_tmp1186, Scalar(2)) +
                           std::pow(_tmp1199, Scalar(2)) + std::pow(_tmp1202, Scalar(2)) +
                           std::pow(_tmp1217, Scalar(2)) + std::pow(_tmp1221, Scalar(2)) +
                           std::pow(_tmp1236, Scalar(2)) + std::pow(_tmp1241, Scalar(2)) +
                           std::pow(_tmp1245, Scalar(2)) + std::pow(_tmp1251, Scalar(2)) +
                           std::pow(_tmp1254, Scalar(2)) + std::pow(_tmp1257, Scalar(2)) +
                           std::pow(_tmp1260, Scalar(2)) + std::pow(_tmp1263, Scalar(2)) +
                           std::pow(_tmp1265, Scalar(2)) + std::pow(_tmp1268, Scalar(2)) +
                           std::pow(_tmp1272, Scalar(2)) + std::pow(_tmp1275, Scalar(2)) +
                           std::pow(_tmp1279, Scalar(2)) + std::pow(_tmp1285, Scalar(2)) +
                           std::pow(_tmp1298, Scalar(2)) + std::pow(_tmp1302, Scalar(2)) +
                           std::pow(_tmp1305, Scalar(2)) + std::pow(_tmp1319, Scalar(2)) +
                           std::pow(_tmp1323, Scalar(2)) + std::pow(_tmp1328, Scalar(2)) +
                           std::pow(_tmp1334, Scalar(2)) + std::pow(_tmp1338, Scalar(2)) +
                           std::pow(_tmp887, Scalar(2)) + std::pow(_tmp904, Scalar(2)) +
                           std::pow(_tmp921, Scalar(2)) + std::pow(_tmp925, Scalar(2)) +
                           std::pow(_tmp941, Scalar(2)) + std::pow(_tmp955, Scalar(2)) +
                           std::pow(_tmp960, Scalar(2)) + std::pow(_tmp975, Scalar(2)) +
                           std::pow(_tmp978, Scalar(2)) + std::pow(_tmp993, Scalar(2));
    hessian_value_ptr[1] =
        _tmp1010 * _tmp1536 + _tmp1025 * _tmp1512 + _tmp1039 * _tmp1478 + _tmp1051 * _tmp1373 +
        _tmp1087 * _tmp1527 + _tmp1102 * _tmp1496 + _tmp1116 * _tmp1548 + _tmp1131 * _tmp1453 +
        _tmp1146 * _tmp1506 + _tmp1162 * _tmp1526 + _tmp1166 * _tmp1509 + _tmp1170 * _tmp1553 +
        _tmp1172 * _tmp1546 + _tmp1179 * _tmp1394 + _tmp1182 * _tmp1381 + _tmp1186 * _tmp1494 +
        _tmp1199 * _tmp1437 + _tmp1202 * _tmp1530 + _tmp1217 * _tmp1551 + _tmp1221 * _tmp1531 +
        _tmp1236 * _tmp1391 + _tmp1241 * _tmp1464 + _tmp1245 * _tmp1498 + _tmp1251 * _tmp1545 +
        _tmp1254 * _tmp1471 + _tmp1257 * _tmp1487 + _tmp1260 * _tmp1552 + _tmp1263 * _tmp1356 +
        _tmp1265 * _tmp1499 + _tmp1268 * _tmp1389 + _tmp1272 * _tmp1431 + _tmp1275 * _tmp1529 +
        _tmp1279 * _tmp1547 + _tmp1285 * _tmp1495 + _tmp1298 * _tmp1439 + _tmp1302 * _tmp1541 +
        _tmp1305 * _tmp1508 + _tmp1319 * _tmp1445 + _tmp1323 * _tmp1426 + _tmp1328 * _tmp1497 +
        _tmp1334 * _tmp1544 + _tmp1338 * _tmp1459 + _tmp1380 * _tmp921 + _tmp1395 * _tmp925 +
        _tmp1402 * _tmp955 + _tmp1419 * _tmp960 + _tmp1480 * _tmp904 + _tmp1511 * _tmp993 +
        _tmp1518 * _tmp941 + _tmp1543 * _tmp975 + _tmp1549 * _tmp978 + _tmp1550 * _tmp887;
    hessian_value_ptr[2] =
        _tmp1010 * _tmp1684 + _tmp1025 * _tmp1681 + _tmp1039 * _tmp1635 + _tmp1051 * _tmp1667 +
        _tmp1087 * _tmp1690 + _tmp1102 * _tmp1685 + _tmp1116 * _tmp1613 + _tmp1131 * _tmp1661 +
        _tmp1146 * _tmp1604 + _tmp1162 * _tmp1636 + _tmp1166 * _tmp1689 + _tmp1170 * _tmp1680 +
        _tmp1172 * _tmp1657 + _tmp1179 * _tmp1605 + _tmp1182 * _tmp1599 + _tmp1186 * _tmp1569 +
        _tmp1199 * _tmp1683 + _tmp1202 * _tmp1679 + _tmp1217 * _tmp1686 + _tmp1221 * _tmp1691 +
        _tmp1236 * _tmp1565 + _tmp1241 * _tmp1619 + _tmp1245 * _tmp1631 + _tmp1251 * _tmp1678 +
        _tmp1254 * _tmp1672 + _tmp1257 * _tmp1688 + _tmp1260 * _tmp1646 + _tmp1263 * _tmp1618 +
        _tmp1265 * _tmp1582 + _tmp1268 * _tmp1642 + _tmp1272 * _tmp1671 + _tmp1275 * _tmp1623 +
        _tmp1279 * _tmp1656 + _tmp1285 * _tmp1665 + _tmp1298 * _tmp1696 + _tmp1302 * _tmp1641 +
        _tmp1305 * _tmp1595 + _tmp1319 * _tmp1697 + _tmp1323 * _tmp1699 + _tmp1328 * _tmp1682 +
        _tmp1334 * _tmp1617 + _tmp1338 * _tmp1655 + _tmp1561 * _tmp904 + _tmp1600 * _tmp887 +
        _tmp1609 * _tmp975 + _tmp1627 * _tmp993 + _tmp1650 * _tmp941 + _tmp1654 * _tmp921 +
        _tmp1666 * _tmp925 + _tmp1676 * _tmp955 + _tmp1677 * _tmp960 + _tmp1698 * _tmp978;
    hessian_value_ptr[3] =
        _tmp1010 * _tmp1751 + _tmp1025 * _tmp1876 + _tmp1039 * _tmp1770 + _tmp1051 * _tmp1894 +
        _tmp1087 * _tmp1752 + _tmp1102 * _tmp1735 + _tmp1116 * _tmp1810 + _tmp1131 * _tmp1843 +
        _tmp1146 * _tmp1869 + _tmp1162 * _tmp1808 + _tmp1166 * _tmp1890 + _tmp1170 * _tmp1734 +
        _tmp1172 * _tmp1838 + _tmp1179 * _tmp1840 + _tmp1182 * _tmp1887 + _tmp1186 * _tmp1717 +
        _tmp1199 * _tmp1785 + _tmp1202 * _tmp1726 + _tmp1217 * _tmp1878 + _tmp1221 * _tmp1805 +
        _tmp1236 * _tmp1837 + _tmp1241 * _tmp1777 + _tmp1245 * _tmp1867 + _tmp1251 * _tmp1891 +
        _tmp1254 * _tmp1828 + _tmp1257 * _tmp1760 + _tmp1260 * _tmp1743 + _tmp1263 * _tmp1736 +
        _tmp1265 * _tmp1896 + _tmp1268 * _tmp1818 + _tmp1272 * _tmp1895 + _tmp1275 * _tmp1708 +
        _tmp1279 * _tmp1806 + _tmp1285 * _tmp1842 + _tmp1298 * _tmp1886 + _tmp1302 * _tmp1793 +
        _tmp1305 * _tmp1797 + _tmp1319 * _tmp1858 + _tmp1323 * _tmp1889 + _tmp1328 * _tmp1841 +
        _tmp1334 * _tmp1893 + _tmp1338 * _tmp1851 + _tmp1725 * _tmp941 + _tmp1750 * _tmp925 +
        _tmp1761 * _tmp993 + _tmp1796 * _tmp978 + _tmp1807 * _tmp960 + _tmp1819 * _tmp887 +
        _tmp1835 * _tmp955 + _tmp1839 * _tmp921 + _tmp1859 * _tmp975 + _tmp1877 * _tmp904;
    hessian_value_ptr[4] =
        _tmp1010 * _tmp1950 + _tmp1025 * _tmp2013 + _tmp1039 * _tmp1932 + _tmp1051 * _tmp1965 +
        _tmp1087 * _tmp1928 + _tmp1102 * _tmp2021 + _tmp1116 * _tmp1991 + _tmp1131 * _tmp1979 +
        _tmp1146 * _tmp1941 + _tmp1162 * _tmp2012 + _tmp1166 * _tmp2022 + _tmp1170 * _tmp1966 +
        _tmp1172 * _tmp2002 + _tmp1179 * _tmp1992 + _tmp1182 * _tmp1999 + _tmp1186 * _tmp2019 +
        _tmp1199 * _tmp2001 + _tmp1202 * _tmp1927 + _tmp1217 * _tmp1984 + _tmp1221 * _tmp2027 +
        _tmp1236 * _tmp1974 + _tmp1241 * _tmp2010 + _tmp1245 * _tmp1910 + _tmp1251 * _tmp1916 +
        _tmp1254 * _tmp2023 + _tmp1257 * _tmp1945 + _tmp1260 * _tmp2024 + _tmp1263 * _tmp1955 +
        _tmp1265 * _tmp2026 + _tmp1268 * _tmp1900 + _tmp1272 * _tmp1926 + _tmp1275 * _tmp1954 +
        _tmp1279 * _tmp2025 + _tmp1285 * _tmp1998 + _tmp1298 * _tmp2020 + _tmp1302 * _tmp1972 +
        _tmp1305 * _tmp1993 + _tmp1319 * _tmp2011 + _tmp1323 * _tmp1983 + _tmp1328 * _tmp1962 +
        _tmp1334 * _tmp2007 + _tmp1338 * _tmp1985 + _tmp1906 * _tmp921 + _tmp1915 * _tmp941 +
        _tmp1921 * _tmp975 + _tmp1937 * _tmp904 + _tmp1957 * _tmp978 + _tmp1963 * _tmp993 +
        _tmp1964 * _tmp925 + _tmp1967 * _tmp887 + _tmp1973 * _tmp960 + _tmp2009 * _tmp955;
    hessian_value_ptr[5] =
        _tmp1010 * _tmp2116 + _tmp1025 * _tmp2148 + _tmp1039 * _tmp2134 + _tmp1051 * _tmp2151 +
        _tmp1087 * _tmp2071 + _tmp1102 * _tmp2076 + _tmp1116 * _tmp2145 + _tmp1131 * _tmp2041 +
        _tmp1146 * _tmp2031 + _tmp1162 * _tmp2150 + _tmp1166 * _tmp2152 + _tmp1170 * _tmp2061 +
        _tmp1172 * _tmp2146 + _tmp1179 * _tmp2139 + _tmp1182 * _tmp2142 + _tmp1186 * _tmp2108 +
        _tmp1199 * _tmp2147 + _tmp1202 * _tmp2072 + _tmp1217 * _tmp2144 + _tmp1221 * _tmp2035 +
        _tmp1236 * _tmp2140 + _tmp1241 * _tmp2070 + _tmp1245 * _tmp2040 + _tmp1251 * _tmp2054 +
        _tmp1254 * _tmp2107 + _tmp1257 * _tmp2086 + _tmp1260 * _tmp2120 + _tmp1263 * _tmp2060 +
        _tmp1265 * _tmp2153 + _tmp1268 * _tmp2138 + _tmp1272 * _tmp2128 + _tmp1275 * _tmp2045 +
        _tmp1279 * _tmp2101 + _tmp1285 * _tmp2066 + _tmp1298 * _tmp2102 + _tmp1302 * _tmp2132 +
        _tmp1305 * _tmp2109 + _tmp1319 * _tmp2091 + _tmp1323 * _tmp2081 + _tmp1328 * _tmp2097 +
        _tmp1334 * _tmp2123 + _tmp1338 * _tmp2059 + _tmp2049 * _tmp921 + _tmp2085 * _tmp993 +
        _tmp2092 * _tmp941 + _tmp2118 * _tmp978 + _tmp2121 * _tmp887 + _tmp2122 * _tmp960 +
        _tmp2133 * _tmp925 + _tmp2141 * _tmp955 + _tmp2143 * _tmp975 + _tmp2149 * _tmp904;
    hessian_value_ptr[6] = _tmp1116 * _tmp2163 + _tmp1241 * _tmp2161;
    hessian_value_ptr[7] = _tmp1328 * _tmp2169 + _tmp2170 * _tmp955;
    hessian_value_ptr[8] = _tmp1162 * _tmp2175 + _tmp1275 * _tmp2176;
    hessian_value_ptr[9] = _tmp1025 * _tmp2180 + _tmp1272 * _tmp2183;
    hessian_value_ptr[10] = _tmp1199 * _tmp2188 + _tmp1285 * _tmp2189;
    hessian_value_ptr[11] = _tmp1039 * _tmp2194 + _tmp1279 * _tmp2195;
    hessian_value_ptr[12] = _tmp1257 * _tmp2201 + _tmp2200 * _tmp993;
    hessian_value_ptr[13] = _tmp1131 * _tmp2208 + _tmp1221 * _tmp2207;
    hessian_value_ptr[14] = _tmp1236 * _tmp2214 + _tmp1268 * _tmp2212;
    hessian_value_ptr[15] = _tmp1298 * _tmp2218 + _tmp1323 * _tmp2220;
    hessian_value_ptr[16] = _tmp1338 * _tmp2224 + _tmp2225 * _tmp975;
    hessian_value_ptr[17] = _tmp2231 * _tmp925 + _tmp2232 * _tmp921;
    hessian_value_ptr[18] = _tmp1010 * _tmp2238 + _tmp1260 * _tmp2236;
    hessian_value_ptr[19] = _tmp1251 * _tmp2243 + _tmp2244 * _tmp941;
    hessian_value_ptr[20] = _tmp1254 * _tmp2248 + _tmp2249 * _tmp904;
    hessian_value_ptr[21] = _tmp1217 * _tmp2255 + _tmp1302 * _tmp2256;
    hessian_value_ptr[22] = _tmp1319 * _tmp2261 + _tmp1334 * _tmp2262;
    hessian_value_ptr[23] = _tmp1051 * _tmp2268 + _tmp1245 * _tmp2269;
    hessian_value_ptr[24] = _tmp1146 * _tmp2275 + _tmp1170 * _tmp2273;
    hessian_value_ptr[25] = _tmp1102 * _tmp2282 + _tmp1186 * _tmp2281;
    hessian_value_ptr[26] = std::pow(_tmp1356, Scalar(2)) + std::pow(_tmp1373, Scalar(2)) +
                            std::pow(_tmp1380, Scalar(2)) + std::pow(_tmp1381, Scalar(2)) +
                            std::pow(_tmp1389, Scalar(2)) + std::pow(_tmp1391, Scalar(2)) +
                            std::pow(_tmp1394, Scalar(2)) + std::pow(_tmp1395, Scalar(2)) +
                            std::pow(_tmp1402, Scalar(2)) + std::pow(_tmp1419, Scalar(2)) +
                            std::pow(_tmp1426, Scalar(2)) + std::pow(_tmp1431, Scalar(2)) +
                            std::pow(_tmp1437, Scalar(2)) + std::pow(_tmp1439, Scalar(2)) +
                            std::pow(_tmp1445, Scalar(2)) + std::pow(_tmp1453, Scalar(2)) +
                            std::pow(_tmp1459, Scalar(2)) + std::pow(_tmp1464, Scalar(2)) +
                            std::pow(_tmp1471, Scalar(2)) + std::pow(_tmp1478, Scalar(2)) +
                            std::pow(_tmp1480, Scalar(2)) + std::pow(_tmp1487, Scalar(2)) +
                            std::pow(_tmp1494, Scalar(2)) + std::pow(_tmp1495, Scalar(2)) +
                            std::pow(_tmp1496, Scalar(2)) + std::pow(_tmp1497, Scalar(2)) +
                            std::pow(_tmp1498, Scalar(2)) + std::pow(_tmp1499, Scalar(2)) +
                            std::pow(_tmp1506, Scalar(2)) + std::pow(_tmp1508, Scalar(2)) +
                            std::pow(_tmp1509, Scalar(2)) + std::pow(_tmp1511, Scalar(2)) +
                            std::pow(_tmp1512, Scalar(2)) + std::pow(_tmp1518, Scalar(2)) +
                            std::pow(_tmp1526, Scalar(2)) + std::pow(_tmp1527, Scalar(2)) +
                            std::pow(_tmp1529, Scalar(2)) + std::pow(_tmp1530, Scalar(2)) +
                            std::pow(_tmp1531, Scalar(2)) + std::pow(_tmp1536, Scalar(2)) +
                            std::pow(_tmp1541, Scalar(2)) + std::pow(_tmp1543, Scalar(2)) +
                            std::pow(_tmp1544, Scalar(2)) + std::pow(_tmp1545, Scalar(2)) +
                            std::pow(_tmp1546, Scalar(2)) + std::pow(_tmp1547, Scalar(2)) +
                            std::pow(_tmp1548, Scalar(2)) + std::pow(_tmp1549, Scalar(2)) +
                            std::pow(_tmp1550, Scalar(2)) + std::pow(_tmp1551, Scalar(2)) +
                            std::pow(_tmp1552, Scalar(2)) + std::pow(_tmp1553, Scalar(2));
    hessian_value_ptr[27] =
        _tmp1356 * _tmp1618 + _tmp1373 * _tmp1667 + _tmp1380 * _tmp1654 + _tmp1381 * _tmp1599 +
        _tmp1389 * _tmp1642 + _tmp1391 * _tmp1565 + _tmp1394 * _tmp1605 + _tmp1395 * _tmp1666 +
        _tmp1402 * _tmp1676 + _tmp1419 * _tmp1677 + _tmp1426 * _tmp1699 + _tmp1431 * _tmp1671 +
        _tmp1437 * _tmp1683 + _tmp1439 * _tmp1696 + _tmp1445 * _tmp1697 + _tmp1453 * _tmp1661 +
        _tmp1459 * _tmp1655 + _tmp1464 * _tmp1619 + _tmp1471 * _tmp1672 + _tmp1478 * _tmp1635 +
        _tmp1480 * _tmp1561 + _tmp1487 * _tmp1688 + _tmp1494 * _tmp1569 + _tmp1495 * _tmp1665 +
        _tmp1496 * _tmp1685 + _tmp1497 * _tmp1682 + _tmp1498 * _tmp1631 + _tmp1499 * _tmp1582 +
        _tmp1506 * _tmp1604 + _tmp1508 * _tmp1595 + _tmp1509 * _tmp1689 + _tmp1511 * _tmp1627 +
        _tmp1512 * _tmp1681 + _tmp1518 * _tmp1650 + _tmp1526 * _tmp1636 + _tmp1527 * _tmp1690 +
        _tmp1529 * _tmp1623 + _tmp1530 * _tmp1679 + _tmp1531 * _tmp1691 + _tmp1536 * _tmp1684 +
        _tmp1541 * _tmp1641 + _tmp1543 * _tmp1609 + _tmp1544 * _tmp1617 + _tmp1545 * _tmp1678 +
        _tmp1546 * _tmp1657 + _tmp1547 * _tmp1656 + _tmp1548 * _tmp1613 + _tmp1549 * _tmp1698 +
        _tmp1550 * _tmp1600 + _tmp1551 * _tmp1686 + _tmp1552 * _tmp1646 + _tmp1553 * _tmp1680;
    hessian_value_ptr[28] =
        _tmp1356 * _tmp1736 + _tmp1373 * _tmp1894 + _tmp1380 * _tmp1839 + _tmp1381 * _tmp1887 +
        _tmp1389 * _tmp1818 + _tmp1391 * _tmp1837 + _tmp1394 * _tmp1840 + _tmp1395 * _tmp1750 +
        _tmp1402 * _tmp1835 + _tmp1419 * _tmp1807 + _tmp1426 * _tmp1889 + _tmp1431 * _tmp1895 +
        _tmp1437 * _tmp1785 + _tmp1439 * _tmp1886 + _tmp1445 * _tmp1858 + _tmp1453 * _tmp1843 +
        _tmp1459 * _tmp1851 + _tmp1464 * _tmp1777 + _tmp1471 * _tmp1828 + _tmp1478 * _tmp1770 +
        _tmp1480 * _tmp1877 + _tmp1487 * _tmp1760 + _tmp1494 * _tmp1717 + _tmp1495 * _tmp1842 +
        _tmp1496 * _tmp1735 + _tmp1497 * _tmp1841 + _tmp1498 * _tmp1867 + _tmp1499 * _tmp1896 +
        _tmp1506 * _tmp1869 + _tmp1508 * _tmp1797 + _tmp1509 * _tmp1890 + _tmp1511 * _tmp1761 +
        _tmp1512 * _tmp1876 + _tmp1518 * _tmp1725 + _tmp1526 * _tmp1808 + _tmp1527 * _tmp1752 +
        _tmp1529 * _tmp1708 + _tmp1530 * _tmp1726 + _tmp1531 * _tmp1805 + _tmp1536 * _tmp1751 +
        _tmp1541 * _tmp1793 + _tmp1543 * _tmp1859 + _tmp1544 * _tmp1893 + _tmp1545 * _tmp1891 +
        _tmp1546 * _tmp1838 + _tmp1547 * _tmp1806 + _tmp1548 * _tmp1810 + _tmp1549 * _tmp1796 +
        _tmp1550 * _tmp1819 + _tmp1551 * _tmp1878 + _tmp1552 * _tmp1743 + _tmp1553 * _tmp1734;
    hessian_value_ptr[29] =
        _tmp1356 * _tmp1955 + _tmp1373 * _tmp1965 + _tmp1380 * _tmp1906 + _tmp1381 * _tmp1999 +
        _tmp1389 * _tmp1900 + _tmp1391 * _tmp1974 + _tmp1394 * _tmp1992 + _tmp1395 * _tmp1964 +
        _tmp1402 * _tmp2009 + _tmp1419 * _tmp1973 + _tmp1426 * _tmp1983 + _tmp1431 * _tmp1926 +
        _tmp1437 * _tmp2001 + _tmp1439 * _tmp2020 + _tmp1445 * _tmp2011 + _tmp1453 * _tmp1979 +
        _tmp1459 * _tmp1985 + _tmp1464 * _tmp2010 + _tmp1471 * _tmp2023 + _tmp1478 * _tmp1932 +
        _tmp1480 * _tmp1937 + _tmp1487 * _tmp1945 + _tmp1494 * _tmp2019 + _tmp1495 * _tmp1998 +
        _tmp1496 * _tmp2021 + _tmp1497 * _tmp1962 + _tmp1498 * _tmp1910 + _tmp1499 * _tmp2026 +
        _tmp1506 * _tmp1941 + _tmp1508 * _tmp1993 + _tmp1509 * _tmp2022 + _tmp1511 * _tmp1963 +
        _tmp1512 * _tmp2013 + _tmp1518 * _tmp1915 + _tmp1526 * _tmp2012 + _tmp1527 * _tmp1928 +
        _tmp1529 * _tmp1954 + _tmp1530 * _tmp1927 + _tmp1531 * _tmp2027 + _tmp1536 * _tmp1950 +
        _tmp1541 * _tmp1972 + _tmp1543 * _tmp1921 + _tmp1544 * _tmp2007 + _tmp1545 * _tmp1916 +
        _tmp1546 * _tmp2002 + _tmp1547 * _tmp2025 + _tmp1548 * _tmp1991 + _tmp1549 * _tmp1957 +
        _tmp1550 * _tmp1967 + _tmp1551 * _tmp1984 + _tmp1552 * _tmp2024 + _tmp1553 * _tmp1966;
    hessian_value_ptr[30] =
        _tmp1356 * _tmp2060 + _tmp1373 * _tmp2151 + _tmp1380 * _tmp2049 + _tmp1381 * _tmp2142 +
        _tmp1389 * _tmp2138 + _tmp1391 * _tmp2140 + _tmp1394 * _tmp2139 + _tmp1395 * _tmp2133 +
        _tmp1402 * _tmp2141 + _tmp1419 * _tmp2122 + _tmp1426 * _tmp2081 + _tmp1431 * _tmp2128 +
        _tmp1437 * _tmp2147 + _tmp1439 * _tmp2102 + _tmp1445 * _tmp2091 + _tmp1453 * _tmp2041 +
        _tmp1459 * _tmp2059 + _tmp1464 * _tmp2070 + _tmp1471 * _tmp2107 + _tmp1478 * _tmp2134 +
        _tmp1480 * _tmp2149 + _tmp1487 * _tmp2086 + _tmp1494 * _tmp2108 + _tmp1495 * _tmp2066 +
        _tmp1496 * _tmp2076 + _tmp1497 * _tmp2097 + _tmp1498 * _tmp2040 + _tmp1499 * _tmp2153 +
        _tmp1506 * _tmp2031 + _tmp1508 * _tmp2109 + _tmp1509 * _tmp2152 + _tmp1511 * _tmp2085 +
        _tmp1512 * _tmp2148 + _tmp1518 * _tmp2092 + _tmp1526 * _tmp2150 + _tmp1527 * _tmp2071 +
        _tmp1529 * _tmp2045 + _tmp1530 * _tmp2072 + _tmp1531 * _tmp2035 + _tmp1536 * _tmp2116 +
        _tmp1541 * _tmp2132 + _tmp1543 * _tmp2143 + _tmp1544 * _tmp2123 + _tmp1545 * _tmp2054 +
        _tmp1546 * _tmp2146 + _tmp1547 * _tmp2101 + _tmp1548 * _tmp2145 + _tmp1549 * _tmp2118 +
        _tmp1550 * _tmp2121 + _tmp1551 * _tmp2144 + _tmp1552 * _tmp2120 + _tmp1553 * _tmp2061;
    hessian_value_ptr[31] = _tmp1464 * _tmp2161 + _tmp1548 * _tmp2163;
    hessian_value_ptr[32] = _tmp1402 * _tmp2170 + _tmp1497 * _tmp2169;
    hessian_value_ptr[33] = _tmp1526 * _tmp2175 + _tmp1529 * _tmp2176;
    hessian_value_ptr[34] = _tmp1431 * _tmp2183 + _tmp1512 * _tmp2180;
    hessian_value_ptr[35] = _tmp1437 * _tmp2188 + _tmp1495 * _tmp2189;
    hessian_value_ptr[36] = _tmp1478 * _tmp2194 + _tmp1547 * _tmp2195;
    hessian_value_ptr[37] = _tmp1487 * _tmp2201 + _tmp1511 * _tmp2200;
    hessian_value_ptr[38] = _tmp1453 * _tmp2208 + _tmp1531 * _tmp2207;
    hessian_value_ptr[39] = _tmp1389 * _tmp2212 + _tmp1391 * _tmp2214;
    hessian_value_ptr[40] = _tmp1426 * _tmp2220 + _tmp1439 * _tmp2218;
    hessian_value_ptr[41] = _tmp1459 * _tmp2224 + _tmp1543 * _tmp2225;
    hessian_value_ptr[42] = _tmp1380 * _tmp2232 + _tmp1395 * _tmp2231;
    hessian_value_ptr[43] = _tmp1536 * _tmp2238 + _tmp1552 * _tmp2236;
    hessian_value_ptr[44] = _tmp1518 * _tmp2244 + _tmp1545 * _tmp2243;
    hessian_value_ptr[45] = _tmp1471 * _tmp2248 + _tmp1480 * _tmp2249;
    hessian_value_ptr[46] = _tmp1541 * _tmp2256 + _tmp1551 * _tmp2255;
    hessian_value_ptr[47] = _tmp1445 * _tmp2261 + _tmp1544 * _tmp2262;
    hessian_value_ptr[48] = _tmp1373 * _tmp2268 + _tmp1498 * _tmp2269;
    hessian_value_ptr[49] = _tmp1506 * _tmp2275 + _tmp1553 * _tmp2273;
    hessian_value_ptr[50] = _tmp1494 * _tmp2281 + _tmp1496 * _tmp2282;
    hessian_value_ptr[51] = std::pow(_tmp1561, Scalar(2)) + std::pow(_tmp1565, Scalar(2)) +
                            std::pow(_tmp1569, Scalar(2)) + std::pow(_tmp1582, Scalar(2)) +
                            std::pow(_tmp1595, Scalar(2)) + std::pow(_tmp1599, Scalar(2)) +
                            std::pow(_tmp1600, Scalar(2)) + std::pow(_tmp1604, Scalar(2)) +
                            std::pow(_tmp1605, Scalar(2)) + std::pow(_tmp1609, Scalar(2)) +
                            std::pow(_tmp1613, Scalar(2)) + std::pow(_tmp1617, Scalar(2)) +
                            std::pow(_tmp1618, Scalar(2)) + std::pow(_tmp1619, Scalar(2)) +
                            std::pow(_tmp1623, Scalar(2)) + std::pow(_tmp1627, Scalar(2)) +
                            std::pow(_tmp1631, Scalar(2)) + std::pow(_tmp1635, Scalar(2)) +
                            std::pow(_tmp1636, Scalar(2)) + std::pow(_tmp1641, Scalar(2)) +
                            std::pow(_tmp1642, Scalar(2)) + std::pow(_tmp1646, Scalar(2)) +
                            std::pow(_tmp1650, Scalar(2)) + std::pow(_tmp1654, Scalar(2)) +
                            std::pow(_tmp1655, Scalar(2)) + std::pow(_tmp1656, Scalar(2)) +
                            std::pow(_tmp1657, Scalar(2)) + std::pow(_tmp1661, Scalar(2)) +
                            std::pow(_tmp1665, Scalar(2)) + std::pow(_tmp1666, Scalar(2)) +
                            std::pow(_tmp1667, Scalar(2)) + std::pow(_tmp1671, Scalar(2)) +
                            std::pow(_tmp1672, Scalar(2)) + std::pow(_tmp1676, Scalar(2)) +
                            std::pow(_tmp1677, Scalar(2)) + std::pow(_tmp1678, Scalar(2)) +
                            std::pow(_tmp1679, Scalar(2)) + std::pow(_tmp1680, Scalar(2)) +
                            std::pow(_tmp1681, Scalar(2)) + std::pow(_tmp1682, Scalar(2)) +
                            std::pow(_tmp1683, Scalar(2)) + std::pow(_tmp1684, Scalar(2)) +
                            std::pow(_tmp1685, Scalar(2)) + std::pow(_tmp1686, Scalar(2)) +
                            std::pow(_tmp1688, Scalar(2)) + std::pow(_tmp1689, Scalar(2)) +
                            std::pow(_tmp1690, Scalar(2)) + std::pow(_tmp1691, Scalar(2)) +
                            std::pow(_tmp1696, Scalar(2)) + std::pow(_tmp1697, Scalar(2)) +
                            std::pow(_tmp1698, Scalar(2)) + std::pow(_tmp1699, Scalar(2));
    hessian_value_ptr[52] =
        _tmp1561 * _tmp1877 + _tmp1565 * _tmp1837 + _tmp1569 * _tmp1717 + _tmp1582 * _tmp1896 +
        _tmp1595 * _tmp1797 + _tmp1599 * _tmp1887 + _tmp1600 * _tmp1819 + _tmp1604 * _tmp1869 +
        _tmp1605 * _tmp1840 + _tmp1609 * _tmp1859 + _tmp1613 * _tmp1810 + _tmp1617 * _tmp1893 +
        _tmp1618 * _tmp1736 + _tmp1619 * _tmp1777 + _tmp1623 * _tmp1708 + _tmp1627 * _tmp1761 +
        _tmp1631 * _tmp1867 + _tmp1635 * _tmp1770 + _tmp1636 * _tmp1808 + _tmp1641 * _tmp1793 +
        _tmp1642 * _tmp1818 + _tmp1646 * _tmp1743 + _tmp1650 * _tmp1725 + _tmp1654 * _tmp1839 +
        _tmp1655 * _tmp1851 + _tmp1656 * _tmp1806 + _tmp1657 * _tmp1838 + _tmp1661 * _tmp1843 +
        _tmp1665 * _tmp1842 + _tmp1666 * _tmp1750 + _tmp1667 * _tmp1894 + _tmp1671 * _tmp1895 +
        _tmp1672 * _tmp1828 + _tmp1676 * _tmp1835 + _tmp1677 * _tmp1807 + _tmp1678 * _tmp1891 +
        _tmp1679 * _tmp1726 + _tmp1680 * _tmp1734 + _tmp1681 * _tmp1876 + _tmp1682 * _tmp1841 +
        _tmp1683 * _tmp1785 + _tmp1684 * _tmp1751 + _tmp1685 * _tmp1735 + _tmp1686 * _tmp1878 +
        _tmp1688 * _tmp1760 + _tmp1689 * _tmp1890 + _tmp1690 * _tmp1752 + _tmp1691 * _tmp1805 +
        _tmp1696 * _tmp1886 + _tmp1697 * _tmp1858 + _tmp1698 * _tmp1796 + _tmp1699 * _tmp1889;
    hessian_value_ptr[53] =
        _tmp1561 * _tmp1937 + _tmp1565 * _tmp1974 + _tmp1569 * _tmp2019 + _tmp1582 * _tmp2026 +
        _tmp1595 * _tmp1993 + _tmp1599 * _tmp1999 + _tmp1600 * _tmp1967 + _tmp1604 * _tmp1941 +
        _tmp1605 * _tmp1992 + _tmp1609 * _tmp1921 + _tmp1613 * _tmp1991 + _tmp1617 * _tmp2007 +
        _tmp1618 * _tmp1955 + _tmp1619 * _tmp2010 + _tmp1623 * _tmp1954 + _tmp1627 * _tmp1963 +
        _tmp1631 * _tmp1910 + _tmp1635 * _tmp1932 + _tmp1636 * _tmp2012 + _tmp1641 * _tmp1972 +
        _tmp1642 * _tmp1900 + _tmp1646 * _tmp2024 + _tmp1650 * _tmp1915 + _tmp1654 * _tmp1906 +
        _tmp1655 * _tmp1985 + _tmp1656 * _tmp2025 + _tmp1657 * _tmp2002 + _tmp1661 * _tmp1979 +
        _tmp1665 * _tmp1998 + _tmp1666 * _tmp1964 + _tmp1667 * _tmp1965 + _tmp1671 * _tmp1926 +
        _tmp1672 * _tmp2023 + _tmp1676 * _tmp2009 + _tmp1677 * _tmp1973 + _tmp1678 * _tmp1916 +
        _tmp1679 * _tmp1927 + _tmp1680 * _tmp1966 + _tmp1681 * _tmp2013 + _tmp1682 * _tmp1962 +
        _tmp1683 * _tmp2001 + _tmp1684 * _tmp1950 + _tmp1685 * _tmp2021 + _tmp1686 * _tmp1984 +
        _tmp1688 * _tmp1945 + _tmp1689 * _tmp2022 + _tmp1690 * _tmp1928 + _tmp1691 * _tmp2027 +
        _tmp1696 * _tmp2020 + _tmp1697 * _tmp2011 + _tmp1698 * _tmp1957 + _tmp1699 * _tmp1983;
    hessian_value_ptr[54] =
        _tmp1561 * _tmp2149 + _tmp1565 * _tmp2140 + _tmp1569 * _tmp2108 + _tmp1582 * _tmp2153 +
        _tmp1595 * _tmp2109 + _tmp1599 * _tmp2142 + _tmp1600 * _tmp2121 + _tmp1604 * _tmp2031 +
        _tmp1605 * _tmp2139 + _tmp1609 * _tmp2143 + _tmp1613 * _tmp2145 + _tmp1617 * _tmp2123 +
        _tmp1618 * _tmp2060 + _tmp1619 * _tmp2070 + _tmp1623 * _tmp2045 + _tmp1627 * _tmp2085 +
        _tmp1631 * _tmp2040 + _tmp1635 * _tmp2134 + _tmp1636 * _tmp2150 + _tmp1641 * _tmp2132 +
        _tmp1642 * _tmp2138 + _tmp1646 * _tmp2120 + _tmp1650 * _tmp2092 + _tmp1654 * _tmp2049 +
        _tmp1655 * _tmp2059 + _tmp1656 * _tmp2101 + _tmp1657 * _tmp2146 + _tmp1661 * _tmp2041 +
        _tmp1665 * _tmp2066 + _tmp1666 * _tmp2133 + _tmp1667 * _tmp2151 + _tmp1671 * _tmp2128 +
        _tmp1672 * _tmp2107 + _tmp1676 * _tmp2141 + _tmp1677 * _tmp2122 + _tmp1678 * _tmp2054 +
        _tmp1679 * _tmp2072 + _tmp1680 * _tmp2061 + _tmp1681 * _tmp2148 + _tmp1682 * _tmp2097 +
        _tmp1683 * _tmp2147 + _tmp1684 * _tmp2116 + _tmp1685 * _tmp2076 + _tmp1686 * _tmp2144 +
        _tmp1688 * _tmp2086 + _tmp1689 * _tmp2152 + _tmp1690 * _tmp2071 + _tmp1691 * _tmp2035 +
        _tmp1696 * _tmp2102 + _tmp1697 * _tmp2091 + _tmp1698 * _tmp2118 + _tmp1699 * _tmp2081;
    hessian_value_ptr[55] = _tmp1613 * _tmp2163 + _tmp1619 * _tmp2161;
    hessian_value_ptr[56] = _tmp1676 * _tmp2170 + _tmp1682 * _tmp2169;
    hessian_value_ptr[57] = _tmp1623 * _tmp2176 + _tmp1636 * _tmp2175;
    hessian_value_ptr[58] = _tmp1671 * _tmp2183 + _tmp1681 * _tmp2180;
    hessian_value_ptr[59] = _tmp1665 * _tmp2189 + _tmp1683 * _tmp2188;
    hessian_value_ptr[60] = _tmp1635 * _tmp2194 + _tmp1656 * _tmp2195;
    hessian_value_ptr[61] = _tmp1627 * _tmp2200 + _tmp1688 * _tmp2201;
    hessian_value_ptr[62] = _tmp1661 * _tmp2208 + _tmp1691 * _tmp2207;
    hessian_value_ptr[63] = _tmp1565 * _tmp2214 + _tmp1642 * _tmp2212;
    hessian_value_ptr[64] = _tmp1696 * _tmp2218 + _tmp1699 * _tmp2220;
    hessian_value_ptr[65] = _tmp1609 * _tmp2225 + _tmp1655 * _tmp2224;
    hessian_value_ptr[66] = _tmp1654 * _tmp2232 + _tmp1666 * _tmp2231;
    hessian_value_ptr[67] = _tmp1646 * _tmp2236 + _tmp1684 * _tmp2238;
    hessian_value_ptr[68] = _tmp1650 * _tmp2244 + _tmp1678 * _tmp2243;
    hessian_value_ptr[69] = _tmp1561 * _tmp2249 + _tmp1672 * _tmp2248;
    hessian_value_ptr[70] = _tmp1641 * _tmp2256 + _tmp1686 * _tmp2255;
    hessian_value_ptr[71] = _tmp1617 * _tmp2262 + _tmp1697 * _tmp2261;
    hessian_value_ptr[72] = _tmp1631 * _tmp2269 + _tmp1667 * _tmp2268;
    hessian_value_ptr[73] = _tmp1604 * _tmp2275 + _tmp1680 * _tmp2273;
    hessian_value_ptr[74] = _tmp1569 * _tmp2281 + _tmp1685 * _tmp2282;
    hessian_value_ptr[75] = std::pow(_tmp1708, Scalar(2)) + std::pow(_tmp1717, Scalar(2)) +
                            std::pow(_tmp1725, Scalar(2)) + std::pow(_tmp1726, Scalar(2)) +
                            std::pow(_tmp1734, Scalar(2)) + std::pow(_tmp1735, Scalar(2)) +
                            std::pow(_tmp1736, Scalar(2)) + std::pow(_tmp1743, Scalar(2)) +
                            std::pow(_tmp1750, Scalar(2)) + std::pow(_tmp1751, Scalar(2)) +
                            std::pow(_tmp1752, Scalar(2)) + std::pow(_tmp1760, Scalar(2)) +
                            std::pow(_tmp1761, Scalar(2)) + std::pow(_tmp1770, Scalar(2)) +
                            std::pow(_tmp1777, Scalar(2)) + std::pow(_tmp1785, Scalar(2)) +
                            std::pow(_tmp1793, Scalar(2)) + std::pow(_tmp1796, Scalar(2)) +
                            std::pow(_tmp1797, Scalar(2)) + std::pow(_tmp1805, Scalar(2)) +
                            std::pow(_tmp1806, Scalar(2)) + std::pow(_tmp1807, Scalar(2)) +
                            std::pow(_tmp1808, Scalar(2)) + std::pow(_tmp1810, Scalar(2)) +
                            std::pow(_tmp1818, Scalar(2)) + std::pow(_tmp1819, Scalar(2)) +
                            std::pow(_tmp1828, Scalar(2)) + std::pow(_tmp1835, Scalar(2)) +
                            std::pow(_tmp1837, Scalar(2)) + std::pow(_tmp1838, Scalar(2)) +
                            std::pow(_tmp1839, Scalar(2)) + std::pow(_tmp1840, Scalar(2)) +
                            std::pow(_tmp1841, Scalar(2)) + std::pow(_tmp1842, Scalar(2)) +
                            std::pow(_tmp1843, Scalar(2)) + std::pow(_tmp1851, Scalar(2)) +
                            std::pow(_tmp1858, Scalar(2)) + std::pow(_tmp1859, Scalar(2)) +
                            std::pow(_tmp1867, Scalar(2)) + std::pow(_tmp1869, Scalar(2)) +
                            std::pow(_tmp1876, Scalar(2)) + std::pow(_tmp1877, Scalar(2)) +
                            std::pow(_tmp1878, Scalar(2)) + std::pow(_tmp1886, Scalar(2)) +
                            std::pow(_tmp1887, Scalar(2)) + std::pow(_tmp1889, Scalar(2)) +
                            std::pow(_tmp1890, Scalar(2)) + std::pow(_tmp1891, Scalar(2)) +
                            std::pow(_tmp1893, Scalar(2)) + std::pow(_tmp1894, Scalar(2)) +
                            std::pow(_tmp1895, Scalar(2)) + std::pow(_tmp1896, Scalar(2));
    hessian_value_ptr[76] =
        _tmp1708 * _tmp1954 + _tmp1717 * _tmp2019 + _tmp1725 * _tmp1915 + _tmp1726 * _tmp1927 +
        _tmp1734 * _tmp1966 + _tmp1735 * _tmp2021 + _tmp1736 * _tmp1955 + _tmp1743 * _tmp2024 +
        _tmp1750 * _tmp1964 + _tmp1751 * _tmp1950 + _tmp1752 * _tmp1928 + _tmp1760 * _tmp1945 +
        _tmp1761 * _tmp1963 + _tmp1770 * _tmp1932 + _tmp1777 * _tmp2010 + _tmp1785 * _tmp2001 +
        _tmp1793 * _tmp1972 + _tmp1796 * _tmp1957 + _tmp1797 * _tmp1993 + _tmp1805 * _tmp2027 +
        _tmp1806 * _tmp2025 + _tmp1807 * _tmp1973 + _tmp1808 * _tmp2012 + _tmp1810 * _tmp1991 +
        _tmp1818 * _tmp1900 + _tmp1819 * _tmp1967 + _tmp1828 * _tmp2023 + _tmp1835 * _tmp2009 +
        _tmp1837 * _tmp1974 + _tmp1838 * _tmp2002 + _tmp1839 * _tmp1906 + _tmp1840 * _tmp1992 +
        _tmp1841 * _tmp1962 + _tmp1842 * _tmp1998 + _tmp1843 * _tmp1979 + _tmp1851 * _tmp1985 +
        _tmp1858 * _tmp2011 + _tmp1859 * _tmp1921 + _tmp1867 * _tmp1910 + _tmp1869 * _tmp1941 +
        _tmp1876 * _tmp2013 + _tmp1877 * _tmp1937 + _tmp1878 * _tmp1984 + _tmp1886 * _tmp2020 +
        _tmp1887 * _tmp1999 + _tmp1889 * _tmp1983 + _tmp1890 * _tmp2022 + _tmp1891 * _tmp1916 +
        _tmp1893 * _tmp2007 + _tmp1894 * _tmp1965 + _tmp1895 * _tmp1926 + _tmp1896 * _tmp2026;
    hessian_value_ptr[77] =
        _tmp1708 * _tmp2045 + _tmp1717 * _tmp2108 + _tmp1725 * _tmp2092 + _tmp1726 * _tmp2072 +
        _tmp1734 * _tmp2061 + _tmp1735 * _tmp2076 + _tmp1736 * _tmp2060 + _tmp1743 * _tmp2120 +
        _tmp1750 * _tmp2133 + _tmp1751 * _tmp2116 + _tmp1752 * _tmp2071 + _tmp1760 * _tmp2086 +
        _tmp1761 * _tmp2085 + _tmp1770 * _tmp2134 + _tmp1777 * _tmp2070 + _tmp1785 * _tmp2147 +
        _tmp1793 * _tmp2132 + _tmp1796 * _tmp2118 + _tmp1797 * _tmp2109 + _tmp1805 * _tmp2035 +
        _tmp1806 * _tmp2101 + _tmp1807 * _tmp2122 + _tmp1808 * _tmp2150 + _tmp1810 * _tmp2145 +
        _tmp1818 * _tmp2138 + _tmp1819 * _tmp2121 + _tmp1828 * _tmp2107 + _tmp1835 * _tmp2141 +
        _tmp1837 * _tmp2140 + _tmp1838 * _tmp2146 + _tmp1839 * _tmp2049 + _tmp1840 * _tmp2139 +
        _tmp1841 * _tmp2097 + _tmp1842 * _tmp2066 + _tmp1843 * _tmp2041 + _tmp1851 * _tmp2059 +
        _tmp1858 * _tmp2091 + _tmp1859 * _tmp2143 + _tmp1867 * _tmp2040 + _tmp1869 * _tmp2031 +
        _tmp1876 * _tmp2148 + _tmp1877 * _tmp2149 + _tmp1878 * _tmp2144 + _tmp1886 * _tmp2102 +
        _tmp1887 * _tmp2142 + _tmp1889 * _tmp2081 + _tmp1890 * _tmp2152 + _tmp1891 * _tmp2054 +
        _tmp1893 * _tmp2123 + _tmp1894 * _tmp2151 + _tmp1895 * _tmp2128 + _tmp1896 * _tmp2153;
    hessian_value_ptr[78] = _tmp1777 * _tmp2161 + _tmp1810 * _tmp2163;
    hessian_value_ptr[79] = _tmp1835 * _tmp2170 + _tmp1841 * _tmp2169;
    hessian_value_ptr[80] = _tmp1708 * _tmp2176 + _tmp1808 * _tmp2175;
    hessian_value_ptr[81] = _tmp1876 * _tmp2180 + _tmp1895 * _tmp2183;
    hessian_value_ptr[82] = _tmp1785 * _tmp2188 + _tmp1842 * _tmp2189;
    hessian_value_ptr[83] = _tmp1770 * _tmp2194 + _tmp1806 * _tmp2195;
    hessian_value_ptr[84] = _tmp1760 * _tmp2201 + _tmp1761 * _tmp2200;
    hessian_value_ptr[85] = _tmp1805 * _tmp2207 + _tmp1843 * _tmp2208;
    hessian_value_ptr[86] = _tmp1818 * _tmp2212 + _tmp1837 * _tmp2214;
    hessian_value_ptr[87] = _tmp1886 * _tmp2218 + _tmp1889 * _tmp2220;
    hessian_value_ptr[88] = _tmp1851 * _tmp2224 + _tmp1859 * _tmp2225;
    hessian_value_ptr[89] = _tmp1750 * _tmp2231 + _tmp1839 * _tmp2232;
    hessian_value_ptr[90] = _tmp1743 * _tmp2236 + _tmp1751 * _tmp2238;
    hessian_value_ptr[91] = _tmp1725 * _tmp2244 + _tmp1891 * _tmp2243;
    hessian_value_ptr[92] = _tmp1828 * _tmp2248 + _tmp1877 * _tmp2249;
    hessian_value_ptr[93] = _tmp1793 * _tmp2256 + _tmp1878 * _tmp2255;
    hessian_value_ptr[94] = _tmp1858 * _tmp2261 + _tmp1893 * _tmp2262;
    hessian_value_ptr[95] = _tmp1867 * _tmp2269 + _tmp1894 * _tmp2268;
    hessian_value_ptr[96] = _tmp1734 * _tmp2273 + _tmp1869 * _tmp2275;
    hessian_value_ptr[97] = _tmp1717 * _tmp2281 + _tmp1735 * _tmp2282;
    hessian_value_ptr[98] = std::pow(_tmp1900, Scalar(2)) + std::pow(_tmp1906, Scalar(2)) +
                            std::pow(_tmp1910, Scalar(2)) + std::pow(_tmp1915, Scalar(2)) +
                            std::pow(_tmp1916, Scalar(2)) + std::pow(_tmp1921, Scalar(2)) +
                            std::pow(_tmp1926, Scalar(2)) + std::pow(_tmp1927, Scalar(2)) +
                            std::pow(_tmp1928, Scalar(2)) + std::pow(_tmp1932, Scalar(2)) +
                            std::pow(_tmp1937, Scalar(2)) + std::pow(_tmp1941, Scalar(2)) +
                            std::pow(_tmp1945, Scalar(2)) + std::pow(_tmp1950, Scalar(2)) +
                            std::pow(_tmp1954, Scalar(2)) + std::pow(_tmp1955, Scalar(2)) +
                            std::pow(_tmp1957, Scalar(2)) + std::pow(_tmp1962, Scalar(2)) +
                            std::pow(_tmp1963, Scalar(2)) + std::pow(_tmp1964, Scalar(2)) +
                            std::pow(_tmp1965, Scalar(2)) + std::pow(_tmp1966, Scalar(2)) +
                            std::pow(_tmp1967, Scalar(2)) + std::pow(_tmp1972, Scalar(2)) +
                            std::pow(_tmp1973, Scalar(2)) + std::pow(_tmp1974, Scalar(2)) +
                            std::pow(_tmp1979, Scalar(2)) + std::pow(_tmp1983, Scalar(2)) +
                            std::pow(_tmp1984, Scalar(2)) + std::pow(_tmp1985, Scalar(2)) +
                            std::pow(_tmp1991, Scalar(2)) + std::pow(_tmp1992, Scalar(2)) +
                            std::pow(_tmp1993, Scalar(2)) + std::pow(_tmp1998, Scalar(2)) +
                            std::pow(_tmp1999, Scalar(2)) + std::pow(_tmp2001, Scalar(2)) +
                            std::pow(_tmp2002, Scalar(2)) + std::pow(_tmp2007, Scalar(2)) +
                            std::pow(_tmp2009, Scalar(2)) + std::pow(_tmp2010, Scalar(2)) +
                            std::pow(_tmp2011, Scalar(2)) + std::pow(_tmp2012, Scalar(2)) +
                            std::pow(_tmp2013, Scalar(2)) + std::pow(_tmp2019, Scalar(2)) +
                            std::pow(_tmp2020, Scalar(2)) + std::pow(_tmp2021, Scalar(2)) +
                            std::pow(_tmp2022, Scalar(2)) + std::pow(_tmp2023, Scalar(2)) +
                            std::pow(_tmp2024, Scalar(2)) + std::pow(_tmp2025, Scalar(2)) +
                            std::pow(_tmp2026, Scalar(2)) + std::pow(_tmp2027, Scalar(2));
    hessian_value_ptr[99] =
        _tmp1900 * _tmp2138 + _tmp1906 * _tmp2049 + _tmp1910 * _tmp2040 + _tmp1915 * _tmp2092 +
        _tmp1916 * _tmp2054 + _tmp1921 * _tmp2143 + _tmp1926 * _tmp2128 + _tmp1927 * _tmp2072 +
        _tmp1928 * _tmp2071 + _tmp1932 * _tmp2134 + _tmp1937 * _tmp2149 + _tmp1941 * _tmp2031 +
        _tmp1945 * _tmp2086 + _tmp1950 * _tmp2116 + _tmp1954 * _tmp2045 + _tmp1955 * _tmp2060 +
        _tmp1957 * _tmp2118 + _tmp1962 * _tmp2097 + _tmp1963 * _tmp2085 + _tmp1964 * _tmp2133 +
        _tmp1965 * _tmp2151 + _tmp1966 * _tmp2061 + _tmp1967 * _tmp2121 + _tmp1972 * _tmp2132 +
        _tmp1973 * _tmp2122 + _tmp1974 * _tmp2140 + _tmp1979 * _tmp2041 + _tmp1983 * _tmp2081 +
        _tmp1984 * _tmp2144 + _tmp1985 * _tmp2059 + _tmp1991 * _tmp2145 + _tmp1992 * _tmp2139 +
        _tmp1993 * _tmp2109 + _tmp1998 * _tmp2066 + _tmp1999 * _tmp2142 + _tmp2001 * _tmp2147 +
        _tmp2002 * _tmp2146 + _tmp2007 * _tmp2123 + _tmp2009 * _tmp2141 + _tmp2010 * _tmp2070 +
        _tmp2011 * _tmp2091 + _tmp2012 * _tmp2150 + _tmp2013 * _tmp2148 + _tmp2019 * _tmp2108 +
        _tmp2020 * _tmp2102 + _tmp2021 * _tmp2076 + _tmp2022 * _tmp2152 + _tmp2023 * _tmp2107 +
        _tmp2024 * _tmp2120 + _tmp2025 * _tmp2101 + _tmp2026 * _tmp2153 + _tmp2027 * _tmp2035;
    hessian_value_ptr[100] = _tmp1991 * _tmp2163 + _tmp2010 * _tmp2161;
    hessian_value_ptr[101] = _tmp1962 * _tmp2169 + _tmp2009 * _tmp2170;
    hessian_value_ptr[102] = _tmp1954 * _tmp2176 + _tmp2012 * _tmp2175;
    hessian_value_ptr[103] = _tmp1926 * _tmp2183 + _tmp2013 * _tmp2180;
    hessian_value_ptr[104] = _tmp1998 * _tmp2189 + _tmp2001 * _tmp2188;
    hessian_value_ptr[105] = _tmp1932 * _tmp2194 + _tmp2025 * _tmp2195;
    hessian_value_ptr[106] = _tmp1945 * _tmp2201 + _tmp1963 * _tmp2200;
    hessian_value_ptr[107] = _tmp1979 * _tmp2208 + _tmp2027 * _tmp2207;
    hessian_value_ptr[108] = _tmp1900 * _tmp2212 + _tmp1974 * _tmp2214;
    hessian_value_ptr[109] = _tmp1983 * _tmp2220 + _tmp2020 * _tmp2218;
    hessian_value_ptr[110] = _tmp1921 * _tmp2225 + _tmp1985 * _tmp2224;
    hessian_value_ptr[111] = _tmp1906 * _tmp2232 + _tmp1964 * _tmp2231;
    hessian_value_ptr[112] = _tmp1950 * _tmp2238 + _tmp2024 * _tmp2236;
    hessian_value_ptr[113] = _tmp1915 * _tmp2244 + _tmp1916 * _tmp2243;
    hessian_value_ptr[114] = _tmp1937 * _tmp2249 + _tmp2023 * _tmp2248;
    hessian_value_ptr[115] = _tmp1972 * _tmp2256 + _tmp1984 * _tmp2255;
    hessian_value_ptr[116] = _tmp2007 * _tmp2262 + _tmp2011 * _tmp2261;
    hessian_value_ptr[117] = _tmp1910 * _tmp2269 + _tmp1965 * _tmp2268;
    hessian_value_ptr[118] = _tmp1941 * _tmp2275 + _tmp1966 * _tmp2273;
    hessian_value_ptr[119] = _tmp2019 * _tmp2281 + _tmp2021 * _tmp2282;
    hessian_value_ptr[120] = std::pow(_tmp2031, Scalar(2)) + std::pow(_tmp2035, Scalar(2)) +
                             std::pow(_tmp2040, Scalar(2)) + std::pow(_tmp2041, Scalar(2)) +
                             std::pow(_tmp2045, Scalar(2)) + std::pow(_tmp2049, Scalar(2)) +
                             std::pow(_tmp2054, Scalar(2)) + std::pow(_tmp2059, Scalar(2)) +
                             std::pow(_tmp2060, Scalar(2)) + std::pow(_tmp2061, Scalar(2)) +
                             std::pow(_tmp2066, Scalar(2)) + std::pow(_tmp2070, Scalar(2)) +
                             std::pow(_tmp2071, Scalar(2)) + std::pow(_tmp2072, Scalar(2)) +
                             std::pow(_tmp2076, Scalar(2)) + std::pow(_tmp2081, Scalar(2)) +
                             std::pow(_tmp2085, Scalar(2)) + std::pow(_tmp2086, Scalar(2)) +
                             std::pow(_tmp2091, Scalar(2)) + std::pow(_tmp2092, Scalar(2)) +
                             std::pow(_tmp2097, Scalar(2)) + std::pow(_tmp2101, Scalar(2)) +
                             std::pow(_tmp2102, Scalar(2)) + std::pow(_tmp2107, Scalar(2)) +
                             std::pow(_tmp2108, Scalar(2)) + std::pow(_tmp2109, Scalar(2)) +
                             std::pow(_tmp2116, Scalar(2)) + std::pow(_tmp2118, Scalar(2)) +
                             std::pow(_tmp2120, Scalar(2)) + std::pow(_tmp2121, Scalar(2)) +
                             std::pow(_tmp2122, Scalar(2)) + std::pow(_tmp2123, Scalar(2)) +
                             std::pow(_tmp2128, Scalar(2)) + std::pow(_tmp2132, Scalar(2)) +
                             std::pow(_tmp2133, Scalar(2)) + std::pow(_tmp2134, Scalar(2)) +
                             std::pow(_tmp2138, Scalar(2)) + std::pow(_tmp2139, Scalar(2)) +
                             std::pow(_tmp2140, Scalar(2)) + std::pow(_tmp2141, Scalar(2)) +
                             std::pow(_tmp2142, Scalar(2)) + std::pow(_tmp2143, Scalar(2)) +
                             std::pow(_tmp2144, Scalar(2)) + std::pow(_tmp2145, Scalar(2)) +
                             std::pow(_tmp2146, Scalar(2)) + std::pow(_tmp2147, Scalar(2)) +
                             std::pow(_tmp2148, Scalar(2)) + std::pow(_tmp2149, Scalar(2)) +
                             std::pow(_tmp2150, Scalar(2)) + std::pow(_tmp2151, Scalar(2)) +
                             std::pow(_tmp2152, Scalar(2)) + std::pow(_tmp2153, Scalar(2));
    hessian_value_ptr[121] = _tmp2070 * _tmp2161 + _tmp2145 * _tmp2163;
    hessian_value_ptr[122] = _tmp2097 * _tmp2169 + _tmp2141 * _tmp2170;
    hessian_value_ptr[123] = _tmp2045 * _tmp2176 + _tmp2150 * _tmp2175;
    hessian_value_ptr[124] = _tmp2128 * _tmp2183 + _tmp2148 * _tmp2180;
    hessian_value_ptr[125] = _tmp2066 * _tmp2189 + _tmp2147 * _tmp2188;
    hessian_value_ptr[126] = _tmp2101 * _tmp2195 + _tmp2134 * _tmp2194;
    hessian_value_ptr[127] = _tmp2085 * _tmp2200 + _tmp2086 * _tmp2201;
    hessian_value_ptr[128] = _tmp2035 * _tmp2207 + _tmp2041 * _tmp2208;
    hessian_value_ptr[129] = _tmp2138 * _tmp2212 + _tmp2140 * _tmp2214;
    hessian_value_ptr[130] = _tmp2081 * _tmp2220 + _tmp2102 * _tmp2218;
    hessian_value_ptr[131] = _tmp2059 * _tmp2224 + _tmp2143 * _tmp2225;
    hessian_value_ptr[132] = _tmp2049 * _tmp2232 + _tmp2133 * _tmp2231;
    hessian_value_ptr[133] = _tmp2116 * _tmp2238 + _tmp2120 * _tmp2236;
    hessian_value_ptr[134] = _tmp2054 * _tmp2243 + _tmp2092 * _tmp2244;
    hessian_value_ptr[135] = _tmp2107 * _tmp2248 + _tmp2149 * _tmp2249;
    hessian_value_ptr[136] = _tmp2132 * _tmp2256 + _tmp2144 * _tmp2255;
    hessian_value_ptr[137] = _tmp2091 * _tmp2261 + _tmp2123 * _tmp2262;
    hessian_value_ptr[138] = _tmp2040 * _tmp2269 + _tmp2151 * _tmp2268;
    hessian_value_ptr[139] = _tmp2031 * _tmp2275 + _tmp2061 * _tmp2273;
    hessian_value_ptr[140] = _tmp2076 * _tmp2282 + _tmp2108 * _tmp2281;
    hessian_value_ptr[141] =
        std::pow(_tmp2161, Scalar(2)) + _tmp2162 + std::pow(_tmp2163, Scalar(2));
    hessian_value_ptr[142] =
        _tmp2164 + std::pow(_tmp2169, Scalar(2)) + std::pow(_tmp2170, Scalar(2));
    hessian_value_ptr[143] =
        _tmp2171 + std::pow(_tmp2175, Scalar(2)) + std::pow(_tmp2176, Scalar(2));
    hessian_value_ptr[144] =
        std::pow(_tmp2180, Scalar(2)) + _tmp2181 + std::pow(_tmp2183, Scalar(2));
    hessian_value_ptr[145] =
        _tmp2184 + std::pow(_tmp2188, Scalar(2)) + std::pow(_tmp2189, Scalar(2));
    hessian_value_ptr[146] =
        std::pow(_tmp2194, Scalar(2)) + std::pow(_tmp2195, Scalar(2)) + _tmp2196;
    hessian_value_ptr[147] =
        std::pow(_tmp2200, Scalar(2)) + std::pow(_tmp2201, Scalar(2)) + _tmp2202;
    hessian_value_ptr[148] =
        _tmp2203 + std::pow(_tmp2207, Scalar(2)) + std::pow(_tmp2208, Scalar(2));
    hessian_value_ptr[149] =
        std::pow(_tmp2212, Scalar(2)) + _tmp2213 + std::pow(_tmp2214, Scalar(2));
    hessian_value_ptr[150] =
        std::pow(_tmp2218, Scalar(2)) + _tmp2219 + std::pow(_tmp2220, Scalar(2));
    hessian_value_ptr[151] =
        std::pow(_tmp2224, Scalar(2)) + std::pow(_tmp2225, Scalar(2)) + _tmp2226;
    hessian_value_ptr[152] =
        _tmp2227 + std::pow(_tmp2231, Scalar(2)) + std::pow(_tmp2232, Scalar(2));
    hessian_value_ptr[153] =
        std::pow(_tmp2236, Scalar(2)) + _tmp2237 + std::pow(_tmp2238, Scalar(2));
    hessian_value_ptr[154] =
        _tmp2239 + std::pow(_tmp2243, Scalar(2)) + std::pow(_tmp2244, Scalar(2));
    hessian_value_ptr[155] =
        std::pow(_tmp2248, Scalar(2)) + std::pow(_tmp2249, Scalar(2)) + _tmp2250;
    hessian_value_ptr[156] =
        _tmp2251 + std::pow(_tmp2255, Scalar(2)) + std::pow(_tmp2256, Scalar(2));
    hessian_value_ptr[157] =
        _tmp2257 + std::pow(_tmp2261, Scalar(2)) + std::pow(_tmp2262, Scalar(2));
    hessian_value_ptr[158] =
        _tmp2263 + std::pow(_tmp2268, Scalar(2)) + std::pow(_tmp2269, Scalar(2));
    hessian_value_ptr[159] =
        std::pow(_tmp2273, Scalar(2)) + _tmp2274 + std::pow(_tmp2275, Scalar(2));
    hessian_value_ptr[160] =
        _tmp2276 + std::pow(_tmp2281, Scalar(2)) + std::pow(_tmp2282, Scalar(2));
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bundle_adjustment_fixed_size
