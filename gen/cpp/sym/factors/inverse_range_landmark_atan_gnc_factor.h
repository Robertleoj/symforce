// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/atan_camera_cal.h>
#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the
 * :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`.  Whitening each
 * component of the reprojection error separately would result in rejecting individual components
 * as outliers. Instead, we minimize the whitened norm of the full reprojection error for each
 * point.  See
 * :meth:`ScalarNoiseModel.whiten_norm <symforce.opt.noise_models.ScalarNoiseModel.whiten_norm>`
 * for more information on this, and
 * :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>` for more information on
 * the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration: The source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration: The target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the
 *         :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`
 *     gnc_scale: The scale parameter for the
 *         :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`
 *     epsilon: Small positive value
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkAtanGncFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::ATANCameraCal<Scalar>& source_calibration,
    const sym::Pose3<Scalar>& target_pose, const sym::ATANCameraCal<Scalar>& target_calibration,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1228

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 5, 1>& _source_calibration = source_calibration.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();
  const Eigen::Matrix<Scalar, 5, 1>& _target_calibration = target_calibration.Data();

  // Intermediate terms (349)
  const Scalar _tmp0 = 2 * _target_pose[2];
  const Scalar _tmp1 = _target_pose[0] * _tmp0;
  const Scalar _tmp2 = 2 * _target_pose[1];
  const Scalar _tmp3 = _target_pose[3] * _tmp2;
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = _tmp1 + _tmp4;
  const Scalar _tmp6 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp7 = _tmp6 * source_inverse_range;
  const Scalar _tmp8 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp9 = -2 * _tmp8;
  const Scalar _tmp10 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp11 = -2 * _tmp10;
  const Scalar _tmp12 = _tmp11 + _tmp9 + 1;
  const Scalar _tmp13 = Scalar(0.5) * _source_calibration[4];
  const Scalar _tmp14 = std::tan(_tmp13);
  const Scalar _tmp15 = std::pow(_tmp14, Scalar(-2));
  const Scalar _tmp16 = -_source_calibration[3] + source_pixel(1, 0);
  const Scalar _tmp17 = std::pow(_tmp16, Scalar(2)) / std::pow(_source_calibration[1], Scalar(2));
  const Scalar _tmp18 = -_source_calibration[2] + source_pixel(0, 0);
  const Scalar _tmp19 = std::pow(_tmp18, Scalar(2)) / std::pow(_source_calibration[0], Scalar(2));
  const Scalar _tmp20 = _tmp17 + _tmp19 + epsilon;
  const Scalar _tmp21 = std::sqrt(_tmp20);
  const Scalar _tmp22 = _source_calibration[4] * _tmp21;
  const Scalar _tmp23 = std::tan(_tmp22);
  const Scalar _tmp24 = (Scalar(1) / Scalar(4)) * std::pow(_tmp23, Scalar(2)) / _tmp20;
  const Scalar _tmp25 = _tmp17 * _tmp24;
  const Scalar _tmp26 = _tmp19 * _tmp24;
  const Scalar _tmp27 = epsilon + 1;
  const Scalar _tmp28 =
      std::pow(Scalar(_tmp15 * _tmp25 + _tmp15 * _tmp26 + _tmp27), Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp29 = 2 * _source_pose[0];
  const Scalar _tmp30 = _source_pose[3] * _tmp29;
  const Scalar _tmp31 = 2 * _source_pose[1];
  const Scalar _tmp32 = _source_pose[2] * _tmp31;
  const Scalar _tmp33 = _tmp30 + _tmp32;
  const Scalar _tmp34 = _tmp16 / _source_calibration[1];
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * _tmp23 / _tmp21;
  const Scalar _tmp36 = _tmp28 * _tmp35 / _tmp14;
  const Scalar _tmp37 = _tmp34 * _tmp36;
  const Scalar _tmp38 = _source_pose[2] * _tmp29;
  const Scalar _tmp39 = _source_pose[3] * _tmp31;
  const Scalar _tmp40 = -_tmp39;
  const Scalar _tmp41 = _tmp38 + _tmp40;
  const Scalar _tmp42 = _tmp18 / _source_calibration[0];
  const Scalar _tmp43 = _tmp36 * _tmp42;
  const Scalar _tmp44 = _tmp12 * _tmp28 + _tmp33 * _tmp37 + _tmp41 * _tmp43 + _tmp7;
  const Scalar _tmp45 = _target_pose[3] * _tmp0;
  const Scalar _tmp46 = _target_pose[0] * _tmp2;
  const Scalar _tmp47 = _tmp45 + _tmp46;
  const Scalar _tmp48 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp49 = _tmp48 * source_inverse_range;
  const Scalar _tmp50 = -_tmp30;
  const Scalar _tmp51 = _tmp32 + _tmp50;
  const Scalar _tmp52 = _source_pose[1] * _tmp29;
  const Scalar _tmp53 = 2 * _source_pose[2] * _source_pose[3];
  const Scalar _tmp54 = _tmp52 + _tmp53;
  const Scalar _tmp55 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp56 = 1 - 2 * _tmp55;
  const Scalar _tmp57 = _tmp11 + _tmp56;
  const Scalar _tmp58 = _tmp28 * _tmp51 + _tmp37 * _tmp57 + _tmp43 * _tmp54 + _tmp49;
  const Scalar _tmp59 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp60 = -2 * _tmp59;
  const Scalar _tmp61 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp62 = -2 * _tmp61;
  const Scalar _tmp63 = _tmp60 + _tmp62 + 1;
  const Scalar _tmp64 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp65 = _tmp64 * source_inverse_range;
  const Scalar _tmp66 = _tmp38 + _tmp39;
  const Scalar _tmp67 = -_tmp53;
  const Scalar _tmp68 = _tmp52 + _tmp67;
  const Scalar _tmp69 = _tmp56 + _tmp9;
  const Scalar _tmp70 = _tmp28 * _tmp66 + _tmp37 * _tmp68 + _tmp43 * _tmp69 + _tmp65;
  const Scalar _tmp71 = _tmp44 * _tmp5 + _tmp47 * _tmp58 + _tmp63 * _tmp70;
  const Scalar _tmp72 = Scalar(1.0) / (_target_calibration[4]);
  const Scalar _tmp73 = _target_calibration[0] * _tmp72;
  const Scalar _tmp74 = _target_pose[1] * _tmp0;
  const Scalar _tmp75 = 2 * _target_pose[0] * _target_pose[3];
  const Scalar _tmp76 = _tmp74 + _tmp75;
  const Scalar _tmp77 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp78 = 1 - 2 * _tmp77;
  const Scalar _tmp79 = _tmp62 + _tmp78;
  const Scalar _tmp80 = -_tmp45;
  const Scalar _tmp81 = _tmp46 + _tmp80;
  const Scalar _tmp82 = _tmp44 * _tmp76 + _tmp58 * _tmp79 + _tmp70 * _tmp81;
  const Scalar _tmp83 = _tmp60 + _tmp78;
  const Scalar _tmp84 = -_tmp75;
  const Scalar _tmp85 = _tmp74 + _tmp84;
  const Scalar _tmp86 = _tmp1 + _tmp3;
  const Scalar _tmp87 = _tmp44 * _tmp83 + _tmp58 * _tmp85 + _tmp70 * _tmp86;
  const Scalar _tmp88 = std::max<Scalar>(_tmp87, epsilon);
  const Scalar _tmp89 = std::pow(_tmp88, Scalar(-2));
  const Scalar _tmp90 = std::sqrt(Scalar(std::pow(_tmp71, Scalar(2)) * _tmp89 +
                                         std::pow(_tmp82, Scalar(2)) * _tmp89 + epsilon));
  const Scalar _tmp91 = Scalar(0.5) * _target_calibration[4];
  const Scalar _tmp92 = std::atan(2 * _tmp90 * std::tan(_tmp91)) / (_tmp88 * _tmp90);
  const Scalar _tmp93 = _target_calibration[2] - target_pixel(0, 0);
  const Scalar _tmp94 = _tmp71 * _tmp73 * _tmp92 + _tmp93;
  const Scalar _tmp95 = _target_calibration[1] * _tmp72;
  const Scalar _tmp96 = _target_calibration[3] - target_pixel(1, 0);
  const Scalar _tmp97 = _tmp82 * _tmp92 * _tmp95 + _tmp96;
  const Scalar _tmp98 = std::pow(_tmp94, Scalar(2)) + std::pow(_tmp97, Scalar(2)) + epsilon;
  const Scalar _tmp99 = Scalar(1.0) / (_tmp27 - gnc_mu);
  const Scalar _tmp100 = epsilon + std::fabs(_tmp99);
  const Scalar _tmp101 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp102 = _tmp101 / _tmp100;
  const Scalar _tmp103 = 2 - _tmp99;
  const Scalar _tmp104 =
      _tmp103 + epsilon * (2 * std::min<Scalar>(0, (((_tmp103) > 0) - ((_tmp103) < 0))) + 1);
  const Scalar _tmp105 = (Scalar(1) / Scalar(2)) * _tmp104;
  const Scalar _tmp106 = 2 * _tmp100 / _tmp104;
  const Scalar _tmp107 =
      std::sqrt(weight) * std::max<Scalar>(0, (((-std::fabs(_tmp22) + Scalar(M_PI_2)) > 0) -
                                               ((-std::fabs(_tmp22) + Scalar(M_PI_2)) < 0)));
  const Scalar _tmp108 =
      _tmp107 * std::sqrt(Scalar(_tmp106 * (std::pow(Scalar(_tmp102 * _tmp98 + 1), _tmp105) - 1))) *
      std::max<Scalar>(0, (((_tmp87) > 0) - ((_tmp87) < 0))) / std::sqrt(_tmp98);
  const Scalar _tmp109 = _tmp108 * _tmp94;
  const Scalar _tmp110 = _tmp108 * _tmp97;
  const Scalar _tmp111 = std::tan(_tmp13);
  const Scalar _tmp112 = std::pow(_tmp111, Scalar(-2));
  const Scalar _tmp113 = std::pow(Scalar(_tmp112 * _tmp25 + _tmp112 * _tmp26 + _tmp27),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp114 = _tmp35 / _tmp111;
  const Scalar _tmp115 = _tmp113 * _tmp114;
  const Scalar _tmp116 = _tmp115 * _tmp34;
  const Scalar _tmp117 = _tmp113 * _tmp41;
  const Scalar _tmp118 = _tmp114 * _tmp42;
  const Scalar _tmp119 = _tmp113 * _tmp12 + _tmp116 * _tmp33 + _tmp117 * _tmp118 + _tmp7;
  const Scalar _tmp120 = _tmp113 * _tmp51;
  const Scalar _tmp121 = _tmp113 * _tmp54;
  const Scalar _tmp122 = _tmp116 * _tmp57 + _tmp118 * _tmp121 + _tmp120 + _tmp49;
  const Scalar _tmp123 = _tmp113 * _tmp66;
  const Scalar _tmp124 = _tmp115 * _tmp42;
  const Scalar _tmp125 = _tmp116 * _tmp68 + _tmp123 + _tmp124 * _tmp69 + _tmp65;
  const Scalar _tmp126 = _tmp122 * _tmp85 + _tmp125 * _tmp86;
  const Scalar _tmp127 = _tmp119 * _tmp83 + _tmp126;
  const Scalar _tmp128 = std::max<Scalar>(_tmp127, epsilon);
  const Scalar _tmp129 = std::pow(_tmp128, Scalar(-2));
  const Scalar _tmp130 = _tmp119 * _tmp76 + _tmp125 * _tmp81;
  const Scalar _tmp131 = _tmp122 * _tmp79 + _tmp130;
  const Scalar _tmp132 = std::pow(_tmp131, Scalar(2));
  const Scalar _tmp133 = _tmp119 * _tmp5 + _tmp122 * _tmp47;
  const Scalar _tmp134 = _tmp125 * _tmp63 + _tmp133;
  const Scalar _tmp135 = std::pow(_tmp134, Scalar(2));
  const Scalar _tmp136 = _tmp129 * _tmp132 + _tmp129 * _tmp135 + epsilon;
  const Scalar _tmp137 = Scalar(1.0) / (_tmp128);
  const Scalar _tmp138 = std::sqrt(_tmp136);
  const Scalar _tmp139 = std::tan(_tmp91);
  const Scalar _tmp140 = std::atan(2 * _tmp138 * _tmp139);
  const Scalar _tmp141 = _tmp137 * _tmp140;
  const Scalar _tmp142 = (Scalar(1) / Scalar(2)) * _tmp141 / (_tmp136 * std::sqrt(_tmp136));
  const Scalar _tmp143 = _tmp114 * _tmp34;
  const Scalar _tmp144 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp145 = -_tmp144;
  const Scalar _tmp146 = -_tmp8;
  const Scalar _tmp147 = _tmp113 * (_tmp10 + _tmp145 + _tmp146 + _tmp55) + _tmp120 * _tmp143;
  const Scalar _tmp148 = -_tmp52;
  const Scalar _tmp149 = _tmp113 * (_tmp148 + _tmp53) + _tmp123 * _tmp143;
  const Scalar _tmp150 = -_tmp10;
  const Scalar _tmp151 = _tmp150 + _tmp55;
  const Scalar _tmp152 = _tmp144 + _tmp146;
  const Scalar _tmp153 = -_tmp32;
  const Scalar _tmp154 = _tmp113 * (_tmp153 + _tmp50) + _tmp116 * (_tmp151 + _tmp152);
  const Scalar _tmp155 = _tmp147 * _tmp85 + _tmp149 * _tmp86 + _tmp154 * _tmp83;
  const Scalar _tmp156 = (((_tmp127 - epsilon) > 0) - ((_tmp127 - epsilon) < 0)) + 1;
  const Scalar _tmp157 = _tmp156 / [&]() {
    const Scalar base = _tmp128;
    return base * base * base;
  }();
  const Scalar _tmp158 = _tmp135 * _tmp157;
  const Scalar _tmp159 = _tmp147 * _tmp79 + _tmp149 * _tmp81 + _tmp154 * _tmp76;
  const Scalar _tmp160 = 2 * _tmp129;
  const Scalar _tmp161 = _tmp131 * _tmp160;
  const Scalar _tmp162 = _tmp132 * _tmp157;
  const Scalar _tmp163 = _tmp147 * _tmp47 + _tmp149 * _tmp63 + _tmp154 * _tmp5;
  const Scalar _tmp164 = _tmp134 * _tmp160;
  const Scalar _tmp165 =
      -_tmp155 * _tmp158 - _tmp155 * _tmp162 + _tmp159 * _tmp161 + _tmp163 * _tmp164;
  const Scalar _tmp166 = _tmp134 * _tmp73;
  const Scalar _tmp167 = _tmp165 * _tmp166;
  const Scalar _tmp168 = Scalar(1.0) / (_tmp138);
  const Scalar _tmp169 = _tmp141 * _tmp168;
  const Scalar _tmp170 = _tmp169 * _tmp73;
  const Scalar _tmp171 =
      _tmp137 * _tmp139 / (_tmp136 * (4 * _tmp136 * std::pow(_tmp139, Scalar(2)) + 1));
  const Scalar _tmp172 = (Scalar(1) / Scalar(2)) * _tmp129 * _tmp140 * _tmp156 * _tmp168;
  const Scalar _tmp173 = _tmp166 * _tmp172;
  const Scalar _tmp174 =
      -_tmp142 * _tmp167 - _tmp155 * _tmp173 + _tmp163 * _tmp170 + _tmp167 * _tmp171;
  const Scalar _tmp175 = _tmp134 * _tmp170 + _tmp93;
  const Scalar _tmp176 = _tmp169 * _tmp95;
  const Scalar _tmp177 = _tmp131 * _tmp176 + _tmp96;
  const Scalar _tmp178 = std::pow(_tmp175, Scalar(2)) + std::pow(_tmp177, Scalar(2)) + epsilon;
  const Scalar _tmp179 = std::pow(_tmp178, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp180 = _tmp102 * _tmp178 + 1;
  const Scalar _tmp181 = std::sqrt(Scalar(_tmp106 * (std::pow(_tmp180, _tmp105) - 1)));
  const Scalar _tmp182 = std::max<Scalar>(0, (((_tmp127) > 0) - ((_tmp127) < 0)));
  const Scalar _tmp183 = _tmp107 * _tmp181 * _tmp182;
  const Scalar _tmp184 = _tmp179 * _tmp183;
  const Scalar _tmp185 = _tmp131 * _tmp95;
  const Scalar _tmp186 = _tmp165 * _tmp185;
  const Scalar _tmp187 = _tmp172 * _tmp185;
  const Scalar _tmp188 =
      -_tmp142 * _tmp186 - _tmp155 * _tmp187 + _tmp159 * _tmp176 + _tmp171 * _tmp186;
  const Scalar _tmp189 = 2 * _tmp177;
  const Scalar _tmp190 = 2 * _tmp175;
  const Scalar _tmp191 = _tmp174 * _tmp190 + _tmp188 * _tmp189;
  const Scalar _tmp192 = _tmp183 / (_tmp178 * std::sqrt(_tmp178));
  const Scalar _tmp193 = (Scalar(1) / Scalar(2)) * _tmp175;
  const Scalar _tmp194 = _tmp192 * _tmp193;
  const Scalar _tmp195 =
      _tmp101 * _tmp107 * _tmp179 * std::pow(_tmp180, Scalar(_tmp105 - 1)) * _tmp182 / _tmp181;
  const Scalar _tmp196 = _tmp193 * _tmp195;
  const Scalar _tmp197 = _tmp174 * _tmp184 - _tmp191 * _tmp194 + _tmp191 * _tmp196;
  const Scalar _tmp198 = (Scalar(1) / Scalar(2)) * _tmp177;
  const Scalar _tmp199 = _tmp195 * _tmp198;
  const Scalar _tmp200 = _tmp192 * _tmp198;
  const Scalar _tmp201 = _tmp184 * _tmp188 + _tmp191 * _tmp199 - _tmp191 * _tmp200;
  const Scalar _tmp202 = _tmp121 + _tmp124 * (_tmp153 + _tmp30);
  const Scalar _tmp203 = -_tmp55;
  const Scalar _tmp204 = _tmp10 + _tmp203;
  const Scalar _tmp205 = -_tmp38;
  const Scalar _tmp206 = _tmp113 * (_tmp152 + _tmp204) + _tmp124 * (_tmp205 + _tmp40);
  const Scalar _tmp207 = _tmp145 + _tmp8;
  const Scalar _tmp208 = _tmp117 + _tmp124 * (_tmp204 + _tmp207);
  const Scalar _tmp209 = _tmp202 * _tmp47 + _tmp206 * _tmp63 + _tmp208 * _tmp5;
  const Scalar _tmp210 = _tmp202 * _tmp85 + _tmp206 * _tmp86 + _tmp208 * _tmp83;
  const Scalar _tmp211 = _tmp202 * _tmp79 + _tmp206 * _tmp81 + _tmp208 * _tmp76;
  const Scalar _tmp212 =
      -_tmp158 * _tmp210 + _tmp161 * _tmp211 - _tmp162 * _tmp210 + _tmp164 * _tmp209;
  const Scalar _tmp213 = _tmp142 * _tmp185;
  const Scalar _tmp214 = _tmp171 * _tmp185;
  const Scalar _tmp215 =
      _tmp176 * _tmp211 - _tmp187 * _tmp210 - _tmp212 * _tmp213 + _tmp212 * _tmp214;
  const Scalar _tmp216 = _tmp142 * _tmp166;
  const Scalar _tmp217 = _tmp166 * _tmp171;
  const Scalar _tmp218 =
      _tmp170 * _tmp209 - _tmp173 * _tmp210 - _tmp212 * _tmp216 + _tmp212 * _tmp217;
  const Scalar _tmp219 = _tmp189 * _tmp215 + _tmp190 * _tmp218;
  const Scalar _tmp220 = _tmp184 * _tmp218 - _tmp194 * _tmp219 + _tmp196 * _tmp219;
  const Scalar _tmp221 = _tmp184 * _tmp215 + _tmp199 * _tmp219 - _tmp200 * _tmp219;
  const Scalar _tmp222 = _tmp116 * (_tmp151 + _tmp207) + _tmp124 * _tmp68;
  const Scalar _tmp223 =
      _tmp116 * (_tmp148 + _tmp67) + _tmp124 * (_tmp144 + _tmp150 + _tmp203 + _tmp8);
  const Scalar _tmp224 = _tmp116 * (_tmp205 + _tmp39) + _tmp124 * _tmp33;
  const Scalar _tmp225 = _tmp222 * _tmp86 + _tmp223 * _tmp85 + _tmp224 * _tmp83;
  const Scalar _tmp226 = _tmp222 * _tmp81 + _tmp223 * _tmp79 + _tmp224 * _tmp76;
  const Scalar _tmp227 = _tmp222 * _tmp63 + _tmp223 * _tmp47 + _tmp224 * _tmp5;
  const Scalar _tmp228 =
      -_tmp158 * _tmp225 + _tmp161 * _tmp226 - _tmp162 * _tmp225 + _tmp164 * _tmp227;
  const Scalar _tmp229 =
      _tmp170 * _tmp227 - _tmp173 * _tmp225 - _tmp216 * _tmp228 + _tmp217 * _tmp228;
  const Scalar _tmp230 =
      _tmp176 * _tmp226 - _tmp187 * _tmp225 - _tmp213 * _tmp228 + _tmp214 * _tmp228;
  const Scalar _tmp231 = _tmp189 * _tmp230 + _tmp190 * _tmp229;
  const Scalar _tmp232 = _tmp184 * _tmp229 - _tmp194 * _tmp231 + _tmp196 * _tmp231;
  const Scalar _tmp233 = _tmp184 * _tmp230 + _tmp199 * _tmp231 - _tmp200 * _tmp231;
  const Scalar _tmp234 = _tmp162 * source_inverse_range;
  const Scalar _tmp235 = _tmp234 * _tmp86;
  const Scalar _tmp236 = _tmp161 * source_inverse_range;
  const Scalar _tmp237 = _tmp236 * _tmp81;
  const Scalar _tmp238 = _tmp158 * source_inverse_range;
  const Scalar _tmp239 = _tmp238 * _tmp86;
  const Scalar _tmp240 = _tmp164 * source_inverse_range;
  const Scalar _tmp241 = _tmp240 * _tmp63;
  const Scalar _tmp242 = -_tmp235 + _tmp237 - _tmp239 + _tmp241;
  const Scalar _tmp243 = _tmp176 * source_inverse_range;
  const Scalar _tmp244 = _tmp243 * _tmp81;
  const Scalar _tmp245 = _tmp187 * source_inverse_range;
  const Scalar _tmp246 = _tmp245 * _tmp86;
  const Scalar _tmp247 = -_tmp213 * _tmp242 + _tmp214 * _tmp242 + _tmp244 - _tmp246;
  const Scalar _tmp248 = _tmp170 * source_inverse_range;
  const Scalar _tmp249 = _tmp248 * _tmp63;
  const Scalar _tmp250 = _tmp173 * source_inverse_range;
  const Scalar _tmp251 = _tmp250 * _tmp86;
  const Scalar _tmp252 = -_tmp216 * _tmp242 + _tmp217 * _tmp242 + _tmp249 - _tmp251;
  const Scalar _tmp253 = _tmp189 * _tmp247 + _tmp190 * _tmp252;
  const Scalar _tmp254 = _tmp184 * _tmp252 - _tmp194 * _tmp253 + _tmp196 * _tmp253;
  const Scalar _tmp255 = _tmp184 * _tmp247 + _tmp199 * _tmp253 - _tmp200 * _tmp253;
  const Scalar _tmp256 = _tmp250 * _tmp85;
  const Scalar _tmp257 = _tmp234 * _tmp85;
  const Scalar _tmp258 = _tmp238 * _tmp85;
  const Scalar _tmp259 = _tmp240 * _tmp47;
  const Scalar _tmp260 = _tmp236 * _tmp79;
  const Scalar _tmp261 = -_tmp257 - _tmp258 + _tmp259 + _tmp260;
  const Scalar _tmp262 = _tmp248 * _tmp47;
  const Scalar _tmp263 = -_tmp216 * _tmp261 + _tmp217 * _tmp261 - _tmp256 + _tmp262;
  const Scalar _tmp264 = _tmp245 * _tmp85;
  const Scalar _tmp265 = _tmp243 * _tmp79;
  const Scalar _tmp266 = -_tmp213 * _tmp261 + _tmp214 * _tmp261 - _tmp264 + _tmp265;
  const Scalar _tmp267 = _tmp189 * _tmp266 + _tmp190 * _tmp263;
  const Scalar _tmp268 = _tmp184 * _tmp263 - _tmp194 * _tmp267 + _tmp196 * _tmp267;
  const Scalar _tmp269 = _tmp184 * _tmp266 + _tmp199 * _tmp267 - _tmp200 * _tmp267;
  const Scalar _tmp270 = _tmp240 * _tmp5;
  const Scalar _tmp271 = _tmp238 * _tmp83;
  const Scalar _tmp272 = _tmp236 * _tmp76;
  const Scalar _tmp273 = _tmp234 * _tmp83;
  const Scalar _tmp274 = _tmp270 - _tmp271 + _tmp272 - _tmp273;
  const Scalar _tmp275 = _tmp245 * _tmp83;
  const Scalar _tmp276 = _tmp243 * _tmp76;
  const Scalar _tmp277 = -_tmp213 * _tmp274 + _tmp214 * _tmp274 - _tmp275 + _tmp276;
  const Scalar _tmp278 = _tmp250 * _tmp83;
  const Scalar _tmp279 = _tmp248 * _tmp5;
  const Scalar _tmp280 = -_tmp216 * _tmp274 + _tmp217 * _tmp274 - _tmp278 + _tmp279;
  const Scalar _tmp281 = _tmp189 * _tmp277 + _tmp190 * _tmp280;
  const Scalar _tmp282 = _tmp184 * _tmp280 - _tmp194 * _tmp281 + _tmp196 * _tmp281;
  const Scalar _tmp283 = _tmp184 * _tmp277 + _tmp199 * _tmp281 - _tmp200 * _tmp281;
  const Scalar _tmp284 = -_tmp77;
  const Scalar _tmp285 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp286 = _tmp284 + _tmp285;
  const Scalar _tmp287 = -_tmp59;
  const Scalar _tmp288 = _tmp287 + _tmp61;
  const Scalar _tmp289 = _tmp119 * (_tmp286 + _tmp288) + _tmp126;
  const Scalar _tmp290 = -_tmp285;
  const Scalar _tmp291 = _tmp290 + _tmp77;
  const Scalar _tmp292 = -_tmp74;
  const Scalar _tmp293 = -_tmp46;
  const Scalar _tmp294 =
      _tmp119 * (_tmp292 + _tmp84) + _tmp122 * (_tmp288 + _tmp291) + _tmp125 * (_tmp293 + _tmp45);
  const Scalar _tmp295 = -_tmp158 * _tmp294 + _tmp161 * _tmp289 - _tmp162 * _tmp294;
  const Scalar _tmp296 =
      _tmp176 * _tmp289 - _tmp187 * _tmp294 - _tmp213 * _tmp295 + _tmp214 * _tmp295;
  const Scalar _tmp297 = -_tmp173 * _tmp294 - _tmp216 * _tmp295 + _tmp217 * _tmp295;
  const Scalar _tmp298 = _tmp189 * _tmp296 + _tmp190 * _tmp297;
  const Scalar _tmp299 = _tmp184 * _tmp297 - _tmp194 * _tmp298 + _tmp196 * _tmp298;
  const Scalar _tmp300 = _tmp184 * _tmp296 + _tmp199 * _tmp298 - _tmp200 * _tmp298;
  const Scalar _tmp301 = -_tmp61;
  const Scalar _tmp302 = _tmp125 * (_tmp285 + _tmp287 + _tmp301 + _tmp77) + _tmp133;
  const Scalar _tmp303 = _tmp301 + _tmp59;
  const Scalar _tmp304 = -_tmp1;
  const Scalar _tmp305 =
      _tmp119 * (_tmp291 + _tmp303) + _tmp122 * (_tmp292 + _tmp75) + _tmp125 * (_tmp304 + _tmp4);
  const Scalar _tmp306 = -_tmp158 * _tmp302 - _tmp162 * _tmp302 + _tmp164 * _tmp305;
  const Scalar _tmp307 = -_tmp187 * _tmp302 - _tmp213 * _tmp306 + _tmp214 * _tmp306;
  const Scalar _tmp308 =
      _tmp170 * _tmp305 - _tmp173 * _tmp302 - _tmp216 * _tmp306 + _tmp217 * _tmp306;
  const Scalar _tmp309 = _tmp189 * _tmp307 + _tmp190 * _tmp308;
  const Scalar _tmp310 = _tmp184 * _tmp308 - _tmp194 * _tmp309 + _tmp196 * _tmp309;
  const Scalar _tmp311 = _tmp184 * _tmp307 + _tmp199 * _tmp309 - _tmp200 * _tmp309;
  const Scalar _tmp312 = _tmp122 * (_tmp286 + _tmp303) + _tmp130;
  const Scalar _tmp313 = _tmp119 * (_tmp3 + _tmp304) + _tmp122 * (_tmp293 + _tmp80) +
                         _tmp125 * (_tmp284 + _tmp290 + _tmp59 + _tmp61);
  const Scalar _tmp314 = _tmp161 * _tmp313 + _tmp164 * _tmp312;
  const Scalar _tmp315 = _tmp170 * _tmp312 - _tmp216 * _tmp314 + _tmp217 * _tmp314;
  const Scalar _tmp316 = _tmp176 * _tmp313 - _tmp213 * _tmp314 + _tmp214 * _tmp314;
  const Scalar _tmp317 = _tmp189 * _tmp316 + _tmp190 * _tmp315;
  const Scalar _tmp318 = _tmp184 * _tmp315 - _tmp194 * _tmp317 + _tmp196 * _tmp317;
  const Scalar _tmp319 = _tmp198 * _tmp317;
  const Scalar _tmp320 = _tmp184 * _tmp316 - _tmp192 * _tmp319 + _tmp195 * _tmp319;
  const Scalar _tmp321 = _tmp235 - _tmp237 + _tmp239 - _tmp241;
  const Scalar _tmp322 = _tmp142 * _tmp321;
  const Scalar _tmp323 = -_tmp185 * _tmp322 + _tmp214 * _tmp321 - _tmp244 + _tmp246;
  const Scalar _tmp324 = -_tmp166 * _tmp322 + _tmp217 * _tmp321 - _tmp249 + _tmp251;
  const Scalar _tmp325 = _tmp189 * _tmp323 + _tmp190 * _tmp324;
  const Scalar _tmp326 = _tmp184 * _tmp324 - _tmp194 * _tmp325 + _tmp196 * _tmp325;
  const Scalar _tmp327 = _tmp184 * _tmp323 + _tmp199 * _tmp325 - _tmp200 * _tmp325;
  const Scalar _tmp328 = _tmp257 + _tmp258 - _tmp259 - _tmp260;
  const Scalar _tmp329 = -_tmp213 * _tmp328 + _tmp214 * _tmp328 + _tmp264 - _tmp265;
  const Scalar _tmp330 = -_tmp216 * _tmp328 + _tmp217 * _tmp328 + _tmp256 - _tmp262;
  const Scalar _tmp331 = _tmp189 * _tmp329 + _tmp190 * _tmp330;
  const Scalar _tmp332 = _tmp184 * _tmp330 - _tmp194 * _tmp331 + _tmp196 * _tmp331;
  const Scalar _tmp333 = _tmp184 * _tmp329 + _tmp199 * _tmp331 - _tmp200 * _tmp331;
  const Scalar _tmp334 = -_tmp270 + _tmp271 - _tmp272 + _tmp273;
  const Scalar _tmp335 = -_tmp213 * _tmp334 + _tmp214 * _tmp334 + _tmp275 - _tmp276;
  const Scalar _tmp336 = -_tmp216 * _tmp334 + _tmp217 * _tmp334 + _tmp278 - _tmp279;
  const Scalar _tmp337 = _tmp189 * _tmp335 + _tmp190 * _tmp336;
  const Scalar _tmp338 = _tmp184 * _tmp336 - _tmp194 * _tmp337 + _tmp196 * _tmp337;
  const Scalar _tmp339 = _tmp184 * _tmp335 + _tmp199 * _tmp337 - _tmp200 * _tmp337;
  const Scalar _tmp340 = _tmp48 * _tmp79 + _tmp6 * _tmp76 + _tmp64 * _tmp81;
  const Scalar _tmp341 = _tmp48 * _tmp85 + _tmp6 * _tmp83 + _tmp64 * _tmp86;
  const Scalar _tmp342 = _tmp47 * _tmp48 + _tmp5 * _tmp6 + _tmp63 * _tmp64;
  const Scalar _tmp343 =
      -_tmp158 * _tmp341 + _tmp161 * _tmp340 - _tmp162 * _tmp341 + _tmp164 * _tmp342;
  const Scalar _tmp344 =
      _tmp176 * _tmp340 - _tmp187 * _tmp341 - _tmp213 * _tmp343 + _tmp214 * _tmp343;
  const Scalar _tmp345 =
      _tmp170 * _tmp342 - _tmp173 * _tmp341 - _tmp216 * _tmp343 + _tmp217 * _tmp343;
  const Scalar _tmp346 = _tmp189 * _tmp344 + _tmp190 * _tmp345;
  const Scalar _tmp347 = _tmp184 * _tmp345 - _tmp194 * _tmp346 + _tmp196 * _tmp346;
  const Scalar _tmp348 = _tmp184 * _tmp344 + _tmp199 * _tmp346 - _tmp200 * _tmp346;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp109;
    _res(1, 0) = _tmp110;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp197;
    _jacobian(1, 0) = _tmp201;
    _jacobian(0, 1) = _tmp220;
    _jacobian(1, 1) = _tmp221;
    _jacobian(0, 2) = _tmp232;
    _jacobian(1, 2) = _tmp233;
    _jacobian(0, 3) = _tmp254;
    _jacobian(1, 3) = _tmp255;
    _jacobian(0, 4) = _tmp268;
    _jacobian(1, 4) = _tmp269;
    _jacobian(0, 5) = _tmp282;
    _jacobian(1, 5) = _tmp283;
    _jacobian(0, 6) = _tmp299;
    _jacobian(1, 6) = _tmp300;
    _jacobian(0, 7) = _tmp310;
    _jacobian(1, 7) = _tmp311;
    _jacobian(0, 8) = _tmp318;
    _jacobian(1, 8) = _tmp320;
    _jacobian(0, 9) = _tmp326;
    _jacobian(1, 9) = _tmp327;
    _jacobian(0, 10) = _tmp332;
    _jacobian(1, 10) = _tmp333;
    _jacobian(0, 11) = _tmp338;
    _jacobian(1, 11) = _tmp339;
    _jacobian(0, 12) = _tmp347;
    _jacobian(1, 12) = _tmp348;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp197, Scalar(2)) + std::pow(_tmp201, Scalar(2));
    _hessian(1, 0) = _tmp197 * _tmp220 + _tmp201 * _tmp221;
    _hessian(2, 0) = _tmp197 * _tmp232 + _tmp201 * _tmp233;
    _hessian(3, 0) = _tmp197 * _tmp254 + _tmp201 * _tmp255;
    _hessian(4, 0) = _tmp197 * _tmp268 + _tmp201 * _tmp269;
    _hessian(5, 0) = _tmp197 * _tmp282 + _tmp201 * _tmp283;
    _hessian(6, 0) = _tmp197 * _tmp299 + _tmp201 * _tmp300;
    _hessian(7, 0) = _tmp197 * _tmp310 + _tmp201 * _tmp311;
    _hessian(8, 0) = _tmp197 * _tmp318 + _tmp201 * _tmp320;
    _hessian(9, 0) = _tmp197 * _tmp326 + _tmp201 * _tmp327;
    _hessian(10, 0) = _tmp197 * _tmp332 + _tmp201 * _tmp333;
    _hessian(11, 0) = _tmp197 * _tmp338 + _tmp201 * _tmp339;
    _hessian(12, 0) = _tmp197 * _tmp347 + _tmp201 * _tmp348;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp220, Scalar(2)) + std::pow(_tmp221, Scalar(2));
    _hessian(2, 1) = _tmp220 * _tmp232 + _tmp221 * _tmp233;
    _hessian(3, 1) = _tmp220 * _tmp254 + _tmp221 * _tmp255;
    _hessian(4, 1) = _tmp220 * _tmp268 + _tmp221 * _tmp269;
    _hessian(5, 1) = _tmp220 * _tmp282 + _tmp221 * _tmp283;
    _hessian(6, 1) = _tmp220 * _tmp299 + _tmp221 * _tmp300;
    _hessian(7, 1) = _tmp220 * _tmp310 + _tmp221 * _tmp311;
    _hessian(8, 1) = _tmp220 * _tmp318 + _tmp221 * _tmp320;
    _hessian(9, 1) = _tmp220 * _tmp326 + _tmp221 * _tmp327;
    _hessian(10, 1) = _tmp220 * _tmp332 + _tmp221 * _tmp333;
    _hessian(11, 1) = _tmp220 * _tmp338 + _tmp221 * _tmp339;
    _hessian(12, 1) = _tmp220 * _tmp347 + _tmp221 * _tmp348;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp232, Scalar(2)) + std::pow(_tmp233, Scalar(2));
    _hessian(3, 2) = _tmp232 * _tmp254 + _tmp233 * _tmp255;
    _hessian(4, 2) = _tmp232 * _tmp268 + _tmp233 * _tmp269;
    _hessian(5, 2) = _tmp232 * _tmp282 + _tmp233 * _tmp283;
    _hessian(6, 2) = _tmp232 * _tmp299 + _tmp233 * _tmp300;
    _hessian(7, 2) = _tmp232 * _tmp310 + _tmp233 * _tmp311;
    _hessian(8, 2) = _tmp232 * _tmp318 + _tmp233 * _tmp320;
    _hessian(9, 2) = _tmp232 * _tmp326 + _tmp233 * _tmp327;
    _hessian(10, 2) = _tmp232 * _tmp332 + _tmp233 * _tmp333;
    _hessian(11, 2) = _tmp232 * _tmp338 + _tmp233 * _tmp339;
    _hessian(12, 2) = _tmp232 * _tmp347 + _tmp233 * _tmp348;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp254, Scalar(2)) + std::pow(_tmp255, Scalar(2));
    _hessian(4, 3) = _tmp254 * _tmp268 + _tmp255 * _tmp269;
    _hessian(5, 3) = _tmp254 * _tmp282 + _tmp255 * _tmp283;
    _hessian(6, 3) = _tmp254 * _tmp299 + _tmp255 * _tmp300;
    _hessian(7, 3) = _tmp254 * _tmp310 + _tmp255 * _tmp311;
    _hessian(8, 3) = _tmp254 * _tmp318 + _tmp255 * _tmp320;
    _hessian(9, 3) = _tmp254 * _tmp326 + _tmp255 * _tmp327;
    _hessian(10, 3) = _tmp254 * _tmp332 + _tmp255 * _tmp333;
    _hessian(11, 3) = _tmp254 * _tmp338 + _tmp255 * _tmp339;
    _hessian(12, 3) = _tmp254 * _tmp347 + _tmp255 * _tmp348;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp268, Scalar(2)) + std::pow(_tmp269, Scalar(2));
    _hessian(5, 4) = _tmp268 * _tmp282 + _tmp269 * _tmp283;
    _hessian(6, 4) = _tmp268 * _tmp299 + _tmp269 * _tmp300;
    _hessian(7, 4) = _tmp268 * _tmp310 + _tmp269 * _tmp311;
    _hessian(8, 4) = _tmp268 * _tmp318 + _tmp269 * _tmp320;
    _hessian(9, 4) = _tmp268 * _tmp326 + _tmp269 * _tmp327;
    _hessian(10, 4) = _tmp268 * _tmp332 + _tmp269 * _tmp333;
    _hessian(11, 4) = _tmp268 * _tmp338 + _tmp269 * _tmp339;
    _hessian(12, 4) = _tmp268 * _tmp347 + _tmp269 * _tmp348;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp282, Scalar(2)) + std::pow(_tmp283, Scalar(2));
    _hessian(6, 5) = _tmp282 * _tmp299 + _tmp283 * _tmp300;
    _hessian(7, 5) = _tmp282 * _tmp310 + _tmp283 * _tmp311;
    _hessian(8, 5) = _tmp282 * _tmp318 + _tmp283 * _tmp320;
    _hessian(9, 5) = _tmp282 * _tmp326 + _tmp283 * _tmp327;
    _hessian(10, 5) = _tmp282 * _tmp332 + _tmp283 * _tmp333;
    _hessian(11, 5) = _tmp282 * _tmp338 + _tmp283 * _tmp339;
    _hessian(12, 5) = _tmp282 * _tmp347 + _tmp283 * _tmp348;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp299, Scalar(2)) + std::pow(_tmp300, Scalar(2));
    _hessian(7, 6) = _tmp299 * _tmp310 + _tmp300 * _tmp311;
    _hessian(8, 6) = _tmp299 * _tmp318 + _tmp300 * _tmp320;
    _hessian(9, 6) = _tmp299 * _tmp326 + _tmp300 * _tmp327;
    _hessian(10, 6) = _tmp299 * _tmp332 + _tmp300 * _tmp333;
    _hessian(11, 6) = _tmp299 * _tmp338 + _tmp300 * _tmp339;
    _hessian(12, 6) = _tmp299 * _tmp347 + _tmp300 * _tmp348;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp310, Scalar(2)) + std::pow(_tmp311, Scalar(2));
    _hessian(8, 7) = _tmp310 * _tmp318 + _tmp311 * _tmp320;
    _hessian(9, 7) = _tmp310 * _tmp326 + _tmp311 * _tmp327;
    _hessian(10, 7) = _tmp310 * _tmp332 + _tmp311 * _tmp333;
    _hessian(11, 7) = _tmp310 * _tmp338 + _tmp311 * _tmp339;
    _hessian(12, 7) = _tmp310 * _tmp347 + _tmp311 * _tmp348;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp318, Scalar(2)) + std::pow(_tmp320, Scalar(2));
    _hessian(9, 8) = _tmp318 * _tmp326 + _tmp320 * _tmp327;
    _hessian(10, 8) = _tmp318 * _tmp332 + _tmp320 * _tmp333;
    _hessian(11, 8) = _tmp318 * _tmp338 + _tmp320 * _tmp339;
    _hessian(12, 8) = _tmp318 * _tmp347 + _tmp320 * _tmp348;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp326, Scalar(2)) + std::pow(_tmp327, Scalar(2));
    _hessian(10, 9) = _tmp326 * _tmp332 + _tmp327 * _tmp333;
    _hessian(11, 9) = _tmp326 * _tmp338 + _tmp327 * _tmp339;
    _hessian(12, 9) = _tmp326 * _tmp347 + _tmp327 * _tmp348;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp332, Scalar(2)) + std::pow(_tmp333, Scalar(2));
    _hessian(11, 10) = _tmp332 * _tmp338 + _tmp333 * _tmp339;
    _hessian(12, 10) = _tmp332 * _tmp347 + _tmp333 * _tmp348;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp338, Scalar(2)) + std::pow(_tmp339, Scalar(2));
    _hessian(12, 11) = _tmp338 * _tmp347 + _tmp339 * _tmp348;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp347, Scalar(2)) + std::pow(_tmp348, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp109 * _tmp197 + _tmp110 * _tmp201;
    _rhs(1, 0) = _tmp109 * _tmp220 + _tmp110 * _tmp221;
    _rhs(2, 0) = _tmp109 * _tmp232 + _tmp110 * _tmp233;
    _rhs(3, 0) = _tmp109 * _tmp254 + _tmp110 * _tmp255;
    _rhs(4, 0) = _tmp109 * _tmp268 + _tmp110 * _tmp269;
    _rhs(5, 0) = _tmp109 * _tmp282 + _tmp110 * _tmp283;
    _rhs(6, 0) = _tmp109 * _tmp299 + _tmp110 * _tmp300;
    _rhs(7, 0) = _tmp109 * _tmp310 + _tmp110 * _tmp311;
    _rhs(8, 0) = _tmp109 * _tmp318 + _tmp110 * _tmp320;
    _rhs(9, 0) = _tmp109 * _tmp326 + _tmp110 * _tmp327;
    _rhs(10, 0) = _tmp109 * _tmp332 + _tmp110 * _tmp333;
    _rhs(11, 0) = _tmp109 * _tmp338 + _tmp110 * _tmp339;
    _rhs(12, 0) = _tmp109 * _tmp347 + _tmp110 * _tmp348;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
