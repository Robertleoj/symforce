// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/orthographic_camera_cal.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (4x8) jacobian of res wrt args a (4), b (4)
 *     hessian: (8x8) Gauss-Newton hessian for args a (4), b (4)
 *     rhs: (8x1) Gauss-Newton rhs for args a (4), b (4)
 */
template <typename Scalar>
void BetweenFactorOrthographicCameraCal(const sym::OrthographicCameraCal<Scalar>& a,
                                        const sym::OrthographicCameraCal<Scalar>& b,
                                        const sym::OrthographicCameraCal<Scalar>& a_T_b,
                                        const Eigen::Matrix<Scalar, 4, 4>& sqrt_info,
                                        const Scalar epsilon,
                                        Eigen::Matrix<Scalar, 4, 1>* const res = nullptr,
                                        Eigen::Matrix<Scalar, 4, 8>* const jacobian = nullptr,
                                        Eigen::Matrix<Scalar, 8, 8>* const hessian = nullptr,
                                        Eigen::Matrix<Scalar, 8, 1>* const rhs = nullptr) {
  // Total ops: 206

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (80)
  const Scalar _tmp0 = -_a[2] - _a_T_b[2] + _b[2];
  const Scalar _tmp1 = -_a[3] - _a_T_b[3] + _b[3];
  const Scalar _tmp2 = -_a[1] - _a_T_b[1] + _b[1];
  const Scalar _tmp3 = -_a[0] - _a_T_b[0] + _b[0];
  const Scalar _tmp4 = _tmp0 * sqrt_info(0, 2) + _tmp1 * sqrt_info(0, 3) + _tmp2 * sqrt_info(0, 1) +
                       _tmp3 * sqrt_info(0, 0);
  const Scalar _tmp5 = _tmp0 * sqrt_info(1, 2) + _tmp1 * sqrt_info(1, 3) + _tmp2 * sqrt_info(1, 1) +
                       _tmp3 * sqrt_info(1, 0);
  const Scalar _tmp6 = _tmp0 * sqrt_info(2, 2) + _tmp1 * sqrt_info(2, 3) + _tmp2 * sqrt_info(2, 1) +
                       _tmp3 * sqrt_info(2, 0);
  const Scalar _tmp7 = _tmp0 * sqrt_info(3, 2) + _tmp1 * sqrt_info(3, 3) + _tmp2 * sqrt_info(3, 1) +
                       _tmp3 * sqrt_info(3, 0);
  const Scalar _tmp8 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp9 = std::pow(sqrt_info(2, 0), Scalar(2));
  const Scalar _tmp10 = std::pow(sqrt_info(1, 0), Scalar(2));
  const Scalar _tmp11 = std::pow(sqrt_info(3, 0), Scalar(2));
  const Scalar _tmp12 = _tmp10 + _tmp11 + _tmp8 + _tmp9;
  const Scalar _tmp13 = sqrt_info(0, 0) * sqrt_info(0, 1);
  const Scalar _tmp14 = sqrt_info(2, 0) * sqrt_info(2, 1);
  const Scalar _tmp15 = sqrt_info(1, 0) * sqrt_info(1, 1);
  const Scalar _tmp16 = sqrt_info(3, 0) * sqrt_info(3, 1);
  const Scalar _tmp17 = _tmp13 + _tmp14 + _tmp15 + _tmp16;
  const Scalar _tmp18 = sqrt_info(0, 0) * sqrt_info(0, 2);
  const Scalar _tmp19 = sqrt_info(2, 0) * sqrt_info(2, 2);
  const Scalar _tmp20 = sqrt_info(1, 0) * sqrt_info(1, 2);
  const Scalar _tmp21 = sqrt_info(3, 0) * sqrt_info(3, 2);
  const Scalar _tmp22 = _tmp18 + _tmp19 + _tmp20 + _tmp21;
  const Scalar _tmp23 = sqrt_info(0, 0) * sqrt_info(0, 3);
  const Scalar _tmp24 = sqrt_info(2, 0) * sqrt_info(2, 3);
  const Scalar _tmp25 = sqrt_info(1, 0) * sqrt_info(1, 3);
  const Scalar _tmp26 = sqrt_info(3, 0) * sqrt_info(3, 3);
  const Scalar _tmp27 = _tmp23 + _tmp24 + _tmp25 + _tmp26;
  const Scalar _tmp28 = -_tmp13 - _tmp14 - _tmp15 - _tmp16;
  const Scalar _tmp29 = -_tmp18 - _tmp19 - _tmp20 - _tmp21;
  const Scalar _tmp30 = -_tmp23 - _tmp24 - _tmp25 - _tmp26;
  const Scalar _tmp31 = std::pow(sqrt_info(0, 1), Scalar(2));
  const Scalar _tmp32 = std::pow(sqrt_info(2, 1), Scalar(2));
  const Scalar _tmp33 = std::pow(sqrt_info(1, 1), Scalar(2));
  const Scalar _tmp34 = std::pow(sqrt_info(3, 1), Scalar(2));
  const Scalar _tmp35 = _tmp31 + _tmp32 + _tmp33 + _tmp34;
  const Scalar _tmp36 = sqrt_info(0, 1) * sqrt_info(0, 2);
  const Scalar _tmp37 = sqrt_info(2, 1) * sqrt_info(2, 2);
  const Scalar _tmp38 = sqrt_info(1, 1) * sqrt_info(1, 2);
  const Scalar _tmp39 = sqrt_info(3, 1) * sqrt_info(3, 2);
  const Scalar _tmp40 = _tmp36 + _tmp37 + _tmp38 + _tmp39;
  const Scalar _tmp41 = sqrt_info(0, 1) * sqrt_info(0, 3);
  const Scalar _tmp42 = sqrt_info(2, 1) * sqrt_info(2, 3);
  const Scalar _tmp43 = sqrt_info(1, 1) * sqrt_info(1, 3);
  const Scalar _tmp44 = sqrt_info(3, 1) * sqrt_info(3, 3);
  const Scalar _tmp45 = _tmp41 + _tmp42 + _tmp43 + _tmp44;
  const Scalar _tmp46 = -_tmp36 - _tmp37 - _tmp38 - _tmp39;
  const Scalar _tmp47 = -_tmp41 - _tmp42 - _tmp43 - _tmp44;
  const Scalar _tmp48 = std::pow(sqrt_info(0, 2), Scalar(2));
  const Scalar _tmp49 = std::pow(sqrt_info(2, 2), Scalar(2));
  const Scalar _tmp50 = std::pow(sqrt_info(1, 2), Scalar(2));
  const Scalar _tmp51 = std::pow(sqrt_info(3, 2), Scalar(2));
  const Scalar _tmp52 = _tmp48 + _tmp49 + _tmp50 + _tmp51;
  const Scalar _tmp53 = sqrt_info(0, 2) * sqrt_info(0, 3);
  const Scalar _tmp54 = sqrt_info(2, 2) * sqrt_info(2, 3);
  const Scalar _tmp55 = sqrt_info(1, 2) * sqrt_info(1, 3);
  const Scalar _tmp56 = sqrt_info(3, 2) * sqrt_info(3, 3);
  const Scalar _tmp57 = _tmp53 + _tmp54 + _tmp55 + _tmp56;
  const Scalar _tmp58 = -_tmp53 - _tmp54 - _tmp55 - _tmp56;
  const Scalar _tmp59 = std::pow(sqrt_info(0, 3), Scalar(2));
  const Scalar _tmp60 = std::pow(sqrt_info(2, 3), Scalar(2));
  const Scalar _tmp61 = std::pow(sqrt_info(1, 3), Scalar(2));
  const Scalar _tmp62 = std::pow(sqrt_info(3, 3), Scalar(2));
  const Scalar _tmp63 = _tmp59 + _tmp60 + _tmp61 + _tmp62;
  const Scalar _tmp64 = _tmp5 * sqrt_info(1, 0);
  const Scalar _tmp65 = _tmp4 * sqrt_info(0, 0);
  const Scalar _tmp66 = _tmp6 * sqrt_info(2, 0);
  const Scalar _tmp67 = _tmp7 * sqrt_info(3, 0);
  const Scalar _tmp68 = _tmp5 * sqrt_info(1, 1);
  const Scalar _tmp69 = _tmp4 * sqrt_info(0, 1);
  const Scalar _tmp70 = _tmp6 * sqrt_info(2, 1);
  const Scalar _tmp71 = _tmp7 * sqrt_info(3, 1);
  const Scalar _tmp72 = _tmp5 * sqrt_info(1, 2);
  const Scalar _tmp73 = _tmp4 * sqrt_info(0, 2);
  const Scalar _tmp74 = _tmp6 * sqrt_info(2, 2);
  const Scalar _tmp75 = _tmp7 * sqrt_info(3, 2);
  const Scalar _tmp76 = _tmp5 * sqrt_info(1, 3);
  const Scalar _tmp77 = _tmp4 * sqrt_info(0, 3);
  const Scalar _tmp78 = _tmp6 * sqrt_info(2, 3);
  const Scalar _tmp79 = _tmp7 * sqrt_info(3, 3);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 4, 1>& _res = (*res);

    _res(0, 0) = _tmp4;
    _res(1, 0) = _tmp5;
    _res(2, 0) = _tmp6;
    _res(3, 0) = _tmp7;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 4, 8>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -sqrt_info(0, 0);
    _jacobian(1, 0) = -sqrt_info(1, 0);
    _jacobian(2, 0) = -sqrt_info(2, 0);
    _jacobian(3, 0) = -sqrt_info(3, 0);
    _jacobian(0, 1) = -sqrt_info(0, 1);
    _jacobian(1, 1) = -sqrt_info(1, 1);
    _jacobian(2, 1) = -sqrt_info(2, 1);
    _jacobian(3, 1) = -sqrt_info(3, 1);
    _jacobian(0, 2) = -sqrt_info(0, 2);
    _jacobian(1, 2) = -sqrt_info(1, 2);
    _jacobian(2, 2) = -sqrt_info(2, 2);
    _jacobian(3, 2) = -sqrt_info(3, 2);
    _jacobian(0, 3) = -sqrt_info(0, 3);
    _jacobian(1, 3) = -sqrt_info(1, 3);
    _jacobian(2, 3) = -sqrt_info(2, 3);
    _jacobian(3, 3) = -sqrt_info(3, 3);
    _jacobian(0, 4) = sqrt_info(0, 0);
    _jacobian(1, 4) = sqrt_info(1, 0);
    _jacobian(2, 4) = sqrt_info(2, 0);
    _jacobian(3, 4) = sqrt_info(3, 0);
    _jacobian(0, 5) = sqrt_info(0, 1);
    _jacobian(1, 5) = sqrt_info(1, 1);
    _jacobian(2, 5) = sqrt_info(2, 1);
    _jacobian(3, 5) = sqrt_info(3, 1);
    _jacobian(0, 6) = sqrt_info(0, 2);
    _jacobian(1, 6) = sqrt_info(1, 2);
    _jacobian(2, 6) = sqrt_info(2, 2);
    _jacobian(3, 6) = sqrt_info(3, 2);
    _jacobian(0, 7) = sqrt_info(0, 3);
    _jacobian(1, 7) = sqrt_info(1, 3);
    _jacobian(2, 7) = sqrt_info(2, 3);
    _jacobian(3, 7) = sqrt_info(3, 3);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 8, 8>& _hessian = (*hessian);

    _hessian(0, 0) = _tmp12;
    _hessian(1, 0) = _tmp17;
    _hessian(2, 0) = _tmp22;
    _hessian(3, 0) = _tmp27;
    _hessian(4, 0) = -_tmp10 - _tmp11 - _tmp8 - _tmp9;
    _hessian(5, 0) = _tmp28;
    _hessian(6, 0) = _tmp29;
    _hessian(7, 0) = _tmp30;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = _tmp35;
    _hessian(2, 1) = _tmp40;
    _hessian(3, 1) = _tmp45;
    _hessian(4, 1) = _tmp28;
    _hessian(5, 1) = -_tmp31 - _tmp32 - _tmp33 - _tmp34;
    _hessian(6, 1) = _tmp46;
    _hessian(7, 1) = _tmp47;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = _tmp52;
    _hessian(3, 2) = _tmp57;
    _hessian(4, 2) = _tmp29;
    _hessian(5, 2) = _tmp46;
    _hessian(6, 2) = -_tmp48 - _tmp49 - _tmp50 - _tmp51;
    _hessian(7, 2) = _tmp58;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = _tmp63;
    _hessian(4, 3) = _tmp30;
    _hessian(5, 3) = _tmp47;
    _hessian(6, 3) = _tmp58;
    _hessian(7, 3) = -_tmp59 - _tmp60 - _tmp61 - _tmp62;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = _tmp12;
    _hessian(5, 4) = _tmp17;
    _hessian(6, 4) = _tmp22;
    _hessian(7, 4) = _tmp27;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = _tmp35;
    _hessian(6, 5) = _tmp40;
    _hessian(7, 5) = _tmp45;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = _tmp52;
    _hessian(7, 6) = _tmp57;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = _tmp63;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 8, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp64 - _tmp65 - _tmp66 - _tmp67;
    _rhs(1, 0) = -_tmp68 - _tmp69 - _tmp70 - _tmp71;
    _rhs(2, 0) = -_tmp72 - _tmp73 - _tmp74 - _tmp75;
    _rhs(3, 0) = -_tmp76 - _tmp77 - _tmp78 - _tmp79;
    _rhs(4, 0) = _tmp64 + _tmp65 + _tmp66 + _tmp67;
    _rhs(5, 0) = _tmp68 + _tmp69 + _tmp70 + _tmp71;
    _rhs(6, 0) = _tmp72 + _tmp73 + _tmp74 + _tmp75;
    _rhs(7, 0) = _tmp76 + _tmp77 + _tmp78 + _tmp79;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
