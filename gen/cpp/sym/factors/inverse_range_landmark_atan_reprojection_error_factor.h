// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkAtanReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 5, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 5, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1093

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (286)
  const Scalar _tmp0 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp1 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp2 = _tmp1 + Scalar(-1) / Scalar(2);
  const Scalar _tmp3 = _tmp0 + _tmp2;
  const Scalar _tmp4 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp5 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp6 = _tmp4 + _tmp5;
  const Scalar _tmp7 = source_calibration_storage(3, 0) - source_pixel(1, 0);
  const Scalar _tmp8 =
      std::pow(_tmp7, Scalar(2)) / std::pow(source_calibration_storage(1, 0), Scalar(2));
  const Scalar _tmp9 = source_calibration_storage(2, 0) - source_pixel(0, 0);
  const Scalar _tmp10 =
      std::pow(_tmp9, Scalar(2)) / std::pow(source_calibration_storage(0, 0), Scalar(2));
  const Scalar _tmp11 = _tmp10 + _tmp8 + epsilon;
  const Scalar _tmp12 = std::sqrt(_tmp11);
  const Scalar _tmp13 = _tmp12 * source_calibration_storage(4, 0);
  const Scalar _tmp14 = std::tan(_tmp13);
  const Scalar _tmp15 = std::tan(Scalar(0.5) * source_calibration_storage(4, 0));
  const Scalar _tmp16 = std::pow(_tmp14, Scalar(2)) / (_tmp11 * std::pow(_tmp15, Scalar(2)));
  const Scalar _tmp17 = std::pow(Scalar((Scalar(1) / Scalar(4)) * _tmp10 * _tmp16 +
                                        (Scalar(1) / Scalar(4)) * _tmp16 * _tmp8 + 1),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp18 = 2 * _tmp17;
  const Scalar _tmp19 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp20 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp21 = _tmp19 - _tmp20;
  const Scalar _tmp22 = _tmp14 / (_tmp12 * _tmp15);
  const Scalar _tmp23 = _tmp17 * _tmp22;
  const Scalar _tmp24 = _tmp7 / source_calibration_storage(1, 0);
  const Scalar _tmp25 = _tmp23 * _tmp24;
  const Scalar _tmp26 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp27 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp28 = _tmp27 + Scalar(-1) / Scalar(2);
  const Scalar _tmp29 = _tmp9 / source_calibration_storage(0, 0);
  const Scalar _tmp30 = _tmp23 * _tmp29;
  const Scalar _tmp31 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp32 =
      _tmp18 * _tmp6 - _tmp21 * _tmp25 + _tmp30 * (_tmp26 + _tmp28) - _tmp31 * source_inverse_range;
  const Scalar _tmp33 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp34 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp35 = _tmp33 + _tmp34;
  const Scalar _tmp36 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp37 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp38 = _tmp36 - _tmp37;
  const Scalar _tmp39 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp40 = _tmp19 + _tmp20;
  const Scalar _tmp41 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp42 = -_tmp18 * _tmp38 + _tmp25 * (_tmp28 + _tmp39) - _tmp30 * _tmp40 -
                        _tmp41 * source_inverse_range;
  const Scalar _tmp43 = _tmp35 * _tmp42;
  const Scalar _tmp44 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp45 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp46 = _tmp44 - _tmp45;
  const Scalar _tmp47 = _tmp36 + _tmp37;
  const Scalar _tmp48 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp49 = _tmp4 - _tmp5;
  const Scalar _tmp50 = -_tmp18 * (_tmp26 + _tmp39 + Scalar(-1) / Scalar(2)) - _tmp25 * _tmp47 -
                        _tmp30 * _tmp49 - _tmp48 * source_inverse_range;
  const Scalar _tmp51 = _tmp46 * _tmp50;
  const Scalar _tmp52 = _tmp3 * _tmp32 - _tmp43 - _tmp51;
  const Scalar _tmp53 = std::pow(_tmp52, Scalar(2));
  const Scalar _tmp54 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp55 = _tmp2 + _tmp54;
  const Scalar _tmp56 = _tmp44 + _tmp45;
  const Scalar _tmp57 = _tmp32 * _tmp56;
  const Scalar _tmp58 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp59 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp60 = _tmp58 - _tmp59;
  const Scalar _tmp61 = _tmp42 * _tmp60;
  const Scalar _tmp62 = _tmp57 + _tmp61;
  const Scalar _tmp63 = -_tmp50 * _tmp55 + _tmp62;
  const Scalar _tmp64 = 2 * _tmp63;
  const Scalar _tmp65 = std::max<Scalar>(_tmp64, epsilon);
  const Scalar _tmp66 = std::pow(_tmp65, Scalar(-2));
  const Scalar _tmp67 = 4 * _tmp66;
  const Scalar _tmp68 = _tmp0 + _tmp54;
  const Scalar _tmp69 = _tmp68 + Scalar(-1) / Scalar(2);
  const Scalar _tmp70 = _tmp33 - _tmp34;
  const Scalar _tmp71 = _tmp58 + _tmp59;
  const Scalar _tmp72 = _tmp32 * _tmp70 - _tmp50 * _tmp71;
  const Scalar _tmp73 = _tmp42 * _tmp69 + _tmp72;
  const Scalar _tmp74 = std::pow(_tmp73, Scalar(2));
  const Scalar _tmp75 = _tmp53 * _tmp67 + _tmp67 * _tmp74 + epsilon;
  const Scalar _tmp76 = std::sqrt(_tmp75);
  const Scalar _tmp77 = 2 / _tmp76;
  const Scalar _tmp78 = std::tan(Scalar(0.5) * target_calibration_storage(4, 0));
  const Scalar _tmp79 = std::atan(2 * _tmp76 * _tmp78);
  const Scalar _tmp80 = Scalar(1.0) / (target_calibration_storage(4, 0));
  const Scalar _tmp81 = _tmp80 / _tmp65;
  const Scalar _tmp82 = _tmp79 * _tmp81;
  const Scalar _tmp83 = _tmp82 * target_calibration_storage(0, 0);
  const Scalar _tmp84 = _tmp77 * _tmp83;
  const Scalar _tmp85 = -_tmp52 * _tmp84 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp86 = _tmp82 * target_calibration_storage(1, 0);
  const Scalar _tmp87 = _tmp77 * _tmp86;
  const Scalar _tmp88 = -_tmp73 * _tmp87 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp89 = std::pow(_tmp85, Scalar(2)) + std::pow(_tmp88, Scalar(2)) + epsilon;
  const Scalar _tmp90 = std::pow(_tmp89, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp91 = std::sqrt(weight);
  const Scalar _tmp92 = std::max<Scalar>(0, (((_tmp63) > 0) - ((_tmp63) < 0)));
  const Scalar _tmp93 = std::max<Scalar>(0, (((-std::fabs(_tmp13) + Scalar(M_PI_2)) > 0) -
                                             ((-std::fabs(_tmp13) + Scalar(M_PI_2)) < 0)));
  const Scalar _tmp94 = -epsilon;
  const Scalar _tmp95 = Scalar(1.0) / (_tmp94 + gnc_mu - 1);
  const Scalar _tmp96 = epsilon + std::fabs(_tmp95);
  const Scalar _tmp97 = _tmp95 + 2;
  const Scalar _tmp98 =
      _tmp97 + 2 * epsilon *
                   (std::min<Scalar>(0, (((_tmp97) > 0) - ((_tmp97) < 0))) + Scalar(1) / Scalar(2));
  const Scalar _tmp99 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp100 = _tmp89 * _tmp99 / _tmp96 + 1;
  const Scalar _tmp101 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(_tmp96 * (std::pow(_tmp100, Scalar((Scalar(1) / Scalar(2)) * _tmp98)) - 1) /
                       _tmp98));
  const Scalar _tmp102 = _tmp101 * _tmp91 * _tmp92 * _tmp93;
  const Scalar _tmp103 = _tmp102 * _tmp90;
  const Scalar _tmp104 = _tmp103 * _tmp85;
  const Scalar _tmp105 = _tmp103 * _tmp88;
  const Scalar _tmp106 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp107 = -_tmp26;
  const Scalar _tmp108 = _tmp27 - _tmp39;
  const Scalar _tmp109 = (Scalar(1) / Scalar(2)) * _tmp106 + (Scalar(1) / Scalar(2)) * _tmp107 +
                         (Scalar(1) / Scalar(2)) * _tmp108;
  const Scalar _tmp110 = -_tmp109 * _tmp25 - _tmp18 * _tmp47;
  const Scalar _tmp111 = -_tmp18 * _tmp21 - _tmp25 * _tmp6;
  const Scalar _tmp112 = -_tmp106;
  const Scalar _tmp113 = _tmp17 * (_tmp107 + _tmp112 + _tmp27 + _tmp39);
  const Scalar _tmp114 = _tmp113 + _tmp25 * _tmp38;
  const Scalar _tmp115 = _tmp110 * _tmp46 - _tmp111 * _tmp3 + _tmp114 * _tmp35;
  const Scalar _tmp116 = _tmp52 * _tmp66;
  const Scalar _tmp117 = _tmp110 * _tmp71 - _tmp111 * _tmp70 - _tmp114 * _tmp69;
  const Scalar _tmp118 = _tmp66 * _tmp73;
  const Scalar _tmp119 = _tmp110 * _tmp55 - _tmp111 * _tmp56 - _tmp114 * _tmp60;
  const Scalar _tmp120 = (((_tmp64 + _tmp94) > 0) - ((_tmp64 + _tmp94) < 0)) + 1;
  const Scalar _tmp121 = _tmp120 / [&]() {
    const Scalar base = _tmp65;
    return base * base * base;
  }();
  const Scalar _tmp122 = _tmp119 * _tmp121;
  const Scalar _tmp123 =
      _tmp115 * _tmp116 + _tmp117 * _tmp118 - _tmp122 * _tmp53 - _tmp122 * _tmp74;
  const Scalar _tmp124 = 4 * _tmp78 * _tmp81 /
                         (_tmp75 * (_tmp75 * std::pow(_tmp78, Scalar(2)) + Scalar(1) / Scalar(4)));
  const Scalar _tmp125 = _tmp73 * target_calibration_storage(1, 0);
  const Scalar _tmp126 = _tmp124 * _tmp125;
  const Scalar _tmp127 = _tmp120 * _tmp77 * _tmp79 * _tmp80;
  const Scalar _tmp128 = _tmp127 * target_calibration_storage(1, 0);
  const Scalar _tmp129 = _tmp118 * _tmp128;
  const Scalar _tmp130 = 8 / (_tmp75 * std::sqrt(_tmp75));
  const Scalar _tmp131 = _tmp130 * _tmp86;
  const Scalar _tmp132 = _tmp131 * _tmp73;
  const Scalar _tmp133 =
      _tmp117 * _tmp87 - _tmp119 * _tmp129 + _tmp123 * _tmp126 - _tmp123 * _tmp132;
  const Scalar _tmp134 = _tmp127 * target_calibration_storage(0, 0);
  const Scalar _tmp135 = _tmp116 * _tmp134;
  const Scalar _tmp136 = _tmp130 * _tmp83;
  const Scalar _tmp137 = _tmp136 * _tmp52;
  const Scalar _tmp138 = _tmp52 * target_calibration_storage(0, 0);
  const Scalar _tmp139 = _tmp124 * _tmp138;
  const Scalar _tmp140 =
      _tmp115 * _tmp84 - _tmp119 * _tmp135 - _tmp123 * _tmp137 + _tmp123 * _tmp139;
  const Scalar _tmp141 = _tmp133 * _tmp88 + _tmp140 * _tmp85;
  const Scalar _tmp142 = std::pow(_tmp100, Scalar((Scalar(1) / Scalar(2)) * _tmp98 - 1)) * _tmp90 *
                         _tmp91 * _tmp92 * _tmp93 * _tmp99 / _tmp101;
  const Scalar _tmp143 = _tmp142 * _tmp85;
  const Scalar _tmp144 = _tmp102 / (_tmp89 * std::sqrt(_tmp89));
  const Scalar _tmp145 = _tmp144 * _tmp85;
  const Scalar _tmp146 = _tmp103 * _tmp140 + _tmp141 * _tmp143 - _tmp141 * _tmp145;
  const Scalar _tmp147 = _tmp142 * _tmp88;
  const Scalar _tmp148 = _tmp144 * _tmp88;
  const Scalar _tmp149 = _tmp103 * _tmp133 + _tmp141 * _tmp147 - _tmp141 * _tmp148;
  const Scalar _tmp150 = _tmp17 * (_tmp108 + _tmp112 + _tmp26);
  const Scalar _tmp151 = _tmp150 - _tmp30 * _tmp6;
  const Scalar _tmp152 = _tmp18 * _tmp40 - _tmp30 * _tmp38;
  const Scalar _tmp153 = _tmp109 * _tmp30 + _tmp18 * _tmp49;
  const Scalar _tmp154 = _tmp151 * _tmp3 + _tmp152 * _tmp35 + _tmp153 * _tmp46;
  const Scalar _tmp155 = _tmp151 * _tmp56 - _tmp152 * _tmp60 + _tmp153 * _tmp55;
  const Scalar _tmp156 = _tmp121 * _tmp53;
  const Scalar _tmp157 = _tmp121 * _tmp74;
  const Scalar _tmp158 = _tmp151 * _tmp70 - _tmp152 * _tmp69 + _tmp153 * _tmp71;
  const Scalar _tmp159 =
      -_tmp116 * _tmp154 - _tmp118 * _tmp158 + _tmp155 * _tmp156 + _tmp155 * _tmp157;
  const Scalar _tmp160 =
      -_tmp135 * _tmp155 + _tmp137 * _tmp159 - _tmp139 * _tmp159 + _tmp154 * _tmp84;
  const Scalar _tmp161 =
      -_tmp126 * _tmp159 - _tmp129 * _tmp155 + _tmp132 * _tmp159 + _tmp158 * _tmp87;
  const Scalar _tmp162 = _tmp160 * _tmp85 + _tmp161 * _tmp88;
  const Scalar _tmp163 = -_tmp103 * _tmp160 - _tmp143 * _tmp162 + _tmp145 * _tmp162;
  const Scalar _tmp164 = _tmp162 * _tmp88;
  const Scalar _tmp165 = _tmp103 * _tmp161 + _tmp142 * _tmp164 - _tmp144 * _tmp164;
  const Scalar _tmp166 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp167 = -_tmp150 * _tmp166 * _tmp24 - _tmp21 * _tmp30;
  const Scalar _tmp168 = _tmp25 * _tmp49 - _tmp30 * _tmp47;
  const Scalar _tmp169 = _tmp113 * _tmp166 * _tmp29 + _tmp25 * _tmp40;
  const Scalar _tmp170 = _tmp167 * _tmp56 - _tmp168 * _tmp55 + _tmp169 * _tmp60;
  const Scalar _tmp171 = _tmp167 * _tmp70 - _tmp168 * _tmp71 + _tmp169 * _tmp69;
  const Scalar _tmp172 = _tmp167 * _tmp3 - _tmp168 * _tmp46 - _tmp169 * _tmp35;
  const Scalar _tmp173 =
      -_tmp116 * _tmp172 - _tmp118 * _tmp171 + _tmp156 * _tmp170 + _tmp157 * _tmp170;
  const Scalar _tmp174 =
      _tmp135 * _tmp170 - _tmp137 * _tmp173 + _tmp139 * _tmp173 - _tmp172 * _tmp84;
  const Scalar _tmp175 =
      _tmp126 * _tmp173 + _tmp129 * _tmp170 - _tmp132 * _tmp173 - _tmp171 * _tmp87;
  const Scalar _tmp176 = _tmp174 * _tmp85 + _tmp175 * _tmp88;
  const Scalar _tmp177 = _tmp103 * _tmp174 + _tmp143 * _tmp176 - _tmp145 * _tmp176;
  const Scalar _tmp178 = -_tmp103 * _tmp175 - _tmp147 * _tmp176 + _tmp148 * _tmp176;
  const Scalar _tmp179 = _tmp156 * source_inverse_range;
  const Scalar _tmp180 = _tmp118 * source_inverse_range;
  const Scalar _tmp181 = _tmp116 * source_inverse_range;
  const Scalar _tmp182 = _tmp157 * source_inverse_range;
  const Scalar _tmp183 = _tmp179 * _tmp56 - _tmp180 * _tmp70 - _tmp181 * _tmp3 + _tmp182 * _tmp56;
  const Scalar _tmp184 = _tmp137 * _tmp183;
  const Scalar _tmp185 = _tmp139 * _tmp183;
  const Scalar _tmp186 = _tmp84 * source_inverse_range;
  const Scalar _tmp187 = _tmp186 * _tmp3;
  const Scalar _tmp188 = _tmp134 * _tmp181;
  const Scalar _tmp189 = _tmp188 * _tmp56;
  const Scalar _tmp190 = -_tmp184 + _tmp185 - _tmp187 + _tmp189;
  const Scalar _tmp191 = _tmp128 * _tmp180;
  const Scalar _tmp192 = _tmp191 * _tmp56;
  const Scalar _tmp193 = _tmp132 * _tmp183;
  const Scalar _tmp194 = _tmp87 * source_inverse_range;
  const Scalar _tmp195 = _tmp194 * _tmp70;
  const Scalar _tmp196 = _tmp126 * _tmp183;
  const Scalar _tmp197 = _tmp192 - _tmp193 - _tmp195 + _tmp196;
  const Scalar _tmp198 = _tmp190 * _tmp85 + _tmp197 * _tmp88;
  const Scalar _tmp199 = _tmp103 * _tmp190 + _tmp143 * _tmp198 - _tmp145 * _tmp198;
  const Scalar _tmp200 = _tmp103 * _tmp197 + _tmp147 * _tmp198 - _tmp148 * _tmp198;
  const Scalar _tmp201 = -_tmp179 * _tmp60 + _tmp180 * _tmp69 - _tmp181 * _tmp35 - _tmp182 * _tmp60;
  const Scalar _tmp202 = _tmp126 * _tmp201;
  const Scalar _tmp203 = _tmp132 * _tmp201;
  const Scalar _tmp204 = _tmp191 * _tmp60;
  const Scalar _tmp205 = _tmp194 * _tmp69;
  const Scalar _tmp206 = -_tmp202 + _tmp203 + _tmp204 - _tmp205;
  const Scalar _tmp207 = _tmp139 * _tmp201;
  const Scalar _tmp208 = _tmp137 * _tmp201;
  const Scalar _tmp209 = _tmp186 * _tmp35;
  const Scalar _tmp210 = _tmp188 * _tmp60;
  const Scalar _tmp211 = -_tmp207 + _tmp208 + _tmp209 + _tmp210;
  const Scalar _tmp212 = _tmp206 * _tmp88 + _tmp211 * _tmp85;
  const Scalar _tmp213 = _tmp103 * _tmp211 + _tmp143 * _tmp212 - _tmp145 * _tmp212;
  const Scalar _tmp214 = _tmp103 * _tmp206 + _tmp147 * _tmp212 - _tmp148 * _tmp212;
  const Scalar _tmp215 = _tmp179 * _tmp55 - _tmp180 * _tmp71 - _tmp181 * _tmp46 + _tmp182 * _tmp55;
  const Scalar _tmp216 = _tmp139 * _tmp215;
  const Scalar _tmp217 = _tmp186 * _tmp46;
  const Scalar _tmp218 = _tmp137 * _tmp215;
  const Scalar _tmp219 = _tmp188 * _tmp55;
  const Scalar _tmp220 = -_tmp216 + _tmp217 + _tmp218 - _tmp219;
  const Scalar _tmp221 = _tmp191 * _tmp55;
  const Scalar _tmp222 = _tmp132 * _tmp215;
  const Scalar _tmp223 = _tmp126 * _tmp215;
  const Scalar _tmp224 = _tmp194 * _tmp71;
  const Scalar _tmp225 = -_tmp221 + _tmp222 - _tmp223 + _tmp224;
  const Scalar _tmp226 = _tmp220 * _tmp85 + _tmp225 * _tmp88;
  const Scalar _tmp227 = _tmp103 * _tmp220 + _tmp143 * _tmp226 - _tmp145 * _tmp226;
  const Scalar _tmp228 = -_tmp103 * _tmp225 - _tmp147 * _tmp226 + _tmp148 * _tmp226;
  const Scalar _tmp229 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp230 = -_tmp229;
  const Scalar _tmp231 = -_tmp1;
  const Scalar _tmp232 = (Scalar(1) / Scalar(2)) * _tmp42 * (_tmp230 + _tmp231 + _tmp68) + _tmp72;
  const Scalar _tmp233 = -_tmp0 + _tmp54;
  const Scalar _tmp234 = (Scalar(1) / Scalar(2)) * _tmp50 * (_tmp1 + _tmp230 + _tmp233);
  const Scalar _tmp235 = _tmp234 - _tmp57 - _tmp61;
  const Scalar _tmp236 = -_tmp118 * _tmp235 + _tmp156 * _tmp232 + _tmp157 * _tmp232;
  const Scalar _tmp237 = _tmp236 * _tmp52;
  const Scalar _tmp238 = _tmp116 * _tmp232;
  const Scalar _tmp239 =
      _tmp124 * _tmp237 * target_calibration_storage(0, 0) + _tmp134 * _tmp238 - _tmp136 * _tmp237;
  const Scalar _tmp240 =
      _tmp126 * _tmp236 + _tmp129 * _tmp232 - _tmp132 * _tmp236 - _tmp235 * _tmp87;
  const Scalar _tmp241 = _tmp239 * _tmp85 + _tmp240 * _tmp88;
  const Scalar _tmp242 = _tmp103 * _tmp239 + _tmp143 * _tmp241 - _tmp145 * _tmp241;
  const Scalar _tmp243 = -_tmp103 * _tmp240 - _tmp147 * _tmp241 + _tmp148 * _tmp241;
  const Scalar _tmp244 = -_tmp234 + _tmp62;
  const Scalar _tmp245 =
      (Scalar(1) / Scalar(2)) * _tmp32 * (_tmp229 + _tmp231 + _tmp233) + _tmp43 + _tmp51;
  const Scalar _tmp246 = -_tmp116 * _tmp244 + _tmp156 * _tmp245 + _tmp157 * _tmp245;
  const Scalar _tmp247 =
      _tmp135 * _tmp245 - _tmp137 * _tmp246 + _tmp139 * _tmp246 - _tmp244 * _tmp84;
  const Scalar _tmp248 = _tmp118 * _tmp245;
  const Scalar _tmp249 = _tmp246 * _tmp73;
  const Scalar _tmp250 =
      _tmp124 * _tmp249 * target_calibration_storage(1, 0) + _tmp128 * _tmp248 - _tmp131 * _tmp249;
  const Scalar _tmp251 = _tmp247 * _tmp85 + _tmp250 * _tmp88;
  const Scalar _tmp252 = _tmp103 * _tmp247 + _tmp143 * _tmp251 - _tmp145 * _tmp251;
  const Scalar _tmp253 = _tmp103 * _tmp250 + _tmp147 * _tmp251 - _tmp148 * _tmp251;
  const Scalar _tmp254 = _tmp238 + _tmp248;
  const Scalar _tmp255 = -_tmp126 * _tmp254 + _tmp132 * _tmp254 - _tmp245 * _tmp87;
  const Scalar _tmp256 = _tmp137 * _tmp254 - _tmp139 * _tmp254 - _tmp232 * _tmp84;
  const Scalar _tmp257 = _tmp255 * _tmp88 + _tmp256 * _tmp85;
  const Scalar _tmp258 = -_tmp103 * _tmp256 - _tmp143 * _tmp257 + _tmp145 * _tmp257;
  const Scalar _tmp259 = _tmp103 * _tmp255 + _tmp147 * _tmp257 - _tmp148 * _tmp257;
  const Scalar _tmp260 = _tmp184 - _tmp185 + _tmp187 - _tmp189;
  const Scalar _tmp261 = -_tmp192 + _tmp193 + _tmp195 - _tmp196;
  const Scalar _tmp262 = _tmp260 * _tmp85 + _tmp261 * _tmp88;
  const Scalar _tmp263 = _tmp103 * _tmp260 + _tmp143 * _tmp262 - _tmp145 * _tmp262;
  const Scalar _tmp264 = -_tmp103 * _tmp261 - _tmp147 * _tmp262 + _tmp148 * _tmp262;
  const Scalar _tmp265 = _tmp202 - _tmp203 - _tmp204 + _tmp205;
  const Scalar _tmp266 = _tmp207 - _tmp208 - _tmp209 - _tmp210;
  const Scalar _tmp267 = _tmp265 * _tmp88 + _tmp266 * _tmp85;
  const Scalar _tmp268 = _tmp103 * _tmp266 + _tmp143 * _tmp267 - _tmp145 * _tmp267;
  const Scalar _tmp269 = _tmp103 * _tmp265 + _tmp147 * _tmp267 - _tmp148 * _tmp267;
  const Scalar _tmp270 = _tmp216 - _tmp217 - _tmp218 + _tmp219;
  const Scalar _tmp271 = _tmp221 - _tmp222 + _tmp223 - _tmp224;
  const Scalar _tmp272 = _tmp270 * _tmp85 + _tmp271 * _tmp88;
  const Scalar _tmp273 = -_tmp103 * _tmp270 - _tmp143 * _tmp272 + _tmp145 * _tmp272;
  const Scalar _tmp274 = _tmp103 * _tmp271 + _tmp147 * _tmp272 - _tmp148 * _tmp272;
  const Scalar _tmp275 = _tmp31 * _tmp56 + _tmp41 * _tmp60 - _tmp48 * _tmp55;
  const Scalar _tmp276 = _tmp31 * _tmp70 + _tmp41 * _tmp69 - _tmp48 * _tmp71;
  const Scalar _tmp277 = -_tmp3 * _tmp31 + _tmp35 * _tmp41 + _tmp46 * _tmp48;
  const Scalar _tmp278 = _tmp121 * _tmp275;
  const Scalar _tmp279 =
      -_tmp116 * _tmp277 + _tmp118 * _tmp276 - _tmp278 * _tmp53 - _tmp278 * _tmp74;
  const Scalar _tmp280 = _tmp124 * _tmp279;
  const Scalar _tmp281 =
      _tmp125 * _tmp280 - _tmp129 * _tmp275 - _tmp132 * _tmp279 + _tmp276 * _tmp87;
  const Scalar _tmp282 =
      -_tmp135 * _tmp275 - _tmp137 * _tmp279 + _tmp138 * _tmp280 - _tmp277 * _tmp84;
  const Scalar _tmp283 = _tmp281 * _tmp88 + _tmp282 * _tmp85;
  const Scalar _tmp284 = _tmp103 * _tmp282 + _tmp143 * _tmp283 - _tmp145 * _tmp283;
  const Scalar _tmp285 = _tmp103 * _tmp281 + _tmp147 * _tmp283 - _tmp148 * _tmp283;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp104;
    _res(1, 0) = _tmp105;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp146;
    _jacobian(1, 0) = _tmp149;
    _jacobian(0, 1) = -_tmp163;
    _jacobian(1, 1) = _tmp165;
    _jacobian(0, 2) = _tmp177;
    _jacobian(1, 2) = -_tmp178;
    _jacobian(0, 3) = _tmp199;
    _jacobian(1, 3) = _tmp200;
    _jacobian(0, 4) = _tmp213;
    _jacobian(1, 4) = _tmp214;
    _jacobian(0, 5) = _tmp227;
    _jacobian(1, 5) = -_tmp228;
    _jacobian(0, 6) = _tmp242;
    _jacobian(1, 6) = -_tmp243;
    _jacobian(0, 7) = _tmp252;
    _jacobian(1, 7) = _tmp253;
    _jacobian(0, 8) = -_tmp258;
    _jacobian(1, 8) = _tmp259;
    _jacobian(0, 9) = _tmp263;
    _jacobian(1, 9) = -_tmp264;
    _jacobian(0, 10) = _tmp268;
    _jacobian(1, 10) = _tmp269;
    _jacobian(0, 11) = -_tmp273;
    _jacobian(1, 11) = _tmp274;
    _jacobian(0, 12) = _tmp284;
    _jacobian(1, 12) = _tmp285;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp146, Scalar(2)) + std::pow(_tmp149, Scalar(2));
    _hessian(1, 0) = -_tmp146 * _tmp163 + _tmp149 * _tmp165;
    _hessian(2, 0) = _tmp146 * _tmp177 - _tmp149 * _tmp178;
    _hessian(3, 0) = _tmp146 * _tmp199 + _tmp149 * _tmp200;
    _hessian(4, 0) = _tmp146 * _tmp213 + _tmp149 * _tmp214;
    _hessian(5, 0) = _tmp146 * _tmp227 - _tmp149 * _tmp228;
    _hessian(6, 0) = _tmp146 * _tmp242 - _tmp149 * _tmp243;
    _hessian(7, 0) = _tmp146 * _tmp252 + _tmp149 * _tmp253;
    _hessian(8, 0) = -_tmp146 * _tmp258 + _tmp149 * _tmp259;
    _hessian(9, 0) = _tmp146 * _tmp263 - _tmp149 * _tmp264;
    _hessian(10, 0) = _tmp146 * _tmp268 + _tmp149 * _tmp269;
    _hessian(11, 0) = -_tmp146 * _tmp273 + _tmp149 * _tmp274;
    _hessian(12, 0) = _tmp146 * _tmp284 + _tmp149 * _tmp285;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp163, Scalar(2)) + std::pow(_tmp165, Scalar(2));
    _hessian(2, 1) = -_tmp163 * _tmp177 - _tmp165 * _tmp178;
    _hessian(3, 1) = -_tmp163 * _tmp199 + _tmp165 * _tmp200;
    _hessian(4, 1) = -_tmp163 * _tmp213 + _tmp165 * _tmp214;
    _hessian(5, 1) = -_tmp163 * _tmp227 - _tmp165 * _tmp228;
    _hessian(6, 1) = -_tmp163 * _tmp242 - _tmp165 * _tmp243;
    _hessian(7, 1) = -_tmp163 * _tmp252 + _tmp165 * _tmp253;
    _hessian(8, 1) = _tmp163 * _tmp258 + _tmp165 * _tmp259;
    _hessian(9, 1) = -_tmp163 * _tmp263 - _tmp165 * _tmp264;
    _hessian(10, 1) = -_tmp163 * _tmp268 + _tmp165 * _tmp269;
    _hessian(11, 1) = _tmp163 * _tmp273 + _tmp165 * _tmp274;
    _hessian(12, 1) = -_tmp163 * _tmp284 + _tmp165 * _tmp285;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp177, Scalar(2)) + std::pow(_tmp178, Scalar(2));
    _hessian(3, 2) = _tmp177 * _tmp199 - _tmp178 * _tmp200;
    _hessian(4, 2) = _tmp177 * _tmp213 - _tmp178 * _tmp214;
    _hessian(5, 2) = _tmp177 * _tmp227 + _tmp178 * _tmp228;
    _hessian(6, 2) = _tmp177 * _tmp242 + _tmp178 * _tmp243;
    _hessian(7, 2) = _tmp177 * _tmp252 - _tmp178 * _tmp253;
    _hessian(8, 2) = -_tmp177 * _tmp258 - _tmp178 * _tmp259;
    _hessian(9, 2) = _tmp177 * _tmp263 + _tmp178 * _tmp264;
    _hessian(10, 2) = _tmp177 * _tmp268 - _tmp178 * _tmp269;
    _hessian(11, 2) = -_tmp177 * _tmp273 - _tmp178 * _tmp274;
    _hessian(12, 2) = _tmp177 * _tmp284 - _tmp178 * _tmp285;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp199, Scalar(2)) + std::pow(_tmp200, Scalar(2));
    _hessian(4, 3) = _tmp199 * _tmp213 + _tmp200 * _tmp214;
    _hessian(5, 3) = _tmp199 * _tmp227 - _tmp200 * _tmp228;
    _hessian(6, 3) = _tmp199 * _tmp242 - _tmp200 * _tmp243;
    _hessian(7, 3) = _tmp199 * _tmp252 + _tmp200 * _tmp253;
    _hessian(8, 3) = -_tmp199 * _tmp258 + _tmp200 * _tmp259;
    _hessian(9, 3) = _tmp199 * _tmp263 - _tmp200 * _tmp264;
    _hessian(10, 3) = _tmp199 * _tmp268 + _tmp200 * _tmp269;
    _hessian(11, 3) = -_tmp199 * _tmp273 + _tmp200 * _tmp274;
    _hessian(12, 3) = _tmp199 * _tmp284 + _tmp200 * _tmp285;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp213, Scalar(2)) + std::pow(_tmp214, Scalar(2));
    _hessian(5, 4) = _tmp213 * _tmp227 - _tmp214 * _tmp228;
    _hessian(6, 4) = _tmp213 * _tmp242 - _tmp214 * _tmp243;
    _hessian(7, 4) = _tmp213 * _tmp252 + _tmp214 * _tmp253;
    _hessian(8, 4) = -_tmp213 * _tmp258 + _tmp214 * _tmp259;
    _hessian(9, 4) = _tmp213 * _tmp263 - _tmp214 * _tmp264;
    _hessian(10, 4) = _tmp213 * _tmp268 + _tmp214 * _tmp269;
    _hessian(11, 4) = -_tmp213 * _tmp273 + _tmp214 * _tmp274;
    _hessian(12, 4) = _tmp213 * _tmp284 + _tmp214 * _tmp285;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp227, Scalar(2)) + std::pow(_tmp228, Scalar(2));
    _hessian(6, 5) = _tmp227 * _tmp242 + _tmp228 * _tmp243;
    _hessian(7, 5) = _tmp227 * _tmp252 - _tmp228 * _tmp253;
    _hessian(8, 5) = -_tmp227 * _tmp258 - _tmp228 * _tmp259;
    _hessian(9, 5) = _tmp227 * _tmp263 + _tmp228 * _tmp264;
    _hessian(10, 5) = _tmp227 * _tmp268 - _tmp228 * _tmp269;
    _hessian(11, 5) = -_tmp227 * _tmp273 - _tmp228 * _tmp274;
    _hessian(12, 5) = _tmp227 * _tmp284 - _tmp228 * _tmp285;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp242, Scalar(2)) + std::pow(_tmp243, Scalar(2));
    _hessian(7, 6) = _tmp242 * _tmp252 - _tmp243 * _tmp253;
    _hessian(8, 6) = -_tmp242 * _tmp258 - _tmp243 * _tmp259;
    _hessian(9, 6) = _tmp242 * _tmp263 + _tmp243 * _tmp264;
    _hessian(10, 6) = _tmp242 * _tmp268 - _tmp243 * _tmp269;
    _hessian(11, 6) = -_tmp242 * _tmp273 - _tmp243 * _tmp274;
    _hessian(12, 6) = _tmp242 * _tmp284 - _tmp243 * _tmp285;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp252, Scalar(2)) + std::pow(_tmp253, Scalar(2));
    _hessian(8, 7) = -_tmp252 * _tmp258 + _tmp253 * _tmp259;
    _hessian(9, 7) = _tmp252 * _tmp263 - _tmp253 * _tmp264;
    _hessian(10, 7) = _tmp252 * _tmp268 + _tmp253 * _tmp269;
    _hessian(11, 7) = -_tmp252 * _tmp273 + _tmp253 * _tmp274;
    _hessian(12, 7) = _tmp252 * _tmp284 + _tmp253 * _tmp285;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp258, Scalar(2)) + std::pow(_tmp259, Scalar(2));
    _hessian(9, 8) = -_tmp258 * _tmp263 - _tmp259 * _tmp264;
    _hessian(10, 8) = -_tmp258 * _tmp268 + _tmp259 * _tmp269;
    _hessian(11, 8) = _tmp258 * _tmp273 + _tmp259 * _tmp274;
    _hessian(12, 8) = -_tmp258 * _tmp284 + _tmp259 * _tmp285;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp263, Scalar(2)) + std::pow(_tmp264, Scalar(2));
    _hessian(10, 9) = _tmp263 * _tmp268 - _tmp264 * _tmp269;
    _hessian(11, 9) = -_tmp263 * _tmp273 - _tmp264 * _tmp274;
    _hessian(12, 9) = _tmp263 * _tmp284 - _tmp264 * _tmp285;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp268, Scalar(2)) + std::pow(_tmp269, Scalar(2));
    _hessian(11, 10) = -_tmp268 * _tmp273 + _tmp269 * _tmp274;
    _hessian(12, 10) = _tmp268 * _tmp284 + _tmp269 * _tmp285;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp273, Scalar(2)) + std::pow(_tmp274, Scalar(2));
    _hessian(12, 11) = -_tmp273 * _tmp284 + _tmp274 * _tmp285;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp284, Scalar(2)) + std::pow(_tmp285, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp104 * _tmp146 + _tmp105 * _tmp149;
    _rhs(1, 0) = -_tmp104 * _tmp163 + _tmp105 * _tmp165;
    _rhs(2, 0) = _tmp104 * _tmp177 - _tmp105 * _tmp178;
    _rhs(3, 0) = _tmp104 * _tmp199 + _tmp105 * _tmp200;
    _rhs(4, 0) = _tmp104 * _tmp213 + _tmp105 * _tmp214;
    _rhs(5, 0) = _tmp104 * _tmp227 - _tmp105 * _tmp228;
    _rhs(6, 0) = _tmp104 * _tmp242 - _tmp105 * _tmp243;
    _rhs(7, 0) = _tmp104 * _tmp252 + _tmp105 * _tmp253;
    _rhs(8, 0) = -_tmp104 * _tmp258 + _tmp105 * _tmp259;
    _rhs(9, 0) = _tmp104 * _tmp263 - _tmp105 * _tmp264;
    _rhs(10, 0) = _tmp104 * _tmp268 + _tmp105 * _tmp269;
    _rhs(11, 0) = -_tmp104 * _tmp273 + _tmp105 * _tmp274;
    _rhs(12, 0) = _tmp104 * _tmp284 + _tmp105 * _tmp285;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
