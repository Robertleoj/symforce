// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/double_sphere_camera_cal.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (6x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorDoubleSphereCameraCal(const sym::DoubleSphereCameraCal<Scalar>& a,
                                        const sym::DoubleSphereCameraCal<Scalar>& b,
                                        const sym::DoubleSphereCameraCal<Scalar>& a_T_b,
                                        const Eigen::Matrix<Scalar, 6, 6>& sqrt_info,
                                        const Scalar epsilon,
                                        Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                                        Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                                        Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                        Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 573

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 6, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 6, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (210)
  const Scalar _tmp0 = -_a[5] - _a_T_b[5] + _b[5];
  const Scalar _tmp1 = -_a[4] - _a_T_b[4] + _b[4];
  const Scalar _tmp2 = -_a[3] - _a_T_b[3] + _b[3];
  const Scalar _tmp3 = -_a[2] - _a_T_b[2] + _b[2];
  const Scalar _tmp4 = -_a[0] - _a_T_b[0] + _b[0];
  const Scalar _tmp5 = -_a[1] - _a_T_b[1] + _b[1];
  const Scalar _tmp6 = _tmp0 * sqrt_info(0, 5) + _tmp1 * sqrt_info(0, 4) + _tmp2 * sqrt_info(0, 3) +
                       _tmp3 * sqrt_info(0, 2) + _tmp4 * sqrt_info(0, 0) + _tmp5 * sqrt_info(0, 1);
  const Scalar _tmp7 = _tmp0 * sqrt_info(1, 5) + _tmp1 * sqrt_info(1, 4) + _tmp2 * sqrt_info(1, 3) +
                       _tmp3 * sqrt_info(1, 2) + _tmp4 * sqrt_info(1, 0) + _tmp5 * sqrt_info(1, 1);
  const Scalar _tmp8 = _tmp0 * sqrt_info(2, 5) + _tmp1 * sqrt_info(2, 4) + _tmp2 * sqrt_info(2, 3) +
                       _tmp3 * sqrt_info(2, 2) + _tmp4 * sqrt_info(2, 0) + _tmp5 * sqrt_info(2, 1);
  const Scalar _tmp9 = _tmp0 * sqrt_info(3, 5) + _tmp1 * sqrt_info(3, 4) + _tmp2 * sqrt_info(3, 3) +
                       _tmp3 * sqrt_info(3, 2) + _tmp4 * sqrt_info(3, 0) + _tmp5 * sqrt_info(3, 1);
  const Scalar _tmp10 = _tmp0 * sqrt_info(4, 5) + _tmp1 * sqrt_info(4, 4) +
                        _tmp2 * sqrt_info(4, 3) + _tmp3 * sqrt_info(4, 2) +
                        _tmp4 * sqrt_info(4, 0) + _tmp5 * sqrt_info(4, 1);
  const Scalar _tmp11 = _tmp0 * sqrt_info(5, 5) + _tmp1 * sqrt_info(5, 4) +
                        _tmp2 * sqrt_info(5, 3) + _tmp3 * sqrt_info(5, 2) +
                        _tmp4 * sqrt_info(5, 0) + _tmp5 * sqrt_info(5, 1);
  const Scalar _tmp12 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp13 = std::pow(sqrt_info(2, 0), Scalar(2));
  const Scalar _tmp14 = std::pow(sqrt_info(3, 0), Scalar(2));
  const Scalar _tmp15 = std::pow(sqrt_info(4, 0), Scalar(2));
  const Scalar _tmp16 = std::pow(sqrt_info(1, 0), Scalar(2));
  const Scalar _tmp17 = std::pow(sqrt_info(5, 0), Scalar(2));
  const Scalar _tmp18 = _tmp12 + _tmp13 + _tmp14 + _tmp15 + _tmp16 + _tmp17;
  const Scalar _tmp19 = sqrt_info(3, 0) * sqrt_info(3, 1);
  const Scalar _tmp20 = sqrt_info(1, 0) * sqrt_info(1, 1);
  const Scalar _tmp21 = sqrt_info(2, 0) * sqrt_info(2, 1);
  const Scalar _tmp22 = sqrt_info(0, 0) * sqrt_info(0, 1);
  const Scalar _tmp23 = sqrt_info(4, 0) * sqrt_info(4, 1);
  const Scalar _tmp24 = sqrt_info(5, 0) * sqrt_info(5, 1);
  const Scalar _tmp25 = _tmp19 + _tmp20 + _tmp21 + _tmp22 + _tmp23 + _tmp24;
  const Scalar _tmp26 = sqrt_info(3, 0) * sqrt_info(3, 2);
  const Scalar _tmp27 = sqrt_info(1, 0) * sqrt_info(1, 2);
  const Scalar _tmp28 = sqrt_info(2, 0) * sqrt_info(2, 2);
  const Scalar _tmp29 = sqrt_info(0, 0) * sqrt_info(0, 2);
  const Scalar _tmp30 = sqrt_info(4, 0) * sqrt_info(4, 2);
  const Scalar _tmp31 = sqrt_info(5, 0) * sqrt_info(5, 2);
  const Scalar _tmp32 = _tmp26 + _tmp27 + _tmp28 + _tmp29 + _tmp30 + _tmp31;
  const Scalar _tmp33 = sqrt_info(3, 0) * sqrt_info(3, 3);
  const Scalar _tmp34 = sqrt_info(1, 0) * sqrt_info(1, 3);
  const Scalar _tmp35 = sqrt_info(2, 0) * sqrt_info(2, 3);
  const Scalar _tmp36 = sqrt_info(0, 0) * sqrt_info(0, 3);
  const Scalar _tmp37 = sqrt_info(4, 0) * sqrt_info(4, 3);
  const Scalar _tmp38 = sqrt_info(5, 0) * sqrt_info(5, 3);
  const Scalar _tmp39 = _tmp33 + _tmp34 + _tmp35 + _tmp36 + _tmp37 + _tmp38;
  const Scalar _tmp40 = sqrt_info(3, 0) * sqrt_info(3, 4);
  const Scalar _tmp41 = sqrt_info(1, 0) * sqrt_info(1, 4);
  const Scalar _tmp42 = sqrt_info(2, 0) * sqrt_info(2, 4);
  const Scalar _tmp43 = sqrt_info(0, 0) * sqrt_info(0, 4);
  const Scalar _tmp44 = sqrt_info(4, 0) * sqrt_info(4, 4);
  const Scalar _tmp45 = sqrt_info(5, 0) * sqrt_info(5, 4);
  const Scalar _tmp46 = _tmp40 + _tmp41 + _tmp42 + _tmp43 + _tmp44 + _tmp45;
  const Scalar _tmp47 = sqrt_info(3, 0) * sqrt_info(3, 5);
  const Scalar _tmp48 = sqrt_info(1, 0) * sqrt_info(1, 5);
  const Scalar _tmp49 = sqrt_info(2, 0) * sqrt_info(2, 5);
  const Scalar _tmp50 = sqrt_info(0, 0) * sqrt_info(0, 5);
  const Scalar _tmp51 = sqrt_info(4, 0) * sqrt_info(4, 5);
  const Scalar _tmp52 = sqrt_info(5, 0) * sqrt_info(5, 5);
  const Scalar _tmp53 = _tmp47 + _tmp48 + _tmp49 + _tmp50 + _tmp51 + _tmp52;
  const Scalar _tmp54 = -_tmp19 - _tmp20 - _tmp21 - _tmp22 - _tmp23 - _tmp24;
  const Scalar _tmp55 = -_tmp26 - _tmp27 - _tmp28 - _tmp29 - _tmp30 - _tmp31;
  const Scalar _tmp56 = -_tmp33 - _tmp34 - _tmp35 - _tmp36 - _tmp37 - _tmp38;
  const Scalar _tmp57 = -_tmp40 - _tmp41 - _tmp42 - _tmp43 - _tmp44 - _tmp45;
  const Scalar _tmp58 = -_tmp47 - _tmp48 - _tmp49 - _tmp50 - _tmp51 - _tmp52;
  const Scalar _tmp59 = std::pow(sqrt_info(0, 1), Scalar(2));
  const Scalar _tmp60 = std::pow(sqrt_info(2, 1), Scalar(2));
  const Scalar _tmp61 = std::pow(sqrt_info(3, 1), Scalar(2));
  const Scalar _tmp62 = std::pow(sqrt_info(4, 1), Scalar(2));
  const Scalar _tmp63 = std::pow(sqrt_info(1, 1), Scalar(2));
  const Scalar _tmp64 = std::pow(sqrt_info(5, 1), Scalar(2));
  const Scalar _tmp65 = _tmp59 + _tmp60 + _tmp61 + _tmp62 + _tmp63 + _tmp64;
  const Scalar _tmp66 = sqrt_info(3, 1) * sqrt_info(3, 2);
  const Scalar _tmp67 = sqrt_info(1, 1) * sqrt_info(1, 2);
  const Scalar _tmp68 = sqrt_info(2, 1) * sqrt_info(2, 2);
  const Scalar _tmp69 = sqrt_info(0, 1) * sqrt_info(0, 2);
  const Scalar _tmp70 = sqrt_info(4, 1) * sqrt_info(4, 2);
  const Scalar _tmp71 = sqrt_info(5, 1) * sqrt_info(5, 2);
  const Scalar _tmp72 = _tmp66 + _tmp67 + _tmp68 + _tmp69 + _tmp70 + _tmp71;
  const Scalar _tmp73 = sqrt_info(3, 1) * sqrt_info(3, 3);
  const Scalar _tmp74 = sqrt_info(1, 1) * sqrt_info(1, 3);
  const Scalar _tmp75 = sqrt_info(2, 1) * sqrt_info(2, 3);
  const Scalar _tmp76 = sqrt_info(0, 1) * sqrt_info(0, 3);
  const Scalar _tmp77 = sqrt_info(4, 1) * sqrt_info(4, 3);
  const Scalar _tmp78 = sqrt_info(5, 1) * sqrt_info(5, 3);
  const Scalar _tmp79 = _tmp73 + _tmp74 + _tmp75 + _tmp76 + _tmp77 + _tmp78;
  const Scalar _tmp80 = sqrt_info(3, 1) * sqrt_info(3, 4);
  const Scalar _tmp81 = sqrt_info(1, 1) * sqrt_info(1, 4);
  const Scalar _tmp82 = sqrt_info(2, 1) * sqrt_info(2, 4);
  const Scalar _tmp83 = sqrt_info(0, 1) * sqrt_info(0, 4);
  const Scalar _tmp84 = sqrt_info(4, 1) * sqrt_info(4, 4);
  const Scalar _tmp85 = sqrt_info(5, 1) * sqrt_info(5, 4);
  const Scalar _tmp86 = _tmp80 + _tmp81 + _tmp82 + _tmp83 + _tmp84 + _tmp85;
  const Scalar _tmp87 = sqrt_info(3, 1) * sqrt_info(3, 5);
  const Scalar _tmp88 = sqrt_info(1, 1) * sqrt_info(1, 5);
  const Scalar _tmp89 = sqrt_info(2, 1) * sqrt_info(2, 5);
  const Scalar _tmp90 = sqrt_info(0, 1) * sqrt_info(0, 5);
  const Scalar _tmp91 = sqrt_info(4, 1) * sqrt_info(4, 5);
  const Scalar _tmp92 = sqrt_info(5, 1) * sqrt_info(5, 5);
  const Scalar _tmp93 = _tmp87 + _tmp88 + _tmp89 + _tmp90 + _tmp91 + _tmp92;
  const Scalar _tmp94 = -_tmp66 - _tmp67 - _tmp68 - _tmp69 - _tmp70 - _tmp71;
  const Scalar _tmp95 = -_tmp73 - _tmp74 - _tmp75 - _tmp76 - _tmp77 - _tmp78;
  const Scalar _tmp96 = -_tmp80 - _tmp81 - _tmp82 - _tmp83 - _tmp84 - _tmp85;
  const Scalar _tmp97 = -_tmp87 - _tmp88 - _tmp89 - _tmp90 - _tmp91 - _tmp92;
  const Scalar _tmp98 = std::pow(sqrt_info(0, 2), Scalar(2));
  const Scalar _tmp99 = std::pow(sqrt_info(2, 2), Scalar(2));
  const Scalar _tmp100 = std::pow(sqrt_info(3, 2), Scalar(2));
  const Scalar _tmp101 = std::pow(sqrt_info(4, 2), Scalar(2));
  const Scalar _tmp102 = std::pow(sqrt_info(1, 2), Scalar(2));
  const Scalar _tmp103 = std::pow(sqrt_info(5, 2), Scalar(2));
  const Scalar _tmp104 = _tmp100 + _tmp101 + _tmp102 + _tmp103 + _tmp98 + _tmp99;
  const Scalar _tmp105 = sqrt_info(3, 2) * sqrt_info(3, 3);
  const Scalar _tmp106 = sqrt_info(1, 2) * sqrt_info(1, 3);
  const Scalar _tmp107 = sqrt_info(2, 2) * sqrt_info(2, 3);
  const Scalar _tmp108 = sqrt_info(0, 2) * sqrt_info(0, 3);
  const Scalar _tmp109 = sqrt_info(4, 2) * sqrt_info(4, 3);
  const Scalar _tmp110 = sqrt_info(5, 2) * sqrt_info(5, 3);
  const Scalar _tmp111 = _tmp105 + _tmp106 + _tmp107 + _tmp108 + _tmp109 + _tmp110;
  const Scalar _tmp112 = sqrt_info(3, 2) * sqrt_info(3, 4);
  const Scalar _tmp113 = sqrt_info(1, 2) * sqrt_info(1, 4);
  const Scalar _tmp114 = sqrt_info(2, 2) * sqrt_info(2, 4);
  const Scalar _tmp115 = sqrt_info(0, 2) * sqrt_info(0, 4);
  const Scalar _tmp116 = sqrt_info(4, 2) * sqrt_info(4, 4);
  const Scalar _tmp117 = sqrt_info(5, 2) * sqrt_info(5, 4);
  const Scalar _tmp118 = _tmp112 + _tmp113 + _tmp114 + _tmp115 + _tmp116 + _tmp117;
  const Scalar _tmp119 = sqrt_info(3, 2) * sqrt_info(3, 5);
  const Scalar _tmp120 = sqrt_info(1, 2) * sqrt_info(1, 5);
  const Scalar _tmp121 = sqrt_info(2, 2) * sqrt_info(2, 5);
  const Scalar _tmp122 = sqrt_info(0, 2) * sqrt_info(0, 5);
  const Scalar _tmp123 = sqrt_info(4, 2) * sqrt_info(4, 5);
  const Scalar _tmp124 = sqrt_info(5, 2) * sqrt_info(5, 5);
  const Scalar _tmp125 = _tmp119 + _tmp120 + _tmp121 + _tmp122 + _tmp123 + _tmp124;
  const Scalar _tmp126 = -_tmp105 - _tmp106 - _tmp107 - _tmp108 - _tmp109 - _tmp110;
  const Scalar _tmp127 = -_tmp112 - _tmp113 - _tmp114 - _tmp115 - _tmp116 - _tmp117;
  const Scalar _tmp128 = -_tmp119 - _tmp120 - _tmp121 - _tmp122 - _tmp123 - _tmp124;
  const Scalar _tmp129 = std::pow(sqrt_info(0, 3), Scalar(2));
  const Scalar _tmp130 = std::pow(sqrt_info(2, 3), Scalar(2));
  const Scalar _tmp131 = std::pow(sqrt_info(3, 3), Scalar(2));
  const Scalar _tmp132 = std::pow(sqrt_info(4, 3), Scalar(2));
  const Scalar _tmp133 = std::pow(sqrt_info(1, 3), Scalar(2));
  const Scalar _tmp134 = std::pow(sqrt_info(5, 3), Scalar(2));
  const Scalar _tmp135 = _tmp129 + _tmp130 + _tmp131 + _tmp132 + _tmp133 + _tmp134;
  const Scalar _tmp136 = sqrt_info(3, 3) * sqrt_info(3, 4);
  const Scalar _tmp137 = sqrt_info(1, 3) * sqrt_info(1, 4);
  const Scalar _tmp138 = sqrt_info(2, 3) * sqrt_info(2, 4);
  const Scalar _tmp139 = sqrt_info(0, 3) * sqrt_info(0, 4);
  const Scalar _tmp140 = sqrt_info(4, 3) * sqrt_info(4, 4);
  const Scalar _tmp141 = sqrt_info(5, 3) * sqrt_info(5, 4);
  const Scalar _tmp142 = _tmp136 + _tmp137 + _tmp138 + _tmp139 + _tmp140 + _tmp141;
  const Scalar _tmp143 = sqrt_info(3, 3) * sqrt_info(3, 5);
  const Scalar _tmp144 = sqrt_info(1, 3) * sqrt_info(1, 5);
  const Scalar _tmp145 = sqrt_info(2, 3) * sqrt_info(2, 5);
  const Scalar _tmp146 = sqrt_info(0, 3) * sqrt_info(0, 5);
  const Scalar _tmp147 = sqrt_info(4, 3) * sqrt_info(4, 5);
  const Scalar _tmp148 = sqrt_info(5, 3) * sqrt_info(5, 5);
  const Scalar _tmp149 = _tmp143 + _tmp144 + _tmp145 + _tmp146 + _tmp147 + _tmp148;
  const Scalar _tmp150 = -_tmp136 - _tmp137 - _tmp138 - _tmp139 - _tmp140 - _tmp141;
  const Scalar _tmp151 = -_tmp143 - _tmp144 - _tmp145 - _tmp146 - _tmp147 - _tmp148;
  const Scalar _tmp152 = std::pow(sqrt_info(0, 4), Scalar(2));
  const Scalar _tmp153 = std::pow(sqrt_info(2, 4), Scalar(2));
  const Scalar _tmp154 = std::pow(sqrt_info(3, 4), Scalar(2));
  const Scalar _tmp155 = std::pow(sqrt_info(4, 4), Scalar(2));
  const Scalar _tmp156 = std::pow(sqrt_info(1, 4), Scalar(2));
  const Scalar _tmp157 = std::pow(sqrt_info(5, 4), Scalar(2));
  const Scalar _tmp158 = _tmp152 + _tmp153 + _tmp154 + _tmp155 + _tmp156 + _tmp157;
  const Scalar _tmp159 = sqrt_info(3, 4) * sqrt_info(3, 5);
  const Scalar _tmp160 = sqrt_info(1, 4) * sqrt_info(1, 5);
  const Scalar _tmp161 = sqrt_info(2, 4) * sqrt_info(2, 5);
  const Scalar _tmp162 = sqrt_info(0, 4) * sqrt_info(0, 5);
  const Scalar _tmp163 = sqrt_info(4, 4) * sqrt_info(4, 5);
  const Scalar _tmp164 = sqrt_info(5, 4) * sqrt_info(5, 5);
  const Scalar _tmp165 = _tmp159 + _tmp160 + _tmp161 + _tmp162 + _tmp163 + _tmp164;
  const Scalar _tmp166 = -_tmp159 - _tmp160 - _tmp161 - _tmp162 - _tmp163 - _tmp164;
  const Scalar _tmp167 = std::pow(sqrt_info(0, 5), Scalar(2));
  const Scalar _tmp168 = std::pow(sqrt_info(2, 5), Scalar(2));
  const Scalar _tmp169 = std::pow(sqrt_info(3, 5), Scalar(2));
  const Scalar _tmp170 = std::pow(sqrt_info(4, 5), Scalar(2));
  const Scalar _tmp171 = std::pow(sqrt_info(1, 5), Scalar(2));
  const Scalar _tmp172 = std::pow(sqrt_info(5, 5), Scalar(2));
  const Scalar _tmp173 = _tmp167 + _tmp168 + _tmp169 + _tmp170 + _tmp171 + _tmp172;
  const Scalar _tmp174 = _tmp11 * sqrt_info(5, 0);
  const Scalar _tmp175 = _tmp9 * sqrt_info(3, 0);
  const Scalar _tmp176 = _tmp10 * sqrt_info(4, 0);
  const Scalar _tmp177 = _tmp7 * sqrt_info(1, 0);
  const Scalar _tmp178 = _tmp6 * sqrt_info(0, 0);
  const Scalar _tmp179 = _tmp8 * sqrt_info(2, 0);
  const Scalar _tmp180 = _tmp11 * sqrt_info(5, 1);
  const Scalar _tmp181 = _tmp9 * sqrt_info(3, 1);
  const Scalar _tmp182 = _tmp10 * sqrt_info(4, 1);
  const Scalar _tmp183 = _tmp7 * sqrt_info(1, 1);
  const Scalar _tmp184 = _tmp6 * sqrt_info(0, 1);
  const Scalar _tmp185 = _tmp8 * sqrt_info(2, 1);
  const Scalar _tmp186 = _tmp11 * sqrt_info(5, 2);
  const Scalar _tmp187 = _tmp9 * sqrt_info(3, 2);
  const Scalar _tmp188 = _tmp10 * sqrt_info(4, 2);
  const Scalar _tmp189 = _tmp7 * sqrt_info(1, 2);
  const Scalar _tmp190 = _tmp6 * sqrt_info(0, 2);
  const Scalar _tmp191 = _tmp8 * sqrt_info(2, 2);
  const Scalar _tmp192 = _tmp11 * sqrt_info(5, 3);
  const Scalar _tmp193 = _tmp9 * sqrt_info(3, 3);
  const Scalar _tmp194 = _tmp10 * sqrt_info(4, 3);
  const Scalar _tmp195 = _tmp7 * sqrt_info(1, 3);
  const Scalar _tmp196 = _tmp6 * sqrt_info(0, 3);
  const Scalar _tmp197 = _tmp8 * sqrt_info(2, 3);
  const Scalar _tmp198 = _tmp11 * sqrt_info(5, 4);
  const Scalar _tmp199 = _tmp9 * sqrt_info(3, 4);
  const Scalar _tmp200 = _tmp10 * sqrt_info(4, 4);
  const Scalar _tmp201 = _tmp7 * sqrt_info(1, 4);
  const Scalar _tmp202 = _tmp6 * sqrt_info(0, 4);
  const Scalar _tmp203 = _tmp8 * sqrt_info(2, 4);
  const Scalar _tmp204 = _tmp11 * sqrt_info(5, 5);
  const Scalar _tmp205 = _tmp9 * sqrt_info(3, 5);
  const Scalar _tmp206 = _tmp10 * sqrt_info(4, 5);
  const Scalar _tmp207 = _tmp7 * sqrt_info(1, 5);
  const Scalar _tmp208 = _tmp6 * sqrt_info(0, 5);
  const Scalar _tmp209 = _tmp8 * sqrt_info(2, 5);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp6;
    _res(1, 0) = _tmp7;
    _res(2, 0) = _tmp8;
    _res(3, 0) = _tmp9;
    _res(4, 0) = _tmp10;
    _res(5, 0) = _tmp11;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -sqrt_info(0, 0);
    _jacobian(1, 0) = -sqrt_info(1, 0);
    _jacobian(2, 0) = -sqrt_info(2, 0);
    _jacobian(3, 0) = -sqrt_info(3, 0);
    _jacobian(4, 0) = -sqrt_info(4, 0);
    _jacobian(5, 0) = -sqrt_info(5, 0);
    _jacobian(0, 1) = -sqrt_info(0, 1);
    _jacobian(1, 1) = -sqrt_info(1, 1);
    _jacobian(2, 1) = -sqrt_info(2, 1);
    _jacobian(3, 1) = -sqrt_info(3, 1);
    _jacobian(4, 1) = -sqrt_info(4, 1);
    _jacobian(5, 1) = -sqrt_info(5, 1);
    _jacobian(0, 2) = -sqrt_info(0, 2);
    _jacobian(1, 2) = -sqrt_info(1, 2);
    _jacobian(2, 2) = -sqrt_info(2, 2);
    _jacobian(3, 2) = -sqrt_info(3, 2);
    _jacobian(4, 2) = -sqrt_info(4, 2);
    _jacobian(5, 2) = -sqrt_info(5, 2);
    _jacobian(0, 3) = -sqrt_info(0, 3);
    _jacobian(1, 3) = -sqrt_info(1, 3);
    _jacobian(2, 3) = -sqrt_info(2, 3);
    _jacobian(3, 3) = -sqrt_info(3, 3);
    _jacobian(4, 3) = -sqrt_info(4, 3);
    _jacobian(5, 3) = -sqrt_info(5, 3);
    _jacobian(0, 4) = -sqrt_info(0, 4);
    _jacobian(1, 4) = -sqrt_info(1, 4);
    _jacobian(2, 4) = -sqrt_info(2, 4);
    _jacobian(3, 4) = -sqrt_info(3, 4);
    _jacobian(4, 4) = -sqrt_info(4, 4);
    _jacobian(5, 4) = -sqrt_info(5, 4);
    _jacobian(0, 5) = -sqrt_info(0, 5);
    _jacobian(1, 5) = -sqrt_info(1, 5);
    _jacobian(2, 5) = -sqrt_info(2, 5);
    _jacobian(3, 5) = -sqrt_info(3, 5);
    _jacobian(4, 5) = -sqrt_info(4, 5);
    _jacobian(5, 5) = -sqrt_info(5, 5);
    _jacobian(0, 6) = sqrt_info(0, 0);
    _jacobian(1, 6) = sqrt_info(1, 0);
    _jacobian(2, 6) = sqrt_info(2, 0);
    _jacobian(3, 6) = sqrt_info(3, 0);
    _jacobian(4, 6) = sqrt_info(4, 0);
    _jacobian(5, 6) = sqrt_info(5, 0);
    _jacobian(0, 7) = sqrt_info(0, 1);
    _jacobian(1, 7) = sqrt_info(1, 1);
    _jacobian(2, 7) = sqrt_info(2, 1);
    _jacobian(3, 7) = sqrt_info(3, 1);
    _jacobian(4, 7) = sqrt_info(4, 1);
    _jacobian(5, 7) = sqrt_info(5, 1);
    _jacobian(0, 8) = sqrt_info(0, 2);
    _jacobian(1, 8) = sqrt_info(1, 2);
    _jacobian(2, 8) = sqrt_info(2, 2);
    _jacobian(3, 8) = sqrt_info(3, 2);
    _jacobian(4, 8) = sqrt_info(4, 2);
    _jacobian(5, 8) = sqrt_info(5, 2);
    _jacobian(0, 9) = sqrt_info(0, 3);
    _jacobian(1, 9) = sqrt_info(1, 3);
    _jacobian(2, 9) = sqrt_info(2, 3);
    _jacobian(3, 9) = sqrt_info(3, 3);
    _jacobian(4, 9) = sqrt_info(4, 3);
    _jacobian(5, 9) = sqrt_info(5, 3);
    _jacobian(0, 10) = sqrt_info(0, 4);
    _jacobian(1, 10) = sqrt_info(1, 4);
    _jacobian(2, 10) = sqrt_info(2, 4);
    _jacobian(3, 10) = sqrt_info(3, 4);
    _jacobian(4, 10) = sqrt_info(4, 4);
    _jacobian(5, 10) = sqrt_info(5, 4);
    _jacobian(0, 11) = sqrt_info(0, 5);
    _jacobian(1, 11) = sqrt_info(1, 5);
    _jacobian(2, 11) = sqrt_info(2, 5);
    _jacobian(3, 11) = sqrt_info(3, 5);
    _jacobian(4, 11) = sqrt_info(4, 5);
    _jacobian(5, 11) = sqrt_info(5, 5);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) = _tmp18;
    _hessian(1, 0) = _tmp25;
    _hessian(2, 0) = _tmp32;
    _hessian(3, 0) = _tmp39;
    _hessian(4, 0) = _tmp46;
    _hessian(5, 0) = _tmp53;
    _hessian(6, 0) = -_tmp12 - _tmp13 - _tmp14 - _tmp15 - _tmp16 - _tmp17;
    _hessian(7, 0) = _tmp54;
    _hessian(8, 0) = _tmp55;
    _hessian(9, 0) = _tmp56;
    _hessian(10, 0) = _tmp57;
    _hessian(11, 0) = _tmp58;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = _tmp65;
    _hessian(2, 1) = _tmp72;
    _hessian(3, 1) = _tmp79;
    _hessian(4, 1) = _tmp86;
    _hessian(5, 1) = _tmp93;
    _hessian(6, 1) = _tmp54;
    _hessian(7, 1) = -_tmp59 - _tmp60 - _tmp61 - _tmp62 - _tmp63 - _tmp64;
    _hessian(8, 1) = _tmp94;
    _hessian(9, 1) = _tmp95;
    _hessian(10, 1) = _tmp96;
    _hessian(11, 1) = _tmp97;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = _tmp104;
    _hessian(3, 2) = _tmp111;
    _hessian(4, 2) = _tmp118;
    _hessian(5, 2) = _tmp125;
    _hessian(6, 2) = _tmp55;
    _hessian(7, 2) = _tmp94;
    _hessian(8, 2) = -_tmp100 - _tmp101 - _tmp102 - _tmp103 - _tmp98 - _tmp99;
    _hessian(9, 2) = _tmp126;
    _hessian(10, 2) = _tmp127;
    _hessian(11, 2) = _tmp128;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = _tmp135;
    _hessian(4, 3) = _tmp142;
    _hessian(5, 3) = _tmp149;
    _hessian(6, 3) = _tmp56;
    _hessian(7, 3) = _tmp95;
    _hessian(8, 3) = _tmp126;
    _hessian(9, 3) = -_tmp129 - _tmp130 - _tmp131 - _tmp132 - _tmp133 - _tmp134;
    _hessian(10, 3) = _tmp150;
    _hessian(11, 3) = _tmp151;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = _tmp158;
    _hessian(5, 4) = _tmp165;
    _hessian(6, 4) = _tmp57;
    _hessian(7, 4) = _tmp96;
    _hessian(8, 4) = _tmp127;
    _hessian(9, 4) = _tmp150;
    _hessian(10, 4) = -_tmp152 - _tmp153 - _tmp154 - _tmp155 - _tmp156 - _tmp157;
    _hessian(11, 4) = _tmp166;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = _tmp173;
    _hessian(6, 5) = _tmp58;
    _hessian(7, 5) = _tmp97;
    _hessian(8, 5) = _tmp128;
    _hessian(9, 5) = _tmp151;
    _hessian(10, 5) = _tmp166;
    _hessian(11, 5) = -_tmp167 - _tmp168 - _tmp169 - _tmp170 - _tmp171 - _tmp172;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = _tmp18;
    _hessian(7, 6) = _tmp25;
    _hessian(8, 6) = _tmp32;
    _hessian(9, 6) = _tmp39;
    _hessian(10, 6) = _tmp46;
    _hessian(11, 6) = _tmp53;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = _tmp65;
    _hessian(8, 7) = _tmp72;
    _hessian(9, 7) = _tmp79;
    _hessian(10, 7) = _tmp86;
    _hessian(11, 7) = _tmp93;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = _tmp104;
    _hessian(9, 8) = _tmp111;
    _hessian(10, 8) = _tmp118;
    _hessian(11, 8) = _tmp125;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = _tmp135;
    _hessian(10, 9) = _tmp142;
    _hessian(11, 9) = _tmp149;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = _tmp158;
    _hessian(11, 10) = _tmp165;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = _tmp173;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp174 - _tmp175 - _tmp176 - _tmp177 - _tmp178 - _tmp179;
    _rhs(1, 0) = -_tmp180 - _tmp181 - _tmp182 - _tmp183 - _tmp184 - _tmp185;
    _rhs(2, 0) = -_tmp186 - _tmp187 - _tmp188 - _tmp189 - _tmp190 - _tmp191;
    _rhs(3, 0) = -_tmp192 - _tmp193 - _tmp194 - _tmp195 - _tmp196 - _tmp197;
    _rhs(4, 0) = -_tmp198 - _tmp199 - _tmp200 - _tmp201 - _tmp202 - _tmp203;
    _rhs(5, 0) = -_tmp204 - _tmp205 - _tmp206 - _tmp207 - _tmp208 - _tmp209;
    _rhs(6, 0) = _tmp174 + _tmp175 + _tmp176 + _tmp177 + _tmp178 + _tmp179;
    _rhs(7, 0) = _tmp180 + _tmp181 + _tmp182 + _tmp183 + _tmp184 + _tmp185;
    _rhs(8, 0) = _tmp186 + _tmp187 + _tmp188 + _tmp189 + _tmp190 + _tmp191;
    _rhs(9, 0) = _tmp192 + _tmp193 + _tmp194 + _tmp195 + _tmp196 + _tmp197;
    _rhs(10, 0) = _tmp198 + _tmp199 + _tmp200 + _tmp201 + _tmp202 + _tmp203;
    _rhs(11, 0) = _tmp204 + _tmp205 + _tmp206 + _tmp207 + _tmp208 + _tmp209;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
