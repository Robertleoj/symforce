// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark ray into the target spherical camera and
 * comparing it against the correspondence.
 *
 * The landmark is specified as a camera point in the source camera with an inverse range; this
 * means the landmark is fixed in the source camera and always has residual 0 there (this 0 residual
 * is not returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target spherical camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     p_camera_source: The location of the landmark in the source camera coordinate, will be
 * normalized target_pixel: The location of the correspondence in the target camera weight: The
 * weight of the factor gnc_mu: The mu convexity parameter for the Barron noise model gnc_scale: The
 * scale parameter for the Barron noise model epsilon: Small positive value
 *     target_camera_model_class: The subclass of CameraCal to use as the target camera model
 *
 * Outputs:
 *     res: 2dof whiten residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkPolynomialReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 8, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 3, 1>& p_camera_source,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1166

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (317)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp2 = _tmp1 + Scalar(-1) / Scalar(2);
  const Scalar _tmp3 = _tmp0 + _tmp2;
  const Scalar _tmp4 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp5 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp6 = _tmp4 + _tmp5;
  const Scalar _tmp7 = std::pow(Scalar(epsilon + std::pow(p_camera_source(0, 0), Scalar(2)) +
                                       std::pow(p_camera_source(1, 0), Scalar(2)) +
                                       std::pow(p_camera_source(2, 0), Scalar(2))),
                                Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp8 = _tmp7 * p_camera_source(0, 0);
  const Scalar _tmp9 = 2 * _tmp8;
  const Scalar _tmp10 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp11 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp12 = _tmp10 - _tmp11;
  const Scalar _tmp13 = _tmp7 * p_camera_source(1, 0);
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _tmp7 * p_camera_source(2, 0);
  const Scalar _tmp16 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp17 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp18 = _tmp16 + _tmp17;
  const Scalar _tmp19 = 2 * _tmp18;
  const Scalar _tmp20 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp21 = _tmp12 * _tmp14 + _tmp15 * _tmp19 - _tmp20 * source_inverse_range -
                        _tmp9 * (_tmp6 + Scalar(-1) / Scalar(2));
  const Scalar _tmp22 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp23 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp24 = _tmp22 - _tmp23;
  const Scalar _tmp25 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp26 = _tmp25 + Scalar(-1) / Scalar(2);
  const Scalar _tmp27 = 2 * _tmp15;
  const Scalar _tmp28 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp29 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp30 = _tmp28 + _tmp29;
  const Scalar _tmp31 = _tmp16 - _tmp17;
  const Scalar _tmp32 = 2 * _tmp31;
  const Scalar _tmp33 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp34 =
      _tmp14 * _tmp30 - _tmp27 * (_tmp26 + _tmp4) + _tmp32 * _tmp8 - _tmp33 * source_inverse_range;
  const Scalar _tmp35 = _tmp24 * _tmp34;
  const Scalar _tmp36 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp37 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _tmp10 + _tmp11;
  const Scalar _tmp40 = _tmp28 - _tmp29;
  const Scalar _tmp41 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp42 =
      -_tmp14 * (_tmp26 + _tmp5) - _tmp27 * _tmp40 + _tmp39 * _tmp9 - _tmp41 * source_inverse_range;
  const Scalar _tmp43 = _tmp38 * _tmp42;
  const Scalar _tmp44 = _tmp21 * _tmp3 - _tmp35 - _tmp43;
  const Scalar _tmp45 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp46 = _tmp0 + _tmp45;
  const Scalar _tmp47 = _tmp46 + Scalar(-1) / Scalar(2);
  const Scalar _tmp48 = _tmp22 + _tmp23;
  const Scalar _tmp49 = _tmp21 * _tmp48;
  const Scalar _tmp50 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp51 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp52 = _tmp50 - _tmp51;
  const Scalar _tmp53 = _tmp42 * _tmp52;
  const Scalar _tmp54 = _tmp49 + _tmp53;
  const Scalar _tmp55 = -_tmp34 * _tmp47 + _tmp54;
  const Scalar _tmp56 = 2 * _tmp55;
  const Scalar _tmp57 = std::max<Scalar>(_tmp56, epsilon);
  const Scalar _tmp58 = Scalar(1.0) / (_tmp57);
  const Scalar _tmp59 = _tmp58 * target_calibration_storage(0, 0);
  const Scalar _tmp60 = _tmp44 * _tmp59;
  const Scalar _tmp61 = _tmp2 + _tmp45;
  const Scalar _tmp62 = _tmp36 - _tmp37;
  const Scalar _tmp63 = _tmp50 + _tmp51;
  const Scalar _tmp64 = _tmp21 * _tmp62 - _tmp34 * _tmp63;
  const Scalar _tmp65 = _tmp42 * _tmp61 + _tmp64;
  const Scalar _tmp66 = std::pow(_tmp65, Scalar(2));
  const Scalar _tmp67 = std::pow(_tmp57, Scalar(-2));
  const Scalar _tmp68 = 4 * _tmp67;
  const Scalar _tmp69 = std::pow(_tmp44, Scalar(2));
  const Scalar _tmp70 = _tmp66 * _tmp68 + _tmp68 * _tmp69 + epsilon;
  const Scalar _tmp71 = std::pow(_tmp70, Scalar(2));
  const Scalar _tmp72 =
      [&]() {
        const Scalar base = _tmp70;
        return base * base * base;
      }() *
          target_calibration_storage(7, 0) +
      _tmp70 * target_calibration_storage(5, 0) + _tmp71 * target_calibration_storage(6, 0) +
      Scalar(1.0);
  const Scalar _tmp73 = Scalar(2.0) * _tmp72;
  const Scalar _tmp74 = -_tmp60 * _tmp73 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp75 = _tmp58 * target_calibration_storage(1, 0);
  const Scalar _tmp76 = _tmp65 * _tmp75;
  const Scalar _tmp77 = -_tmp73 * _tmp76 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp78 = std::pow(_tmp74, Scalar(2)) + std::pow(_tmp77, Scalar(2)) + epsilon;
  const Scalar _tmp79 = std::pow(_tmp78, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp80 = std::sqrt(weight);
  const Scalar _tmp81 = -epsilon;
  const Scalar _tmp82 = Scalar(1.0) / (_tmp81 + gnc_mu - 1);
  const Scalar _tmp83 = epsilon + std::fabs(_tmp82);
  const Scalar _tmp84 = _tmp82 + 2;
  const Scalar _tmp85 =
      _tmp84 + 2 * epsilon *
                   (std::min<Scalar>(0, (((_tmp84) > 0) - ((_tmp84) < 0))) + Scalar(1) / Scalar(2));
  const Scalar _tmp86 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp87 = _tmp78 * _tmp86 / _tmp83 + 1;
  const Scalar _tmp88 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(_tmp83 * (std::pow(_tmp87, Scalar((Scalar(1) / Scalar(2)) * _tmp85)) - 1) /
                       _tmp85));
  const Scalar _tmp89 = std::max<Scalar>(
      0, std::min<Scalar>((((_tmp55) > 0) - ((_tmp55) < 0)),
                          (((-std::sqrt(_tmp70) + target_calibration_storage(4, 0)) > 0) -
                           ((-std::sqrt(_tmp70) + target_calibration_storage(4, 0)) < 0))));
  const Scalar _tmp90 = _tmp80 * _tmp88 * _tmp89;
  const Scalar _tmp91 = _tmp79 * _tmp90;
  const Scalar _tmp92 = _tmp74 * _tmp91;
  const Scalar _tmp93 = _tmp77 * _tmp91;
  const Scalar _tmp94 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp95 = -_tmp94;
  const Scalar _tmp96 = -_tmp4 + _tmp5;
  const Scalar _tmp97 = _tmp25 + _tmp95 + _tmp96;
  const Scalar _tmp98 = -_tmp14 * _tmp40 + _tmp15 * _tmp97;
  const Scalar _tmp99 = -_tmp25;
  const Scalar _tmp100 = _tmp94 + _tmp96 + _tmp99;
  const Scalar _tmp101 = _tmp100 * _tmp13 - _tmp27 * _tmp30;
  const Scalar _tmp102 = 2 * _tmp12 * _tmp15 - 2 * _tmp13 * _tmp18;
  const Scalar _tmp103 = -_tmp101 * _tmp24 - _tmp102 * _tmp3 - _tmp38 * _tmp98;
  const Scalar _tmp104 = _tmp59 * _tmp72;
  const Scalar _tmp105 = -_tmp101 * _tmp47 - _tmp102 * _tmp48 + _tmp52 * _tmp98;
  const Scalar _tmp106 = (((_tmp56 + _tmp81) > 0) - ((_tmp56 + _tmp81) < 0)) + 1;
  const Scalar _tmp107 = _tmp106 / [&]() {
    const Scalar base = _tmp57;
    return base * base * base;
  }();
  const Scalar _tmp108 = _tmp107 * _tmp66;
  const Scalar _tmp109 = -_tmp101 * _tmp63 - _tmp102 * _tmp62 + _tmp61 * _tmp98;
  const Scalar _tmp110 = _tmp65 * _tmp67;
  const Scalar _tmp111 = _tmp44 * _tmp67;
  const Scalar _tmp112 = _tmp107 * _tmp69;
  const Scalar _tmp113 =
      -_tmp103 * _tmp111 + _tmp105 * _tmp108 + _tmp105 * _tmp112 - _tmp109 * _tmp110;
  const Scalar _tmp114 = 8 * target_calibration_storage(5, 0);
  const Scalar _tmp115 = 24 * _tmp71 * target_calibration_storage(7, 0);
  const Scalar _tmp116 = 16 * _tmp70 * target_calibration_storage(6, 0);
  const Scalar _tmp117 = -_tmp113 * _tmp114 - _tmp113 * _tmp115 - _tmp113 * _tmp116;
  const Scalar _tmp118 = _tmp106 * _tmp72;
  const Scalar _tmp119 = _tmp118 * target_calibration_storage(0, 0);
  const Scalar _tmp120 = _tmp111 * _tmp119;
  const Scalar _tmp121 = _tmp103 * _tmp104 - _tmp105 * _tmp120 + _tmp117 * _tmp60;
  const Scalar _tmp122 = _tmp72 * _tmp75;
  const Scalar _tmp123 = _tmp118 * target_calibration_storage(1, 0);
  const Scalar _tmp124 = _tmp110 * _tmp123;
  const Scalar _tmp125 = -_tmp105 * _tmp124 + _tmp109 * _tmp122 + _tmp117 * _tmp76;
  const Scalar _tmp126 = _tmp121 * _tmp74 + _tmp125 * _tmp77;
  const Scalar _tmp127 = _tmp79 * _tmp80 * _tmp86 *
                         std::pow(_tmp87, Scalar((Scalar(1) / Scalar(2)) * _tmp85 - 1)) * _tmp89 /
                         _tmp88;
  const Scalar _tmp128 = _tmp127 * _tmp74;
  const Scalar _tmp129 = _tmp90 / (_tmp78 * std::sqrt(_tmp78));
  const Scalar _tmp130 = _tmp129 * _tmp74;
  const Scalar _tmp131 = _tmp121 * _tmp91 + _tmp126 * _tmp128 - _tmp126 * _tmp130;
  const Scalar _tmp132 = Scalar(2.0) * _tmp131;
  const Scalar _tmp133 = _tmp127 * _tmp77;
  const Scalar _tmp134 = _tmp129 * _tmp77;
  const Scalar _tmp135 = _tmp125 * _tmp91 + _tmp126 * _tmp133 - _tmp126 * _tmp134;
  const Scalar _tmp136 = Scalar(2.0) * _tmp135;
  const Scalar _tmp137 = _tmp6 + _tmp95 + _tmp99;
  const Scalar _tmp138 = -_tmp137 * _tmp15 - _tmp19 * _tmp8;
  const Scalar _tmp139 = -_tmp100 * _tmp8 + _tmp15 * _tmp32;
  const Scalar _tmp140 = 2 * _tmp15 * _tmp39 + 2 * _tmp40 * _tmp8;
  const Scalar _tmp141 = _tmp138 * _tmp48 - _tmp139 * _tmp47 + _tmp140 * _tmp52;
  const Scalar _tmp142 = _tmp138 * _tmp3 - _tmp139 * _tmp24 - _tmp140 * _tmp38;
  const Scalar _tmp143 = _tmp138 * _tmp62 - _tmp139 * _tmp63 + _tmp140 * _tmp61;
  const Scalar _tmp144 =
      _tmp108 * _tmp141 - _tmp110 * _tmp143 - _tmp111 * _tmp142 + _tmp112 * _tmp141;
  const Scalar _tmp145 = -_tmp114 * _tmp144 - _tmp115 * _tmp144 - _tmp116 * _tmp144;
  const Scalar _tmp146 = -_tmp104 * _tmp142 + _tmp120 * _tmp141 - _tmp145 * _tmp60;
  const Scalar _tmp147 = -_tmp122 * _tmp143 + _tmp124 * _tmp141 - _tmp145 * _tmp76;
  const Scalar _tmp148 = _tmp146 * _tmp74 + _tmp147 * _tmp77;
  const Scalar _tmp149 = _tmp128 * _tmp148 - _tmp130 * _tmp148 + _tmp146 * _tmp91;
  const Scalar _tmp150 = Scalar(2.0) * _tmp149;
  const Scalar _tmp151 = _tmp133 * _tmp148 - _tmp134 * _tmp148 + _tmp147 * _tmp91;
  const Scalar _tmp152 = Scalar(2.0) * _tmp151;
  const Scalar _tmp153 = -2 * _tmp13 * _tmp31 + 2 * _tmp30 * _tmp8;
  const Scalar _tmp154 = _tmp12 * _tmp9 + _tmp13 * _tmp137;
  const Scalar _tmp155 = -_tmp14 * _tmp39 - _tmp8 * _tmp97;
  const Scalar _tmp156 = -_tmp153 * _tmp24 + _tmp154 * _tmp3 - _tmp155 * _tmp38;
  const Scalar _tmp157 = -_tmp153 * _tmp47 + _tmp154 * _tmp48 + _tmp155 * _tmp52;
  const Scalar _tmp158 = -_tmp153 * _tmp63 + _tmp154 * _tmp62 + _tmp155 * _tmp61;
  const Scalar _tmp159 =
      -_tmp108 * _tmp157 + _tmp110 * _tmp158 + _tmp111 * _tmp156 - _tmp112 * _tmp157;
  const Scalar _tmp160 = _tmp114 * _tmp159 + _tmp115 * _tmp159 + _tmp116 * _tmp159;
  const Scalar _tmp161 = _tmp104 * _tmp156 - _tmp120 * _tmp157 + _tmp160 * _tmp60;
  const Scalar _tmp162 = _tmp122 * _tmp158 - _tmp124 * _tmp157 + _tmp160 * _tmp76;
  const Scalar _tmp163 = _tmp161 * _tmp74 + _tmp162 * _tmp77;
  const Scalar _tmp164 = _tmp128 * _tmp163 - _tmp130 * _tmp163 + _tmp161 * _tmp91;
  const Scalar _tmp165 = Scalar(2.0) * _tmp164;
  const Scalar _tmp166 = _tmp133 * _tmp163 - _tmp134 * _tmp163 + _tmp162 * _tmp91;
  const Scalar _tmp167 = Scalar(2.0) * _tmp166;
  const Scalar _tmp168 = _tmp112 * source_inverse_range;
  const Scalar _tmp169 = _tmp110 * source_inverse_range;
  const Scalar _tmp170 = _tmp108 * source_inverse_range;
  const Scalar _tmp171 = _tmp111 * source_inverse_range;
  const Scalar _tmp172 = _tmp168 * _tmp48 - _tmp169 * _tmp62 + _tmp170 * _tmp48 - _tmp171 * _tmp3;
  const Scalar _tmp173 = _tmp115 * _tmp172;
  const Scalar _tmp174 = _tmp116 * _tmp172;
  const Scalar _tmp175 = _tmp114 * _tmp172;
  const Scalar _tmp176 = -_tmp173 - _tmp174 - _tmp175;
  const Scalar _tmp177 = _tmp104 * source_inverse_range;
  const Scalar _tmp178 = _tmp119 * _tmp171;
  const Scalar _tmp179 = _tmp177 * _tmp3 - _tmp178 * _tmp48;
  const Scalar _tmp180 = _tmp176 * _tmp60 + _tmp179;
  const Scalar _tmp181 = _tmp122 * source_inverse_range;
  const Scalar _tmp182 = _tmp123 * _tmp169;
  const Scalar _tmp183 = _tmp181 * _tmp62 - _tmp182 * _tmp48;
  const Scalar _tmp184 = _tmp176 * _tmp76 + _tmp183;
  const Scalar _tmp185 = _tmp180 * _tmp74 + _tmp184 * _tmp77;
  const Scalar _tmp186 = _tmp128 * _tmp185 - _tmp130 * _tmp185 + _tmp180 * _tmp91;
  const Scalar _tmp187 = Scalar(2.0) * _tmp186;
  const Scalar _tmp188 = -_tmp133 * _tmp185 + _tmp134 * _tmp185 - _tmp184 * _tmp91;
  const Scalar _tmp189 = Scalar(2.0) * _tmp188;
  const Scalar _tmp190 = _tmp168 * _tmp52 - _tmp169 * _tmp61 + _tmp170 * _tmp52 + _tmp171 * _tmp38;
  const Scalar _tmp191 = _tmp114 * _tmp190;
  const Scalar _tmp192 = _tmp115 * _tmp190;
  const Scalar _tmp193 = _tmp116 * _tmp190;
  const Scalar _tmp194 = -_tmp191 - _tmp192 - _tmp193;
  const Scalar _tmp195 = _tmp181 * _tmp61;
  const Scalar _tmp196 = _tmp182 * _tmp52;
  const Scalar _tmp197 = _tmp194 * _tmp76 + _tmp195 - _tmp196;
  const Scalar _tmp198 = _tmp177 * _tmp38 + _tmp178 * _tmp52;
  const Scalar _tmp199 = -_tmp194 * _tmp60 + _tmp198;
  const Scalar _tmp200 = _tmp197 * _tmp77 - _tmp199 * _tmp74;
  const Scalar _tmp201 = -_tmp128 * _tmp200 + _tmp130 * _tmp200 + _tmp199 * _tmp91;
  const Scalar _tmp202 = Scalar(2.0) * _tmp201;
  const Scalar _tmp203 = _tmp200 * _tmp77;
  const Scalar _tmp204 = _tmp127 * _tmp203 - _tmp129 * _tmp203 + _tmp197 * _tmp91;
  const Scalar _tmp205 = Scalar(2.0) * _tmp204;
  const Scalar _tmp206 = _tmp168 * _tmp47 - _tmp169 * _tmp63 + _tmp170 * _tmp47 - _tmp171 * _tmp24;
  const Scalar _tmp207 = _tmp115 * _tmp206;
  const Scalar _tmp208 = _tmp116 * _tmp206;
  const Scalar _tmp209 = _tmp114 * _tmp206;
  const Scalar _tmp210 = _tmp207 + _tmp208 + _tmp209;
  const Scalar _tmp211 = -_tmp181 * _tmp63 + _tmp182 * _tmp47;
  const Scalar _tmp212 = _tmp210 * _tmp76 + _tmp211;
  const Scalar _tmp213 = _tmp177 * _tmp24;
  const Scalar _tmp214 = _tmp178 * _tmp47;
  const Scalar _tmp215 = _tmp210 * _tmp60 - _tmp213 + _tmp214;
  const Scalar _tmp216 = _tmp212 * _tmp77 + _tmp215 * _tmp74;
  const Scalar _tmp217 = _tmp128 * _tmp216 - _tmp130 * _tmp216 + _tmp215 * _tmp91;
  const Scalar _tmp218 = Scalar(2.0) * _tmp217;
  const Scalar _tmp219 = -_tmp133 * _tmp216 + _tmp134 * _tmp216 - _tmp212 * _tmp91;
  const Scalar _tmp220 = Scalar(2.0) * _tmp219;
  const Scalar _tmp221 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp222 = -_tmp221;
  const Scalar _tmp223 = -_tmp0 + _tmp45;
  const Scalar _tmp224 = (Scalar(1) / Scalar(2)) * _tmp42 * (_tmp1 + _tmp222 + _tmp223) + _tmp64;
  const Scalar _tmp225 = -_tmp1;
  const Scalar _tmp226 = (Scalar(1) / Scalar(2)) * _tmp34 * (_tmp222 + _tmp225 + _tmp46);
  const Scalar _tmp227 = _tmp226 - _tmp49 - _tmp53;
  const Scalar _tmp228 = _tmp108 * _tmp224 - _tmp110 * _tmp227 + _tmp112 * _tmp224;
  const Scalar _tmp229 = -_tmp114 * _tmp228 - _tmp115 * _tmp228 - _tmp116 * _tmp228;
  const Scalar _tmp230 = _tmp122 * _tmp227 - _tmp124 * _tmp224 + _tmp229 * _tmp76;
  const Scalar _tmp231 = _tmp111 * _tmp224;
  const Scalar _tmp232 = _tmp119 * _tmp231 - _tmp229 * _tmp60;
  const Scalar _tmp233 = _tmp230 * _tmp77 - _tmp232 * _tmp74;
  const Scalar _tmp234 = _tmp128 * _tmp233 - _tmp130 * _tmp233 - _tmp232 * _tmp91;
  const Scalar _tmp235 = Scalar(2.0) * _tmp234;
  const Scalar _tmp236 = _tmp133 * _tmp233 - _tmp134 * _tmp233 + _tmp230 * _tmp91;
  const Scalar _tmp237 = Scalar(2.0) * _tmp236;
  const Scalar _tmp238 =
      (Scalar(1) / Scalar(2)) * _tmp21 * (_tmp221 + _tmp223 + _tmp225) + _tmp35 + _tmp43;
  const Scalar _tmp239 = -_tmp226 + _tmp54;
  const Scalar _tmp240 = _tmp108 * _tmp238 - _tmp111 * _tmp239 + _tmp112 * _tmp238;
  const Scalar _tmp241 = -_tmp114 * _tmp240 - _tmp115 * _tmp240 - _tmp116 * _tmp240;
  const Scalar _tmp242 = _tmp110 * _tmp238;
  const Scalar _tmp243 = -_tmp123 * _tmp242 + _tmp241 * _tmp76;
  const Scalar _tmp244 = _tmp104 * _tmp239 - _tmp120 * _tmp238 + _tmp241 * _tmp60;
  const Scalar _tmp245 = _tmp243 * _tmp77 + _tmp244 * _tmp74;
  const Scalar _tmp246 = -_tmp128 * _tmp245 + _tmp130 * _tmp245 - _tmp244 * _tmp91;
  const Scalar _tmp247 = Scalar(2.0) * _tmp246;
  const Scalar _tmp248 = _tmp133 * _tmp245 - _tmp134 * _tmp245 + _tmp243 * _tmp91;
  const Scalar _tmp249 = Scalar(2.0) * _tmp248;
  const Scalar _tmp250 = _tmp231 + _tmp242;
  const Scalar _tmp251 = _tmp114 * _tmp250 + _tmp115 * _tmp250 + _tmp116 * _tmp250;
  const Scalar _tmp252 = _tmp104 * _tmp224 + _tmp251 * _tmp60;
  const Scalar _tmp253 = _tmp122 * _tmp238 + _tmp251 * _tmp76;
  const Scalar _tmp254 = _tmp252 * _tmp74 + _tmp253 * _tmp77;
  const Scalar _tmp255 = _tmp128 * _tmp254 - _tmp130 * _tmp254 + _tmp252 * _tmp91;
  const Scalar _tmp256 = Scalar(2.0) * _tmp255;
  const Scalar _tmp257 = -_tmp133 * _tmp254 + _tmp134 * _tmp254 - _tmp253 * _tmp91;
  const Scalar _tmp258 = Scalar(2.0) * _tmp257;
  const Scalar _tmp259 = _tmp173 + _tmp174 + _tmp175;
  const Scalar _tmp260 = _tmp183 - _tmp259 * _tmp76;
  const Scalar _tmp261 = _tmp179 - _tmp259 * _tmp60;
  const Scalar _tmp262 = _tmp260 * _tmp77 + _tmp261 * _tmp74;
  const Scalar _tmp263 = -_tmp128 * _tmp262 + _tmp130 * _tmp262 - _tmp261 * _tmp91;
  const Scalar _tmp264 = Scalar(2.0) * _tmp263;
  const Scalar _tmp265 = _tmp133 * _tmp262 - _tmp134 * _tmp262 + _tmp260 * _tmp91;
  const Scalar _tmp266 = Scalar(2.0) * _tmp265;
  const Scalar _tmp267 = _tmp191 + _tmp192 + _tmp193;
  const Scalar _tmp268 = -_tmp195 + _tmp196 + _tmp267 * _tmp76;
  const Scalar _tmp269 = _tmp198 + _tmp267 * _tmp60;
  const Scalar _tmp270 = _tmp268 * _tmp77 + _tmp269 * _tmp74;
  const Scalar _tmp271 = _tmp128 * _tmp270 - _tmp130 * _tmp270 + _tmp269 * _tmp91;
  const Scalar _tmp272 = Scalar(2.0) * _tmp271;
  const Scalar _tmp273 = _tmp133 * _tmp270 - _tmp134 * _tmp270 + _tmp268 * _tmp91;
  const Scalar _tmp274 = Scalar(2.0) * _tmp273;
  const Scalar _tmp275 = -_tmp207 - _tmp208 - _tmp209;
  const Scalar _tmp276 = _tmp213 - _tmp214 + _tmp275 * _tmp60;
  const Scalar _tmp277 = _tmp211 - _tmp275 * _tmp76;
  const Scalar _tmp278 = -_tmp276 * _tmp74 + _tmp277 * _tmp77;
  const Scalar _tmp279 = -_tmp128 * _tmp278 + _tmp130 * _tmp278 + _tmp276 * _tmp91;
  const Scalar _tmp280 = Scalar(2.0) * _tmp279;
  const Scalar _tmp281 = -_tmp133 * _tmp278 + _tmp134 * _tmp278 - _tmp277 * _tmp91;
  const Scalar _tmp282 = Scalar(2.0) * _tmp281;
  const Scalar _tmp283 = _tmp20 * _tmp62 - _tmp33 * _tmp63 + _tmp41 * _tmp61;
  const Scalar _tmp284 = _tmp20 * _tmp48 - _tmp33 * _tmp47 + _tmp41 * _tmp52;
  const Scalar _tmp285 = -_tmp20 * _tmp3 + _tmp24 * _tmp33 + _tmp38 * _tmp41;
  const Scalar _tmp286 =
      -_tmp108 * _tmp284 + _tmp110 * _tmp283 - _tmp111 * _tmp285 - _tmp112 * _tmp284;
  const Scalar _tmp287 = -_tmp114 * _tmp286 - _tmp115 * _tmp286 - _tmp116 * _tmp286;
  const Scalar _tmp288 = _tmp104 * _tmp285 + _tmp120 * _tmp284 + _tmp287 * _tmp60;
  const Scalar _tmp289 = -_tmp122 * _tmp283 + _tmp124 * _tmp284 + _tmp287 * _tmp76;
  const Scalar _tmp290 = _tmp288 * _tmp74 + _tmp289 * _tmp77;
  const Scalar _tmp291 = -_tmp128 * _tmp290 + _tmp130 * _tmp290 - _tmp288 * _tmp91;
  const Scalar _tmp292 = Scalar(2.0) * _tmp291;
  const Scalar _tmp293 = _tmp133 * _tmp290 - _tmp134 * _tmp290 + _tmp289 * _tmp91;
  const Scalar _tmp294 = Scalar(2.0) * _tmp293;
  const Scalar _tmp295 = Scalar(4.0) * _tmp131;
  const Scalar _tmp296 = Scalar(4.0) * _tmp151;
  const Scalar _tmp297 = Scalar(4.0) * _tmp166;
  const Scalar _tmp298 = Scalar(4.0) * _tmp188;
  const Scalar _tmp299 = Scalar(4.0) * _tmp186;
  const Scalar _tmp300 = Scalar(4.0) * _tmp204;
  const Scalar _tmp301 = Scalar(4.0) * _tmp234;
  const Scalar _tmp302 = Scalar(4.0) * _tmp236;
  const Scalar _tmp303 = Scalar(4.0) * _tmp248;
  const Scalar _tmp304 = Scalar(4.0) * _tmp257;
  const Scalar _tmp305 = Scalar(4.0) * _tmp265;
  const Scalar _tmp306 = Scalar(4.0) * _tmp273;
  const Scalar _tmp307 = Scalar(4.0) * _tmp271;
  const Scalar _tmp308 = Scalar(4.0) * _tmp281;
  const Scalar _tmp309 = Scalar(4.0) * _tmp293;
  const Scalar _tmp310 = Scalar(4.0) * _tmp164;
  const Scalar _tmp311 = Scalar(4.0) * _tmp217;
  const Scalar _tmp312 = Scalar(4.0) * _tmp246;
  const Scalar _tmp313 = Scalar(4.0) * _tmp255;
  const Scalar _tmp314 = Scalar(4.0) * _tmp263;
  const Scalar _tmp315 = Scalar(4.0) * _tmp279;
  const Scalar _tmp316 = Scalar(4.0) * _tmp291;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp92;
    _res(1, 0) = _tmp93;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -_tmp132;
    _jacobian(1, 0) = -_tmp136;
    _jacobian(0, 1) = _tmp150;
    _jacobian(1, 1) = _tmp152;
    _jacobian(0, 2) = -_tmp165;
    _jacobian(1, 2) = -_tmp167;
    _jacobian(0, 3) = -_tmp187;
    _jacobian(1, 3) = _tmp189;
    _jacobian(0, 4) = _tmp202;
    _jacobian(1, 4) = -_tmp205;
    _jacobian(0, 5) = -_tmp218;
    _jacobian(1, 5) = _tmp220;
    _jacobian(0, 6) = -_tmp235;
    _jacobian(1, 6) = -_tmp237;
    _jacobian(0, 7) = _tmp247;
    _jacobian(1, 7) = -_tmp249;
    _jacobian(0, 8) = -_tmp256;
    _jacobian(1, 8) = _tmp258;
    _jacobian(0, 9) = -_tmp264;
    _jacobian(1, 9) = _tmp266;
    _jacobian(0, 10) = -_tmp272;
    _jacobian(1, 10) = -_tmp274;
    _jacobian(0, 11) = -_tmp280;
    _jacobian(1, 11) = -_tmp282;
    _jacobian(0, 12) = _tmp292;
    _jacobian(1, 12) = -_tmp294;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) =
        Scalar(4.0) * std::pow(_tmp131, Scalar(2)) + Scalar(4.0) * std::pow(_tmp135, Scalar(2));
    _hessian(1, 0) = -_tmp135 * _tmp296 - _tmp149 * _tmp295;
    _hessian(2, 0) = _tmp135 * _tmp297 + _tmp164 * _tmp295;
    _hessian(3, 0) = _tmp131 * _tmp299 - _tmp135 * _tmp298;
    _hessian(4, 0) = _tmp135 * _tmp300 - _tmp201 * _tmp295;
    _hessian(5, 0) = -Scalar(4.0) * _tmp135 * _tmp219 + _tmp217 * _tmp295;
    _hessian(6, 0) = _tmp131 * _tmp301 + _tmp135 * _tmp302;
    _hessian(7, 0) = _tmp135 * _tmp303 - _tmp246 * _tmp295;
    _hessian(8, 0) = -_tmp135 * _tmp304 + _tmp255 * _tmp295;
    _hessian(9, 0) = -_tmp135 * _tmp305 + _tmp263 * _tmp295;
    _hessian(10, 0) = _tmp131 * _tmp307 + _tmp135 * _tmp306;
    _hessian(11, 0) = _tmp135 * _tmp308 + _tmp279 * _tmp295;
    _hessian(12, 0) = _tmp135 * _tmp309 - _tmp291 * _tmp295;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        Scalar(4.0) * std::pow(_tmp149, Scalar(2)) + Scalar(4.0) * std::pow(_tmp151, Scalar(2));
    _hessian(2, 1) = -_tmp149 * _tmp310 - _tmp151 * _tmp297;
    _hessian(3, 1) = -_tmp149 * _tmp299 + _tmp151 * _tmp298;
    _hessian(4, 1) = Scalar(4.0) * _tmp149 * _tmp201 - _tmp151 * _tmp300;
    _hessian(5, 1) = -_tmp149 * _tmp311 + _tmp219 * _tmp296;
    _hessian(6, 1) = -_tmp149 * _tmp301 - _tmp151 * _tmp302;
    _hessian(7, 1) = _tmp149 * _tmp312 - _tmp151 * _tmp303;
    _hessian(8, 1) = -_tmp149 * _tmp313 + _tmp257 * _tmp296;
    _hessian(9, 1) = -_tmp149 * _tmp314 + _tmp151 * _tmp305;
    _hessian(10, 1) = -_tmp149 * _tmp307 - _tmp151 * _tmp306;
    _hessian(11, 1) = -_tmp149 * _tmp315 - _tmp151 * _tmp308;
    _hessian(12, 1) = _tmp149 * _tmp316 - _tmp151 * _tmp309;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        Scalar(4.0) * std::pow(_tmp164, Scalar(2)) + Scalar(4.0) * std::pow(_tmp166, Scalar(2));
    _hessian(3, 2) = _tmp164 * _tmp299 - _tmp166 * _tmp298;
    _hessian(4, 2) = -_tmp201 * _tmp310 + _tmp204 * _tmp297;
    _hessian(5, 2) = _tmp217 * _tmp310 - _tmp219 * _tmp297;
    _hessian(6, 2) = _tmp164 * _tmp301 + _tmp166 * _tmp302;
    _hessian(7, 2) = -_tmp164 * _tmp312 + _tmp248 * _tmp297;
    _hessian(8, 2) = _tmp255 * _tmp310 - _tmp257 * _tmp297;
    _hessian(9, 2) = _tmp263 * _tmp310 - _tmp265 * _tmp297;
    _hessian(10, 2) = _tmp164 * _tmp307 + _tmp273 * _tmp297;
    _hessian(11, 2) = _tmp166 * _tmp308 + _tmp279 * _tmp310;
    _hessian(12, 2) = -_tmp164 * _tmp316 + _tmp166 * _tmp309;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) =
        Scalar(4.0) * std::pow(_tmp186, Scalar(2)) + Scalar(4.0) * std::pow(_tmp188, Scalar(2));
    _hessian(4, 3) = -_tmp201 * _tmp299 - _tmp204 * _tmp298;
    _hessian(5, 3) = _tmp217 * _tmp299 + _tmp219 * _tmp298;
    _hessian(6, 3) = _tmp186 * _tmp301 - _tmp236 * _tmp298;
    _hessian(7, 3) = -_tmp246 * _tmp299 - _tmp248 * _tmp298;
    _hessian(8, 3) = _tmp255 * _tmp299 + _tmp257 * _tmp298;
    _hessian(9, 3) = _tmp263 * _tmp299 + _tmp265 * _tmp298;
    _hessian(10, 3) = _tmp271 * _tmp299 - _tmp273 * _tmp298;
    _hessian(11, 3) = _tmp279 * _tmp299 - _tmp281 * _tmp298;
    _hessian(12, 3) = -_tmp291 * _tmp299 - _tmp293 * _tmp298;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) =
        Scalar(4.0) * std::pow(_tmp201, Scalar(2)) + Scalar(4.0) * std::pow(_tmp204, Scalar(2));
    _hessian(5, 4) = -_tmp201 * _tmp311 - _tmp219 * _tmp300;
    _hessian(6, 4) = -_tmp201 * _tmp301 + _tmp204 * _tmp302;
    _hessian(7, 4) = _tmp201 * _tmp312 + _tmp204 * _tmp303;
    _hessian(8, 4) = -_tmp201 * _tmp313 - _tmp257 * _tmp300;
    _hessian(9, 4) = -_tmp201 * _tmp314 - _tmp204 * _tmp305;
    _hessian(10, 4) = -_tmp201 * _tmp307 + _tmp204 * _tmp306;
    _hessian(11, 4) = -_tmp201 * _tmp315 + _tmp204 * _tmp308;
    _hessian(12, 4) = _tmp201 * _tmp316 + _tmp204 * _tmp309;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) =
        Scalar(4.0) * std::pow(_tmp217, Scalar(2)) + Scalar(4.0) * std::pow(_tmp219, Scalar(2));
    _hessian(6, 5) = _tmp217 * _tmp301 - _tmp219 * _tmp302;
    _hessian(7, 5) = -_tmp217 * _tmp312 - _tmp219 * _tmp303;
    _hessian(8, 5) = _tmp219 * _tmp304 + _tmp255 * _tmp311;
    _hessian(9, 5) = _tmp219 * _tmp305 + _tmp263 * _tmp311;
    _hessian(10, 5) = _tmp217 * _tmp307 - _tmp219 * _tmp306;
    _hessian(11, 5) = -_tmp219 * _tmp308 + _tmp279 * _tmp311;
    _hessian(12, 5) = -_tmp217 * _tmp316 - _tmp219 * _tmp309;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) =
        Scalar(4.0) * std::pow(_tmp234, Scalar(2)) + Scalar(4.0) * std::pow(_tmp236, Scalar(2));
    _hessian(7, 6) = -_tmp246 * _tmp301 + _tmp248 * _tmp302;
    _hessian(8, 6) = _tmp255 * _tmp301 - _tmp257 * _tmp302;
    _hessian(9, 6) = _tmp263 * _tmp301 - _tmp265 * _tmp302;
    _hessian(10, 6) = _tmp271 * _tmp301 + _tmp273 * _tmp302;
    _hessian(11, 6) = _tmp236 * _tmp308 + _tmp279 * _tmp301;
    _hessian(12, 6) = -_tmp291 * _tmp301 + _tmp293 * _tmp302;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) =
        Scalar(4.0) * std::pow(_tmp246, Scalar(2)) + Scalar(4.0) * std::pow(_tmp248, Scalar(2));
    _hessian(8, 7) = -_tmp255 * _tmp312 - _tmp257 * _tmp303;
    _hessian(9, 7) = -_tmp263 * _tmp312 - _tmp265 * _tmp303;
    _hessian(10, 7) = -_tmp246 * _tmp307 + _tmp273 * _tmp303;
    _hessian(11, 7) = _tmp248 * _tmp308 - _tmp279 * _tmp312;
    _hessian(12, 7) = _tmp248 * _tmp309 + _tmp291 * _tmp312;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) =
        Scalar(4.0) * std::pow(_tmp255, Scalar(2)) + Scalar(4.0) * std::pow(_tmp257, Scalar(2));
    _hessian(9, 8) = _tmp257 * _tmp305 + _tmp263 * _tmp313;
    _hessian(10, 8) = _tmp255 * _tmp307 - _tmp257 * _tmp306;
    _hessian(11, 8) = -_tmp257 * _tmp308 + _tmp279 * _tmp313;
    _hessian(12, 8) = -_tmp255 * _tmp316 - _tmp257 * _tmp309;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) =
        Scalar(4.0) * std::pow(_tmp263, Scalar(2)) + Scalar(4.0) * std::pow(_tmp265, Scalar(2));
    _hessian(10, 9) = _tmp263 * _tmp307 - _tmp265 * _tmp306;
    _hessian(11, 9) = _tmp263 * _tmp315 - _tmp265 * _tmp308;
    _hessian(12, 9) = -_tmp263 * _tmp316 - _tmp265 * _tmp309;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) =
        Scalar(4.0) * std::pow(_tmp271, Scalar(2)) + Scalar(4.0) * std::pow(_tmp273, Scalar(2));
    _hessian(11, 10) = _tmp273 * _tmp308 + _tmp279 * _tmp307;
    _hessian(12, 10) = _tmp273 * _tmp309 - _tmp291 * _tmp307;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) =
        Scalar(4.0) * std::pow(_tmp279, Scalar(2)) + Scalar(4.0) * std::pow(_tmp281, Scalar(2));
    _hessian(12, 11) = -_tmp279 * _tmp316 + _tmp293 * _tmp308;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) =
        Scalar(4.0) * std::pow(_tmp291, Scalar(2)) + Scalar(4.0) * std::pow(_tmp293, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp132 * _tmp92 - _tmp136 * _tmp93;
    _rhs(1, 0) = _tmp150 * _tmp92 + _tmp152 * _tmp93;
    _rhs(2, 0) = -_tmp165 * _tmp92 - _tmp167 * _tmp93;
    _rhs(3, 0) = -_tmp187 * _tmp92 + _tmp189 * _tmp93;
    _rhs(4, 0) = _tmp202 * _tmp92 - _tmp205 * _tmp93;
    _rhs(5, 0) = -_tmp218 * _tmp92 + _tmp220 * _tmp93;
    _rhs(6, 0) = -_tmp235 * _tmp92 - _tmp237 * _tmp93;
    _rhs(7, 0) = _tmp247 * _tmp92 - _tmp249 * _tmp93;
    _rhs(8, 0) = -_tmp256 * _tmp92 + _tmp258 * _tmp93;
    _rhs(9, 0) = -_tmp264 * _tmp92 + _tmp266 * _tmp93;
    _rhs(10, 0) = -_tmp272 * _tmp92 - _tmp274 * _tmp93;
    _rhs(11, 0) = -_tmp280 * _tmp92 - _tmp282 * _tmp93;
    _rhs(12, 0) = _tmp292 * _tmp92 - _tmp294 * _tmp93;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
