// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/spherical_camera_cal.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (11x11) jacobian of res wrt arg value (11)
 *     hessian: (11x11) Gauss-Newton hessian for arg value (11)
 *     rhs: (11x1) Gauss-Newton rhs for arg value (11)
 */
template <typename Scalar>
void PriorFactorSphericalCameraCal(const sym::SphericalCameraCal<Scalar>& value,
                                   const sym::SphericalCameraCal<Scalar>& prior,
                                   const Eigen::Matrix<Scalar, 11, 11>& sqrt_info,
                                   const Scalar epsilon,
                                   Eigen::Matrix<Scalar, 11, 1>* const res = nullptr,
                                   Eigen::Matrix<Scalar, 11, 11>* const jacobian = nullptr,
                                   Eigen::Matrix<Scalar, 11, 11>* const hessian = nullptr,
                                   Eigen::Matrix<Scalar, 11, 1>* const rhs = nullptr) {
  // Total ops: 1859

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 11, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 11, 1>& _prior = prior.Data();

  // Intermediate terms (22)
  const Scalar _tmp0 = -_prior[4] + _value[4];
  const Scalar _tmp1 = -_prior[3] + _value[3];
  const Scalar _tmp2 = -_prior[2] + _value[2];
  const Scalar _tmp3 = -_prior[0] + _value[0];
  const Scalar _tmp4 = -_prior[1] + _value[1];
  const Scalar _tmp5 = -_prior[5] + _value[5];
  const Scalar _tmp6 = -_prior[6] + _value[6];
  const Scalar _tmp7 = -_prior[7] + _value[7];
  const Scalar _tmp8 = -_prior[9] + _value[9];
  const Scalar _tmp9 = -_prior[8] + _value[8];
  const Scalar _tmp10 = -_prior[10] + _value[10];
  const Scalar _tmp11 = _tmp0 * sqrt_info(0, 4) + _tmp1 * sqrt_info(0, 3) +
                        _tmp10 * sqrt_info(0, 10) + _tmp2 * sqrt_info(0, 2) +
                        _tmp3 * sqrt_info(0, 0) + _tmp4 * sqrt_info(0, 1) +
                        _tmp5 * sqrt_info(0, 5) + _tmp6 * sqrt_info(0, 6) +
                        _tmp7 * sqrt_info(0, 7) + _tmp8 * sqrt_info(0, 9) + _tmp9 * sqrt_info(0, 8);
  const Scalar _tmp12 = _tmp0 * sqrt_info(1, 4) + _tmp1 * sqrt_info(1, 3) +
                        _tmp10 * sqrt_info(1, 10) + _tmp2 * sqrt_info(1, 2) +
                        _tmp3 * sqrt_info(1, 0) + _tmp4 * sqrt_info(1, 1) +
                        _tmp5 * sqrt_info(1, 5) + _tmp6 * sqrt_info(1, 6) +
                        _tmp7 * sqrt_info(1, 7) + _tmp8 * sqrt_info(1, 9) + _tmp9 * sqrt_info(1, 8);
  const Scalar _tmp13 = _tmp0 * sqrt_info(2, 4) + _tmp1 * sqrt_info(2, 3) +
                        _tmp10 * sqrt_info(2, 10) + _tmp2 * sqrt_info(2, 2) +
                        _tmp3 * sqrt_info(2, 0) + _tmp4 * sqrt_info(2, 1) +
                        _tmp5 * sqrt_info(2, 5) + _tmp6 * sqrt_info(2, 6) +
                        _tmp7 * sqrt_info(2, 7) + _tmp8 * sqrt_info(2, 9) + _tmp9 * sqrt_info(2, 8);
  const Scalar _tmp14 = _tmp0 * sqrt_info(3, 4) + _tmp1 * sqrt_info(3, 3) +
                        _tmp10 * sqrt_info(3, 10) + _tmp2 * sqrt_info(3, 2) +
                        _tmp3 * sqrt_info(3, 0) + _tmp4 * sqrt_info(3, 1) +
                        _tmp5 * sqrt_info(3, 5) + _tmp6 * sqrt_info(3, 6) +
                        _tmp7 * sqrt_info(3, 7) + _tmp8 * sqrt_info(3, 9) + _tmp9 * sqrt_info(3, 8);
  const Scalar _tmp15 = _tmp0 * sqrt_info(4, 4) + _tmp1 * sqrt_info(4, 3) +
                        _tmp10 * sqrt_info(4, 10) + _tmp2 * sqrt_info(4, 2) +
                        _tmp3 * sqrt_info(4, 0) + _tmp4 * sqrt_info(4, 1) +
                        _tmp5 * sqrt_info(4, 5) + _tmp6 * sqrt_info(4, 6) +
                        _tmp7 * sqrt_info(4, 7) + _tmp8 * sqrt_info(4, 9) + _tmp9 * sqrt_info(4, 8);
  const Scalar _tmp16 = _tmp0 * sqrt_info(5, 4) + _tmp1 * sqrt_info(5, 3) +
                        _tmp10 * sqrt_info(5, 10) + _tmp2 * sqrt_info(5, 2) +
                        _tmp3 * sqrt_info(5, 0) + _tmp4 * sqrt_info(5, 1) +
                        _tmp5 * sqrt_info(5, 5) + _tmp6 * sqrt_info(5, 6) +
                        _tmp7 * sqrt_info(5, 7) + _tmp8 * sqrt_info(5, 9) + _tmp9 * sqrt_info(5, 8);
  const Scalar _tmp17 = _tmp0 * sqrt_info(6, 4) + _tmp1 * sqrt_info(6, 3) +
                        _tmp10 * sqrt_info(6, 10) + _tmp2 * sqrt_info(6, 2) +
                        _tmp3 * sqrt_info(6, 0) + _tmp4 * sqrt_info(6, 1) +
                        _tmp5 * sqrt_info(6, 5) + _tmp6 * sqrt_info(6, 6) +
                        _tmp7 * sqrt_info(6, 7) + _tmp8 * sqrt_info(6, 9) + _tmp9 * sqrt_info(6, 8);
  const Scalar _tmp18 = _tmp0 * sqrt_info(7, 4) + _tmp1 * sqrt_info(7, 3) +
                        _tmp10 * sqrt_info(7, 10) + _tmp2 * sqrt_info(7, 2) +
                        _tmp3 * sqrt_info(7, 0) + _tmp4 * sqrt_info(7, 1) +
                        _tmp5 * sqrt_info(7, 5) + _tmp6 * sqrt_info(7, 6) +
                        _tmp7 * sqrt_info(7, 7) + _tmp8 * sqrt_info(7, 9) + _tmp9 * sqrt_info(7, 8);
  const Scalar _tmp19 = _tmp0 * sqrt_info(8, 4) + _tmp1 * sqrt_info(8, 3) +
                        _tmp10 * sqrt_info(8, 10) + _tmp2 * sqrt_info(8, 2) +
                        _tmp3 * sqrt_info(8, 0) + _tmp4 * sqrt_info(8, 1) +
                        _tmp5 * sqrt_info(8, 5) + _tmp6 * sqrt_info(8, 6) +
                        _tmp7 * sqrt_info(8, 7) + _tmp8 * sqrt_info(8, 9) + _tmp9 * sqrt_info(8, 8);
  const Scalar _tmp20 = _tmp0 * sqrt_info(9, 4) + _tmp1 * sqrt_info(9, 3) +
                        _tmp10 * sqrt_info(9, 10) + _tmp2 * sqrt_info(9, 2) +
                        _tmp3 * sqrt_info(9, 0) + _tmp4 * sqrt_info(9, 1) +
                        _tmp5 * sqrt_info(9, 5) + _tmp6 * sqrt_info(9, 6) +
                        _tmp7 * sqrt_info(9, 7) + _tmp8 * sqrt_info(9, 9) + _tmp9 * sqrt_info(9, 8);
  const Scalar _tmp21 =
      _tmp0 * sqrt_info(10, 4) + _tmp1 * sqrt_info(10, 3) + _tmp10 * sqrt_info(10, 10) +
      _tmp2 * sqrt_info(10, 2) + _tmp3 * sqrt_info(10, 0) + _tmp4 * sqrt_info(10, 1) +
      _tmp5 * sqrt_info(10, 5) + _tmp6 * sqrt_info(10, 6) + _tmp7 * sqrt_info(10, 7) +
      _tmp8 * sqrt_info(10, 9) + _tmp9 * sqrt_info(10, 8);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 11, 1>& _res = (*res);

    _res(0, 0) = _tmp11;
    _res(1, 0) = _tmp12;
    _res(2, 0) = _tmp13;
    _res(3, 0) = _tmp14;
    _res(4, 0) = _tmp15;
    _res(5, 0) = _tmp16;
    _res(6, 0) = _tmp17;
    _res(7, 0) = _tmp18;
    _res(8, 0) = _tmp19;
    _res(9, 0) = _tmp20;
    _res(10, 0) = _tmp21;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 11, 11>& _jacobian = (*jacobian);

    _jacobian(0, 0) = sqrt_info(0, 0);
    _jacobian(1, 0) = sqrt_info(1, 0);
    _jacobian(2, 0) = sqrt_info(2, 0);
    _jacobian(3, 0) = sqrt_info(3, 0);
    _jacobian(4, 0) = sqrt_info(4, 0);
    _jacobian(5, 0) = sqrt_info(5, 0);
    _jacobian(6, 0) = sqrt_info(6, 0);
    _jacobian(7, 0) = sqrt_info(7, 0);
    _jacobian(8, 0) = sqrt_info(8, 0);
    _jacobian(9, 0) = sqrt_info(9, 0);
    _jacobian(10, 0) = sqrt_info(10, 0);
    _jacobian(0, 1) = sqrt_info(0, 1);
    _jacobian(1, 1) = sqrt_info(1, 1);
    _jacobian(2, 1) = sqrt_info(2, 1);
    _jacobian(3, 1) = sqrt_info(3, 1);
    _jacobian(4, 1) = sqrt_info(4, 1);
    _jacobian(5, 1) = sqrt_info(5, 1);
    _jacobian(6, 1) = sqrt_info(6, 1);
    _jacobian(7, 1) = sqrt_info(7, 1);
    _jacobian(8, 1) = sqrt_info(8, 1);
    _jacobian(9, 1) = sqrt_info(9, 1);
    _jacobian(10, 1) = sqrt_info(10, 1);
    _jacobian(0, 2) = sqrt_info(0, 2);
    _jacobian(1, 2) = sqrt_info(1, 2);
    _jacobian(2, 2) = sqrt_info(2, 2);
    _jacobian(3, 2) = sqrt_info(3, 2);
    _jacobian(4, 2) = sqrt_info(4, 2);
    _jacobian(5, 2) = sqrt_info(5, 2);
    _jacobian(6, 2) = sqrt_info(6, 2);
    _jacobian(7, 2) = sqrt_info(7, 2);
    _jacobian(8, 2) = sqrt_info(8, 2);
    _jacobian(9, 2) = sqrt_info(9, 2);
    _jacobian(10, 2) = sqrt_info(10, 2);
    _jacobian(0, 3) = sqrt_info(0, 3);
    _jacobian(1, 3) = sqrt_info(1, 3);
    _jacobian(2, 3) = sqrt_info(2, 3);
    _jacobian(3, 3) = sqrt_info(3, 3);
    _jacobian(4, 3) = sqrt_info(4, 3);
    _jacobian(5, 3) = sqrt_info(5, 3);
    _jacobian(6, 3) = sqrt_info(6, 3);
    _jacobian(7, 3) = sqrt_info(7, 3);
    _jacobian(8, 3) = sqrt_info(8, 3);
    _jacobian(9, 3) = sqrt_info(9, 3);
    _jacobian(10, 3) = sqrt_info(10, 3);
    _jacobian(0, 4) = sqrt_info(0, 4);
    _jacobian(1, 4) = sqrt_info(1, 4);
    _jacobian(2, 4) = sqrt_info(2, 4);
    _jacobian(3, 4) = sqrt_info(3, 4);
    _jacobian(4, 4) = sqrt_info(4, 4);
    _jacobian(5, 4) = sqrt_info(5, 4);
    _jacobian(6, 4) = sqrt_info(6, 4);
    _jacobian(7, 4) = sqrt_info(7, 4);
    _jacobian(8, 4) = sqrt_info(8, 4);
    _jacobian(9, 4) = sqrt_info(9, 4);
    _jacobian(10, 4) = sqrt_info(10, 4);
    _jacobian(0, 5) = sqrt_info(0, 5);
    _jacobian(1, 5) = sqrt_info(1, 5);
    _jacobian(2, 5) = sqrt_info(2, 5);
    _jacobian(3, 5) = sqrt_info(3, 5);
    _jacobian(4, 5) = sqrt_info(4, 5);
    _jacobian(5, 5) = sqrt_info(5, 5);
    _jacobian(6, 5) = sqrt_info(6, 5);
    _jacobian(7, 5) = sqrt_info(7, 5);
    _jacobian(8, 5) = sqrt_info(8, 5);
    _jacobian(9, 5) = sqrt_info(9, 5);
    _jacobian(10, 5) = sqrt_info(10, 5);
    _jacobian(0, 6) = sqrt_info(0, 6);
    _jacobian(1, 6) = sqrt_info(1, 6);
    _jacobian(2, 6) = sqrt_info(2, 6);
    _jacobian(3, 6) = sqrt_info(3, 6);
    _jacobian(4, 6) = sqrt_info(4, 6);
    _jacobian(5, 6) = sqrt_info(5, 6);
    _jacobian(6, 6) = sqrt_info(6, 6);
    _jacobian(7, 6) = sqrt_info(7, 6);
    _jacobian(8, 6) = sqrt_info(8, 6);
    _jacobian(9, 6) = sqrt_info(9, 6);
    _jacobian(10, 6) = sqrt_info(10, 6);
    _jacobian(0, 7) = sqrt_info(0, 7);
    _jacobian(1, 7) = sqrt_info(1, 7);
    _jacobian(2, 7) = sqrt_info(2, 7);
    _jacobian(3, 7) = sqrt_info(3, 7);
    _jacobian(4, 7) = sqrt_info(4, 7);
    _jacobian(5, 7) = sqrt_info(5, 7);
    _jacobian(6, 7) = sqrt_info(6, 7);
    _jacobian(7, 7) = sqrt_info(7, 7);
    _jacobian(8, 7) = sqrt_info(8, 7);
    _jacobian(9, 7) = sqrt_info(9, 7);
    _jacobian(10, 7) = sqrt_info(10, 7);
    _jacobian(0, 8) = sqrt_info(0, 8);
    _jacobian(1, 8) = sqrt_info(1, 8);
    _jacobian(2, 8) = sqrt_info(2, 8);
    _jacobian(3, 8) = sqrt_info(3, 8);
    _jacobian(4, 8) = sqrt_info(4, 8);
    _jacobian(5, 8) = sqrt_info(5, 8);
    _jacobian(6, 8) = sqrt_info(6, 8);
    _jacobian(7, 8) = sqrt_info(7, 8);
    _jacobian(8, 8) = sqrt_info(8, 8);
    _jacobian(9, 8) = sqrt_info(9, 8);
    _jacobian(10, 8) = sqrt_info(10, 8);
    _jacobian(0, 9) = sqrt_info(0, 9);
    _jacobian(1, 9) = sqrt_info(1, 9);
    _jacobian(2, 9) = sqrt_info(2, 9);
    _jacobian(3, 9) = sqrt_info(3, 9);
    _jacobian(4, 9) = sqrt_info(4, 9);
    _jacobian(5, 9) = sqrt_info(5, 9);
    _jacobian(6, 9) = sqrt_info(6, 9);
    _jacobian(7, 9) = sqrt_info(7, 9);
    _jacobian(8, 9) = sqrt_info(8, 9);
    _jacobian(9, 9) = sqrt_info(9, 9);
    _jacobian(10, 9) = sqrt_info(10, 9);
    _jacobian(0, 10) = sqrt_info(0, 10);
    _jacobian(1, 10) = sqrt_info(1, 10);
    _jacobian(2, 10) = sqrt_info(2, 10);
    _jacobian(3, 10) = sqrt_info(3, 10);
    _jacobian(4, 10) = sqrt_info(4, 10);
    _jacobian(5, 10) = sqrt_info(5, 10);
    _jacobian(6, 10) = sqrt_info(6, 10);
    _jacobian(7, 10) = sqrt_info(7, 10);
    _jacobian(8, 10) = sqrt_info(8, 10);
    _jacobian(9, 10) = sqrt_info(9, 10);
    _jacobian(10, 10) = sqrt_info(10, 10);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 11, 11>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(sqrt_info(0, 0), Scalar(2)) + std::pow(sqrt_info(1, 0), Scalar(2)) +
                     std::pow(sqrt_info(10, 0), Scalar(2)) + std::pow(sqrt_info(2, 0), Scalar(2)) +
                     std::pow(sqrt_info(3, 0), Scalar(2)) + std::pow(sqrt_info(4, 0), Scalar(2)) +
                     std::pow(sqrt_info(5, 0), Scalar(2)) + std::pow(sqrt_info(6, 0), Scalar(2)) +
                     std::pow(sqrt_info(7, 0), Scalar(2)) + std::pow(sqrt_info(8, 0), Scalar(2)) +
                     std::pow(sqrt_info(9, 0), Scalar(2));
    _hessian(1, 0) = sqrt_info(0, 0) * sqrt_info(0, 1) + sqrt_info(1, 0) * sqrt_info(1, 1) +
                     sqrt_info(10, 0) * sqrt_info(10, 1) + sqrt_info(2, 0) * sqrt_info(2, 1) +
                     sqrt_info(3, 0) * sqrt_info(3, 1) + sqrt_info(4, 0) * sqrt_info(4, 1) +
                     sqrt_info(5, 0) * sqrt_info(5, 1) + sqrt_info(6, 0) * sqrt_info(6, 1) +
                     sqrt_info(7, 0) * sqrt_info(7, 1) + sqrt_info(8, 0) * sqrt_info(8, 1) +
                     sqrt_info(9, 0) * sqrt_info(9, 1);
    _hessian(2, 0) = sqrt_info(0, 0) * sqrt_info(0, 2) + sqrt_info(1, 0) * sqrt_info(1, 2) +
                     sqrt_info(10, 0) * sqrt_info(10, 2) + sqrt_info(2, 0) * sqrt_info(2, 2) +
                     sqrt_info(3, 0) * sqrt_info(3, 2) + sqrt_info(4, 0) * sqrt_info(4, 2) +
                     sqrt_info(5, 0) * sqrt_info(5, 2) + sqrt_info(6, 0) * sqrt_info(6, 2) +
                     sqrt_info(7, 0) * sqrt_info(7, 2) + sqrt_info(8, 0) * sqrt_info(8, 2) +
                     sqrt_info(9, 0) * sqrt_info(9, 2);
    _hessian(3, 0) = sqrt_info(0, 0) * sqrt_info(0, 3) + sqrt_info(1, 0) * sqrt_info(1, 3) +
                     sqrt_info(10, 0) * sqrt_info(10, 3) + sqrt_info(2, 0) * sqrt_info(2, 3) +
                     sqrt_info(3, 0) * sqrt_info(3, 3) + sqrt_info(4, 0) * sqrt_info(4, 3) +
                     sqrt_info(5, 0) * sqrt_info(5, 3) + sqrt_info(6, 0) * sqrt_info(6, 3) +
                     sqrt_info(7, 0) * sqrt_info(7, 3) + sqrt_info(8, 0) * sqrt_info(8, 3) +
                     sqrt_info(9, 0) * sqrt_info(9, 3);
    _hessian(4, 0) = sqrt_info(0, 0) * sqrt_info(0, 4) + sqrt_info(1, 0) * sqrt_info(1, 4) +
                     sqrt_info(10, 0) * sqrt_info(10, 4) + sqrt_info(2, 0) * sqrt_info(2, 4) +
                     sqrt_info(3, 0) * sqrt_info(3, 4) + sqrt_info(4, 0) * sqrt_info(4, 4) +
                     sqrt_info(5, 0) * sqrt_info(5, 4) + sqrt_info(6, 0) * sqrt_info(6, 4) +
                     sqrt_info(7, 0) * sqrt_info(7, 4) + sqrt_info(8, 0) * sqrt_info(8, 4) +
                     sqrt_info(9, 0) * sqrt_info(9, 4);
    _hessian(5, 0) = sqrt_info(0, 0) * sqrt_info(0, 5) + sqrt_info(1, 0) * sqrt_info(1, 5) +
                     sqrt_info(10, 0) * sqrt_info(10, 5) + sqrt_info(2, 0) * sqrt_info(2, 5) +
                     sqrt_info(3, 0) * sqrt_info(3, 5) + sqrt_info(4, 0) * sqrt_info(4, 5) +
                     sqrt_info(5, 0) * sqrt_info(5, 5) + sqrt_info(6, 0) * sqrt_info(6, 5) +
                     sqrt_info(7, 0) * sqrt_info(7, 5) + sqrt_info(8, 0) * sqrt_info(8, 5) +
                     sqrt_info(9, 0) * sqrt_info(9, 5);
    _hessian(6, 0) = sqrt_info(0, 0) * sqrt_info(0, 6) + sqrt_info(1, 0) * sqrt_info(1, 6) +
                     sqrt_info(10, 0) * sqrt_info(10, 6) + sqrt_info(2, 0) * sqrt_info(2, 6) +
                     sqrt_info(3, 0) * sqrt_info(3, 6) + sqrt_info(4, 0) * sqrt_info(4, 6) +
                     sqrt_info(5, 0) * sqrt_info(5, 6) + sqrt_info(6, 0) * sqrt_info(6, 6) +
                     sqrt_info(7, 0) * sqrt_info(7, 6) + sqrt_info(8, 0) * sqrt_info(8, 6) +
                     sqrt_info(9, 0) * sqrt_info(9, 6);
    _hessian(7, 0) = sqrt_info(0, 0) * sqrt_info(0, 7) + sqrt_info(1, 0) * sqrt_info(1, 7) +
                     sqrt_info(10, 0) * sqrt_info(10, 7) + sqrt_info(2, 0) * sqrt_info(2, 7) +
                     sqrt_info(3, 0) * sqrt_info(3, 7) + sqrt_info(4, 0) * sqrt_info(4, 7) +
                     sqrt_info(5, 0) * sqrt_info(5, 7) + sqrt_info(6, 0) * sqrt_info(6, 7) +
                     sqrt_info(7, 0) * sqrt_info(7, 7) + sqrt_info(8, 0) * sqrt_info(8, 7) +
                     sqrt_info(9, 0) * sqrt_info(9, 7);
    _hessian(8, 0) = sqrt_info(0, 0) * sqrt_info(0, 8) + sqrt_info(1, 0) * sqrt_info(1, 8) +
                     sqrt_info(10, 0) * sqrt_info(10, 8) + sqrt_info(2, 0) * sqrt_info(2, 8) +
                     sqrt_info(3, 0) * sqrt_info(3, 8) + sqrt_info(4, 0) * sqrt_info(4, 8) +
                     sqrt_info(5, 0) * sqrt_info(5, 8) + sqrt_info(6, 0) * sqrt_info(6, 8) +
                     sqrt_info(7, 0) * sqrt_info(7, 8) + sqrt_info(8, 0) * sqrt_info(8, 8) +
                     sqrt_info(9, 0) * sqrt_info(9, 8);
    _hessian(9, 0) = sqrt_info(0, 0) * sqrt_info(0, 9) + sqrt_info(1, 0) * sqrt_info(1, 9) +
                     sqrt_info(10, 0) * sqrt_info(10, 9) + sqrt_info(2, 0) * sqrt_info(2, 9) +
                     sqrt_info(3, 0) * sqrt_info(3, 9) + sqrt_info(4, 0) * sqrt_info(4, 9) +
                     sqrt_info(5, 0) * sqrt_info(5, 9) + sqrt_info(6, 0) * sqrt_info(6, 9) +
                     sqrt_info(7, 0) * sqrt_info(7, 9) + sqrt_info(8, 0) * sqrt_info(8, 9) +
                     sqrt_info(9, 0) * sqrt_info(9, 9);
    _hessian(10, 0) = sqrt_info(0, 0) * sqrt_info(0, 10) + sqrt_info(1, 0) * sqrt_info(1, 10) +
                      sqrt_info(10, 0) * sqrt_info(10, 10) + sqrt_info(2, 0) * sqrt_info(2, 10) +
                      sqrt_info(3, 0) * sqrt_info(3, 10) + sqrt_info(4, 0) * sqrt_info(4, 10) +
                      sqrt_info(5, 0) * sqrt_info(5, 10) + sqrt_info(6, 0) * sqrt_info(6, 10) +
                      sqrt_info(7, 0) * sqrt_info(7, 10) + sqrt_info(8, 0) * sqrt_info(8, 10) +
                      sqrt_info(9, 0) * sqrt_info(9, 10);
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(sqrt_info(0, 1), Scalar(2)) + std::pow(sqrt_info(1, 1), Scalar(2)) +
                     std::pow(sqrt_info(10, 1), Scalar(2)) + std::pow(sqrt_info(2, 1), Scalar(2)) +
                     std::pow(sqrt_info(3, 1), Scalar(2)) + std::pow(sqrt_info(4, 1), Scalar(2)) +
                     std::pow(sqrt_info(5, 1), Scalar(2)) + std::pow(sqrt_info(6, 1), Scalar(2)) +
                     std::pow(sqrt_info(7, 1), Scalar(2)) + std::pow(sqrt_info(8, 1), Scalar(2)) +
                     std::pow(sqrt_info(9, 1), Scalar(2));
    _hessian(2, 1) = sqrt_info(0, 1) * sqrt_info(0, 2) + sqrt_info(1, 1) * sqrt_info(1, 2) +
                     sqrt_info(10, 1) * sqrt_info(10, 2) + sqrt_info(2, 1) * sqrt_info(2, 2) +
                     sqrt_info(3, 1) * sqrt_info(3, 2) + sqrt_info(4, 1) * sqrt_info(4, 2) +
                     sqrt_info(5, 1) * sqrt_info(5, 2) + sqrt_info(6, 1) * sqrt_info(6, 2) +
                     sqrt_info(7, 1) * sqrt_info(7, 2) + sqrt_info(8, 1) * sqrt_info(8, 2) +
                     sqrt_info(9, 1) * sqrt_info(9, 2);
    _hessian(3, 1) = sqrt_info(0, 1) * sqrt_info(0, 3) + sqrt_info(1, 1) * sqrt_info(1, 3) +
                     sqrt_info(10, 1) * sqrt_info(10, 3) + sqrt_info(2, 1) * sqrt_info(2, 3) +
                     sqrt_info(3, 1) * sqrt_info(3, 3) + sqrt_info(4, 1) * sqrt_info(4, 3) +
                     sqrt_info(5, 1) * sqrt_info(5, 3) + sqrt_info(6, 1) * sqrt_info(6, 3) +
                     sqrt_info(7, 1) * sqrt_info(7, 3) + sqrt_info(8, 1) * sqrt_info(8, 3) +
                     sqrt_info(9, 1) * sqrt_info(9, 3);
    _hessian(4, 1) = sqrt_info(0, 1) * sqrt_info(0, 4) + sqrt_info(1, 1) * sqrt_info(1, 4) +
                     sqrt_info(10, 1) * sqrt_info(10, 4) + sqrt_info(2, 1) * sqrt_info(2, 4) +
                     sqrt_info(3, 1) * sqrt_info(3, 4) + sqrt_info(4, 1) * sqrt_info(4, 4) +
                     sqrt_info(5, 1) * sqrt_info(5, 4) + sqrt_info(6, 1) * sqrt_info(6, 4) +
                     sqrt_info(7, 1) * sqrt_info(7, 4) + sqrt_info(8, 1) * sqrt_info(8, 4) +
                     sqrt_info(9, 1) * sqrt_info(9, 4);
    _hessian(5, 1) = sqrt_info(0, 1) * sqrt_info(0, 5) + sqrt_info(1, 1) * sqrt_info(1, 5) +
                     sqrt_info(10, 1) * sqrt_info(10, 5) + sqrt_info(2, 1) * sqrt_info(2, 5) +
                     sqrt_info(3, 1) * sqrt_info(3, 5) + sqrt_info(4, 1) * sqrt_info(4, 5) +
                     sqrt_info(5, 1) * sqrt_info(5, 5) + sqrt_info(6, 1) * sqrt_info(6, 5) +
                     sqrt_info(7, 1) * sqrt_info(7, 5) + sqrt_info(8, 1) * sqrt_info(8, 5) +
                     sqrt_info(9, 1) * sqrt_info(9, 5);
    _hessian(6, 1) = sqrt_info(0, 1) * sqrt_info(0, 6) + sqrt_info(1, 1) * sqrt_info(1, 6) +
                     sqrt_info(10, 1) * sqrt_info(10, 6) + sqrt_info(2, 1) * sqrt_info(2, 6) +
                     sqrt_info(3, 1) * sqrt_info(3, 6) + sqrt_info(4, 1) * sqrt_info(4, 6) +
                     sqrt_info(5, 1) * sqrt_info(5, 6) + sqrt_info(6, 1) * sqrt_info(6, 6) +
                     sqrt_info(7, 1) * sqrt_info(7, 6) + sqrt_info(8, 1) * sqrt_info(8, 6) +
                     sqrt_info(9, 1) * sqrt_info(9, 6);
    _hessian(7, 1) = sqrt_info(0, 1) * sqrt_info(0, 7) + sqrt_info(1, 1) * sqrt_info(1, 7) +
                     sqrt_info(10, 1) * sqrt_info(10, 7) + sqrt_info(2, 1) * sqrt_info(2, 7) +
                     sqrt_info(3, 1) * sqrt_info(3, 7) + sqrt_info(4, 1) * sqrt_info(4, 7) +
                     sqrt_info(5, 1) * sqrt_info(5, 7) + sqrt_info(6, 1) * sqrt_info(6, 7) +
                     sqrt_info(7, 1) * sqrt_info(7, 7) + sqrt_info(8, 1) * sqrt_info(8, 7) +
                     sqrt_info(9, 1) * sqrt_info(9, 7);
    _hessian(8, 1) = sqrt_info(0, 1) * sqrt_info(0, 8) + sqrt_info(1, 1) * sqrt_info(1, 8) +
                     sqrt_info(10, 1) * sqrt_info(10, 8) + sqrt_info(2, 1) * sqrt_info(2, 8) +
                     sqrt_info(3, 1) * sqrt_info(3, 8) + sqrt_info(4, 1) * sqrt_info(4, 8) +
                     sqrt_info(5, 1) * sqrt_info(5, 8) + sqrt_info(6, 1) * sqrt_info(6, 8) +
                     sqrt_info(7, 1) * sqrt_info(7, 8) + sqrt_info(8, 1) * sqrt_info(8, 8) +
                     sqrt_info(9, 1) * sqrt_info(9, 8);
    _hessian(9, 1) = sqrt_info(0, 1) * sqrt_info(0, 9) + sqrt_info(1, 1) * sqrt_info(1, 9) +
                     sqrt_info(10, 1) * sqrt_info(10, 9) + sqrt_info(2, 1) * sqrt_info(2, 9) +
                     sqrt_info(3, 1) * sqrt_info(3, 9) + sqrt_info(4, 1) * sqrt_info(4, 9) +
                     sqrt_info(5, 1) * sqrt_info(5, 9) + sqrt_info(6, 1) * sqrt_info(6, 9) +
                     sqrt_info(7, 1) * sqrt_info(7, 9) + sqrt_info(8, 1) * sqrt_info(8, 9) +
                     sqrt_info(9, 1) * sqrt_info(9, 9);
    _hessian(10, 1) = sqrt_info(0, 1) * sqrt_info(0, 10) + sqrt_info(1, 1) * sqrt_info(1, 10) +
                      sqrt_info(10, 1) * sqrt_info(10, 10) + sqrt_info(2, 1) * sqrt_info(2, 10) +
                      sqrt_info(3, 1) * sqrt_info(3, 10) + sqrt_info(4, 1) * sqrt_info(4, 10) +
                      sqrt_info(5, 1) * sqrt_info(5, 10) + sqrt_info(6, 1) * sqrt_info(6, 10) +
                      sqrt_info(7, 1) * sqrt_info(7, 10) + sqrt_info(8, 1) * sqrt_info(8, 10) +
                      sqrt_info(9, 1) * sqrt_info(9, 10);
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(sqrt_info(0, 2), Scalar(2)) + std::pow(sqrt_info(1, 2), Scalar(2)) +
                     std::pow(sqrt_info(10, 2), Scalar(2)) + std::pow(sqrt_info(2, 2), Scalar(2)) +
                     std::pow(sqrt_info(3, 2), Scalar(2)) + std::pow(sqrt_info(4, 2), Scalar(2)) +
                     std::pow(sqrt_info(5, 2), Scalar(2)) + std::pow(sqrt_info(6, 2), Scalar(2)) +
                     std::pow(sqrt_info(7, 2), Scalar(2)) + std::pow(sqrt_info(8, 2), Scalar(2)) +
                     std::pow(sqrt_info(9, 2), Scalar(2));
    _hessian(3, 2) = sqrt_info(0, 2) * sqrt_info(0, 3) + sqrt_info(1, 2) * sqrt_info(1, 3) +
                     sqrt_info(10, 2) * sqrt_info(10, 3) + sqrt_info(2, 2) * sqrt_info(2, 3) +
                     sqrt_info(3, 2) * sqrt_info(3, 3) + sqrt_info(4, 2) * sqrt_info(4, 3) +
                     sqrt_info(5, 2) * sqrt_info(5, 3) + sqrt_info(6, 2) * sqrt_info(6, 3) +
                     sqrt_info(7, 2) * sqrt_info(7, 3) + sqrt_info(8, 2) * sqrt_info(8, 3) +
                     sqrt_info(9, 2) * sqrt_info(9, 3);
    _hessian(4, 2) = sqrt_info(0, 2) * sqrt_info(0, 4) + sqrt_info(1, 2) * sqrt_info(1, 4) +
                     sqrt_info(10, 2) * sqrt_info(10, 4) + sqrt_info(2, 2) * sqrt_info(2, 4) +
                     sqrt_info(3, 2) * sqrt_info(3, 4) + sqrt_info(4, 2) * sqrt_info(4, 4) +
                     sqrt_info(5, 2) * sqrt_info(5, 4) + sqrt_info(6, 2) * sqrt_info(6, 4) +
                     sqrt_info(7, 2) * sqrt_info(7, 4) + sqrt_info(8, 2) * sqrt_info(8, 4) +
                     sqrt_info(9, 2) * sqrt_info(9, 4);
    _hessian(5, 2) = sqrt_info(0, 2) * sqrt_info(0, 5) + sqrt_info(1, 2) * sqrt_info(1, 5) +
                     sqrt_info(10, 2) * sqrt_info(10, 5) + sqrt_info(2, 2) * sqrt_info(2, 5) +
                     sqrt_info(3, 2) * sqrt_info(3, 5) + sqrt_info(4, 2) * sqrt_info(4, 5) +
                     sqrt_info(5, 2) * sqrt_info(5, 5) + sqrt_info(6, 2) * sqrt_info(6, 5) +
                     sqrt_info(7, 2) * sqrt_info(7, 5) + sqrt_info(8, 2) * sqrt_info(8, 5) +
                     sqrt_info(9, 2) * sqrt_info(9, 5);
    _hessian(6, 2) = sqrt_info(0, 2) * sqrt_info(0, 6) + sqrt_info(1, 2) * sqrt_info(1, 6) +
                     sqrt_info(10, 2) * sqrt_info(10, 6) + sqrt_info(2, 2) * sqrt_info(2, 6) +
                     sqrt_info(3, 2) * sqrt_info(3, 6) + sqrt_info(4, 2) * sqrt_info(4, 6) +
                     sqrt_info(5, 2) * sqrt_info(5, 6) + sqrt_info(6, 2) * sqrt_info(6, 6) +
                     sqrt_info(7, 2) * sqrt_info(7, 6) + sqrt_info(8, 2) * sqrt_info(8, 6) +
                     sqrt_info(9, 2) * sqrt_info(9, 6);
    _hessian(7, 2) = sqrt_info(0, 2) * sqrt_info(0, 7) + sqrt_info(1, 2) * sqrt_info(1, 7) +
                     sqrt_info(10, 2) * sqrt_info(10, 7) + sqrt_info(2, 2) * sqrt_info(2, 7) +
                     sqrt_info(3, 2) * sqrt_info(3, 7) + sqrt_info(4, 2) * sqrt_info(4, 7) +
                     sqrt_info(5, 2) * sqrt_info(5, 7) + sqrt_info(6, 2) * sqrt_info(6, 7) +
                     sqrt_info(7, 2) * sqrt_info(7, 7) + sqrt_info(8, 2) * sqrt_info(8, 7) +
                     sqrt_info(9, 2) * sqrt_info(9, 7);
    _hessian(8, 2) = sqrt_info(0, 2) * sqrt_info(0, 8) + sqrt_info(1, 2) * sqrt_info(1, 8) +
                     sqrt_info(10, 2) * sqrt_info(10, 8) + sqrt_info(2, 2) * sqrt_info(2, 8) +
                     sqrt_info(3, 2) * sqrt_info(3, 8) + sqrt_info(4, 2) * sqrt_info(4, 8) +
                     sqrt_info(5, 2) * sqrt_info(5, 8) + sqrt_info(6, 2) * sqrt_info(6, 8) +
                     sqrt_info(7, 2) * sqrt_info(7, 8) + sqrt_info(8, 2) * sqrt_info(8, 8) +
                     sqrt_info(9, 2) * sqrt_info(9, 8);
    _hessian(9, 2) = sqrt_info(0, 2) * sqrt_info(0, 9) + sqrt_info(1, 2) * sqrt_info(1, 9) +
                     sqrt_info(10, 2) * sqrt_info(10, 9) + sqrt_info(2, 2) * sqrt_info(2, 9) +
                     sqrt_info(3, 2) * sqrt_info(3, 9) + sqrt_info(4, 2) * sqrt_info(4, 9) +
                     sqrt_info(5, 2) * sqrt_info(5, 9) + sqrt_info(6, 2) * sqrt_info(6, 9) +
                     sqrt_info(7, 2) * sqrt_info(7, 9) + sqrt_info(8, 2) * sqrt_info(8, 9) +
                     sqrt_info(9, 2) * sqrt_info(9, 9);
    _hessian(10, 2) = sqrt_info(0, 10) * sqrt_info(0, 2) + sqrt_info(1, 10) * sqrt_info(1, 2) +
                      sqrt_info(10, 10) * sqrt_info(10, 2) + sqrt_info(2, 10) * sqrt_info(2, 2) +
                      sqrt_info(3, 10) * sqrt_info(3, 2) + sqrt_info(4, 10) * sqrt_info(4, 2) +
                      sqrt_info(5, 10) * sqrt_info(5, 2) + sqrt_info(6, 10) * sqrt_info(6, 2) +
                      sqrt_info(7, 10) * sqrt_info(7, 2) + sqrt_info(8, 10) * sqrt_info(8, 2) +
                      sqrt_info(9, 10) * sqrt_info(9, 2);
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(sqrt_info(0, 3), Scalar(2)) + std::pow(sqrt_info(1, 3), Scalar(2)) +
                     std::pow(sqrt_info(10, 3), Scalar(2)) + std::pow(sqrt_info(2, 3), Scalar(2)) +
                     std::pow(sqrt_info(3, 3), Scalar(2)) + std::pow(sqrt_info(4, 3), Scalar(2)) +
                     std::pow(sqrt_info(5, 3), Scalar(2)) + std::pow(sqrt_info(6, 3), Scalar(2)) +
                     std::pow(sqrt_info(7, 3), Scalar(2)) + std::pow(sqrt_info(8, 3), Scalar(2)) +
                     std::pow(sqrt_info(9, 3), Scalar(2));
    _hessian(4, 3) = sqrt_info(0, 3) * sqrt_info(0, 4) + sqrt_info(1, 3) * sqrt_info(1, 4) +
                     sqrt_info(10, 3) * sqrt_info(10, 4) + sqrt_info(2, 3) * sqrt_info(2, 4) +
                     sqrt_info(3, 3) * sqrt_info(3, 4) + sqrt_info(4, 3) * sqrt_info(4, 4) +
                     sqrt_info(5, 3) * sqrt_info(5, 4) + sqrt_info(6, 3) * sqrt_info(6, 4) +
                     sqrt_info(7, 3) * sqrt_info(7, 4) + sqrt_info(8, 3) * sqrt_info(8, 4) +
                     sqrt_info(9, 3) * sqrt_info(9, 4);
    _hessian(5, 3) = sqrt_info(0, 3) * sqrt_info(0, 5) + sqrt_info(1, 3) * sqrt_info(1, 5) +
                     sqrt_info(10, 3) * sqrt_info(10, 5) + sqrt_info(2, 3) * sqrt_info(2, 5) +
                     sqrt_info(3, 3) * sqrt_info(3, 5) + sqrt_info(4, 3) * sqrt_info(4, 5) +
                     sqrt_info(5, 3) * sqrt_info(5, 5) + sqrt_info(6, 3) * sqrt_info(6, 5) +
                     sqrt_info(7, 3) * sqrt_info(7, 5) + sqrt_info(8, 3) * sqrt_info(8, 5) +
                     sqrt_info(9, 3) * sqrt_info(9, 5);
    _hessian(6, 3) = sqrt_info(0, 3) * sqrt_info(0, 6) + sqrt_info(1, 3) * sqrt_info(1, 6) +
                     sqrt_info(10, 3) * sqrt_info(10, 6) + sqrt_info(2, 3) * sqrt_info(2, 6) +
                     sqrt_info(3, 3) * sqrt_info(3, 6) + sqrt_info(4, 3) * sqrt_info(4, 6) +
                     sqrt_info(5, 3) * sqrt_info(5, 6) + sqrt_info(6, 3) * sqrt_info(6, 6) +
                     sqrt_info(7, 3) * sqrt_info(7, 6) + sqrt_info(8, 3) * sqrt_info(8, 6) +
                     sqrt_info(9, 3) * sqrt_info(9, 6);
    _hessian(7, 3) = sqrt_info(0, 3) * sqrt_info(0, 7) + sqrt_info(1, 3) * sqrt_info(1, 7) +
                     sqrt_info(10, 3) * sqrt_info(10, 7) + sqrt_info(2, 3) * sqrt_info(2, 7) +
                     sqrt_info(3, 3) * sqrt_info(3, 7) + sqrt_info(4, 3) * sqrt_info(4, 7) +
                     sqrt_info(5, 3) * sqrt_info(5, 7) + sqrt_info(6, 3) * sqrt_info(6, 7) +
                     sqrt_info(7, 3) * sqrt_info(7, 7) + sqrt_info(8, 3) * sqrt_info(8, 7) +
                     sqrt_info(9, 3) * sqrt_info(9, 7);
    _hessian(8, 3) = sqrt_info(0, 3) * sqrt_info(0, 8) + sqrt_info(1, 3) * sqrt_info(1, 8) +
                     sqrt_info(10, 3) * sqrt_info(10, 8) + sqrt_info(2, 3) * sqrt_info(2, 8) +
                     sqrt_info(3, 3) * sqrt_info(3, 8) + sqrt_info(4, 3) * sqrt_info(4, 8) +
                     sqrt_info(5, 3) * sqrt_info(5, 8) + sqrt_info(6, 3) * sqrt_info(6, 8) +
                     sqrt_info(7, 3) * sqrt_info(7, 8) + sqrt_info(8, 3) * sqrt_info(8, 8) +
                     sqrt_info(9, 3) * sqrt_info(9, 8);
    _hessian(9, 3) = sqrt_info(0, 3) * sqrt_info(0, 9) + sqrt_info(1, 3) * sqrt_info(1, 9) +
                     sqrt_info(10, 3) * sqrt_info(10, 9) + sqrt_info(2, 3) * sqrt_info(2, 9) +
                     sqrt_info(3, 3) * sqrt_info(3, 9) + sqrt_info(4, 3) * sqrt_info(4, 9) +
                     sqrt_info(5, 3) * sqrt_info(5, 9) + sqrt_info(6, 3) * sqrt_info(6, 9) +
                     sqrt_info(7, 3) * sqrt_info(7, 9) + sqrt_info(8, 3) * sqrt_info(8, 9) +
                     sqrt_info(9, 3) * sqrt_info(9, 9);
    _hessian(10, 3) = sqrt_info(0, 10) * sqrt_info(0, 3) + sqrt_info(1, 10) * sqrt_info(1, 3) +
                      sqrt_info(10, 10) * sqrt_info(10, 3) + sqrt_info(2, 10) * sqrt_info(2, 3) +
                      sqrt_info(3, 10) * sqrt_info(3, 3) + sqrt_info(4, 10) * sqrt_info(4, 3) +
                      sqrt_info(5, 10) * sqrt_info(5, 3) + sqrt_info(6, 10) * sqrt_info(6, 3) +
                      sqrt_info(7, 10) * sqrt_info(7, 3) + sqrt_info(8, 10) * sqrt_info(8, 3) +
                      sqrt_info(9, 10) * sqrt_info(9, 3);
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(sqrt_info(0, 4), Scalar(2)) + std::pow(sqrt_info(1, 4), Scalar(2)) +
                     std::pow(sqrt_info(10, 4), Scalar(2)) + std::pow(sqrt_info(2, 4), Scalar(2)) +
                     std::pow(sqrt_info(3, 4), Scalar(2)) + std::pow(sqrt_info(4, 4), Scalar(2)) +
                     std::pow(sqrt_info(5, 4), Scalar(2)) + std::pow(sqrt_info(6, 4), Scalar(2)) +
                     std::pow(sqrt_info(7, 4), Scalar(2)) + std::pow(sqrt_info(8, 4), Scalar(2)) +
                     std::pow(sqrt_info(9, 4), Scalar(2));
    _hessian(5, 4) = sqrt_info(0, 4) * sqrt_info(0, 5) + sqrt_info(1, 4) * sqrt_info(1, 5) +
                     sqrt_info(10, 4) * sqrt_info(10, 5) + sqrt_info(2, 4) * sqrt_info(2, 5) +
                     sqrt_info(3, 4) * sqrt_info(3, 5) + sqrt_info(4, 4) * sqrt_info(4, 5) +
                     sqrt_info(5, 4) * sqrt_info(5, 5) + sqrt_info(6, 4) * sqrt_info(6, 5) +
                     sqrt_info(7, 4) * sqrt_info(7, 5) + sqrt_info(8, 4) * sqrt_info(8, 5) +
                     sqrt_info(9, 4) * sqrt_info(9, 5);
    _hessian(6, 4) = sqrt_info(0, 4) * sqrt_info(0, 6) + sqrt_info(1, 4) * sqrt_info(1, 6) +
                     sqrt_info(10, 4) * sqrt_info(10, 6) + sqrt_info(2, 4) * sqrt_info(2, 6) +
                     sqrt_info(3, 4) * sqrt_info(3, 6) + sqrt_info(4, 4) * sqrt_info(4, 6) +
                     sqrt_info(5, 4) * sqrt_info(5, 6) + sqrt_info(6, 4) * sqrt_info(6, 6) +
                     sqrt_info(7, 4) * sqrt_info(7, 6) + sqrt_info(8, 4) * sqrt_info(8, 6) +
                     sqrt_info(9, 4) * sqrt_info(9, 6);
    _hessian(7, 4) = sqrt_info(0, 4) * sqrt_info(0, 7) + sqrt_info(1, 4) * sqrt_info(1, 7) +
                     sqrt_info(10, 4) * sqrt_info(10, 7) + sqrt_info(2, 4) * sqrt_info(2, 7) +
                     sqrt_info(3, 4) * sqrt_info(3, 7) + sqrt_info(4, 4) * sqrt_info(4, 7) +
                     sqrt_info(5, 4) * sqrt_info(5, 7) + sqrt_info(6, 4) * sqrt_info(6, 7) +
                     sqrt_info(7, 4) * sqrt_info(7, 7) + sqrt_info(8, 4) * sqrt_info(8, 7) +
                     sqrt_info(9, 4) * sqrt_info(9, 7);
    _hessian(8, 4) = sqrt_info(0, 4) * sqrt_info(0, 8) + sqrt_info(1, 4) * sqrt_info(1, 8) +
                     sqrt_info(10, 4) * sqrt_info(10, 8) + sqrt_info(2, 4) * sqrt_info(2, 8) +
                     sqrt_info(3, 4) * sqrt_info(3, 8) + sqrt_info(4, 4) * sqrt_info(4, 8) +
                     sqrt_info(5, 4) * sqrt_info(5, 8) + sqrt_info(6, 4) * sqrt_info(6, 8) +
                     sqrt_info(7, 4) * sqrt_info(7, 8) + sqrt_info(8, 4) * sqrt_info(8, 8) +
                     sqrt_info(9, 4) * sqrt_info(9, 8);
    _hessian(9, 4) = sqrt_info(0, 4) * sqrt_info(0, 9) + sqrt_info(1, 4) * sqrt_info(1, 9) +
                     sqrt_info(10, 4) * sqrt_info(10, 9) + sqrt_info(2, 4) * sqrt_info(2, 9) +
                     sqrt_info(3, 4) * sqrt_info(3, 9) + sqrt_info(4, 4) * sqrt_info(4, 9) +
                     sqrt_info(5, 4) * sqrt_info(5, 9) + sqrt_info(6, 4) * sqrt_info(6, 9) +
                     sqrt_info(7, 4) * sqrt_info(7, 9) + sqrt_info(8, 4) * sqrt_info(8, 9) +
                     sqrt_info(9, 4) * sqrt_info(9, 9);
    _hessian(10, 4) = sqrt_info(0, 10) * sqrt_info(0, 4) + sqrt_info(1, 10) * sqrt_info(1, 4) +
                      sqrt_info(10, 10) * sqrt_info(10, 4) + sqrt_info(2, 10) * sqrt_info(2, 4) +
                      sqrt_info(3, 10) * sqrt_info(3, 4) + sqrt_info(4, 10) * sqrt_info(4, 4) +
                      sqrt_info(5, 10) * sqrt_info(5, 4) + sqrt_info(6, 10) * sqrt_info(6, 4) +
                      sqrt_info(7, 10) * sqrt_info(7, 4) + sqrt_info(8, 10) * sqrt_info(8, 4) +
                      sqrt_info(9, 10) * sqrt_info(9, 4);
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(sqrt_info(0, 5), Scalar(2)) + std::pow(sqrt_info(1, 5), Scalar(2)) +
                     std::pow(sqrt_info(10, 5), Scalar(2)) + std::pow(sqrt_info(2, 5), Scalar(2)) +
                     std::pow(sqrt_info(3, 5), Scalar(2)) + std::pow(sqrt_info(4, 5), Scalar(2)) +
                     std::pow(sqrt_info(5, 5), Scalar(2)) + std::pow(sqrt_info(6, 5), Scalar(2)) +
                     std::pow(sqrt_info(7, 5), Scalar(2)) + std::pow(sqrt_info(8, 5), Scalar(2)) +
                     std::pow(sqrt_info(9, 5), Scalar(2));
    _hessian(6, 5) = sqrt_info(0, 5) * sqrt_info(0, 6) + sqrt_info(1, 5) * sqrt_info(1, 6) +
                     sqrt_info(10, 5) * sqrt_info(10, 6) + sqrt_info(2, 5) * sqrt_info(2, 6) +
                     sqrt_info(3, 5) * sqrt_info(3, 6) + sqrt_info(4, 5) * sqrt_info(4, 6) +
                     sqrt_info(5, 5) * sqrt_info(5, 6) + sqrt_info(6, 5) * sqrt_info(6, 6) +
                     sqrt_info(7, 5) * sqrt_info(7, 6) + sqrt_info(8, 5) * sqrt_info(8, 6) +
                     sqrt_info(9, 5) * sqrt_info(9, 6);
    _hessian(7, 5) = sqrt_info(0, 5) * sqrt_info(0, 7) + sqrt_info(1, 5) * sqrt_info(1, 7) +
                     sqrt_info(10, 5) * sqrt_info(10, 7) + sqrt_info(2, 5) * sqrt_info(2, 7) +
                     sqrt_info(3, 5) * sqrt_info(3, 7) + sqrt_info(4, 5) * sqrt_info(4, 7) +
                     sqrt_info(5, 5) * sqrt_info(5, 7) + sqrt_info(6, 5) * sqrt_info(6, 7) +
                     sqrt_info(7, 5) * sqrt_info(7, 7) + sqrt_info(8, 5) * sqrt_info(8, 7) +
                     sqrt_info(9, 5) * sqrt_info(9, 7);
    _hessian(8, 5) = sqrt_info(0, 5) * sqrt_info(0, 8) + sqrt_info(1, 5) * sqrt_info(1, 8) +
                     sqrt_info(10, 5) * sqrt_info(10, 8) + sqrt_info(2, 5) * sqrt_info(2, 8) +
                     sqrt_info(3, 5) * sqrt_info(3, 8) + sqrt_info(4, 5) * sqrt_info(4, 8) +
                     sqrt_info(5, 5) * sqrt_info(5, 8) + sqrt_info(6, 5) * sqrt_info(6, 8) +
                     sqrt_info(7, 5) * sqrt_info(7, 8) + sqrt_info(8, 5) * sqrt_info(8, 8) +
                     sqrt_info(9, 5) * sqrt_info(9, 8);
    _hessian(9, 5) = sqrt_info(0, 5) * sqrt_info(0, 9) + sqrt_info(1, 5) * sqrt_info(1, 9) +
                     sqrt_info(10, 5) * sqrt_info(10, 9) + sqrt_info(2, 5) * sqrt_info(2, 9) +
                     sqrt_info(3, 5) * sqrt_info(3, 9) + sqrt_info(4, 5) * sqrt_info(4, 9) +
                     sqrt_info(5, 5) * sqrt_info(5, 9) + sqrt_info(6, 5) * sqrt_info(6, 9) +
                     sqrt_info(7, 5) * sqrt_info(7, 9) + sqrt_info(8, 5) * sqrt_info(8, 9) +
                     sqrt_info(9, 5) * sqrt_info(9, 9);
    _hessian(10, 5) = sqrt_info(0, 10) * sqrt_info(0, 5) + sqrt_info(1, 10) * sqrt_info(1, 5) +
                      sqrt_info(10, 10) * sqrt_info(10, 5) + sqrt_info(2, 10) * sqrt_info(2, 5) +
                      sqrt_info(3, 10) * sqrt_info(3, 5) + sqrt_info(4, 10) * sqrt_info(4, 5) +
                      sqrt_info(5, 10) * sqrt_info(5, 5) + sqrt_info(6, 10) * sqrt_info(6, 5) +
                      sqrt_info(7, 10) * sqrt_info(7, 5) + sqrt_info(8, 10) * sqrt_info(8, 5) +
                      sqrt_info(9, 10) * sqrt_info(9, 5);
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(sqrt_info(0, 6), Scalar(2)) + std::pow(sqrt_info(1, 6), Scalar(2)) +
                     std::pow(sqrt_info(10, 6), Scalar(2)) + std::pow(sqrt_info(2, 6), Scalar(2)) +
                     std::pow(sqrt_info(3, 6), Scalar(2)) + std::pow(sqrt_info(4, 6), Scalar(2)) +
                     std::pow(sqrt_info(5, 6), Scalar(2)) + std::pow(sqrt_info(6, 6), Scalar(2)) +
                     std::pow(sqrt_info(7, 6), Scalar(2)) + std::pow(sqrt_info(8, 6), Scalar(2)) +
                     std::pow(sqrt_info(9, 6), Scalar(2));
    _hessian(7, 6) = sqrt_info(0, 6) * sqrt_info(0, 7) + sqrt_info(1, 6) * sqrt_info(1, 7) +
                     sqrt_info(10, 6) * sqrt_info(10, 7) + sqrt_info(2, 6) * sqrt_info(2, 7) +
                     sqrt_info(3, 6) * sqrt_info(3, 7) + sqrt_info(4, 6) * sqrt_info(4, 7) +
                     sqrt_info(5, 6) * sqrt_info(5, 7) + sqrt_info(6, 6) * sqrt_info(6, 7) +
                     sqrt_info(7, 6) * sqrt_info(7, 7) + sqrt_info(8, 6) * sqrt_info(8, 7) +
                     sqrt_info(9, 6) * sqrt_info(9, 7);
    _hessian(8, 6) = sqrt_info(0, 6) * sqrt_info(0, 8) + sqrt_info(1, 6) * sqrt_info(1, 8) +
                     sqrt_info(10, 6) * sqrt_info(10, 8) + sqrt_info(2, 6) * sqrt_info(2, 8) +
                     sqrt_info(3, 6) * sqrt_info(3, 8) + sqrt_info(4, 6) * sqrt_info(4, 8) +
                     sqrt_info(5, 6) * sqrt_info(5, 8) + sqrt_info(6, 6) * sqrt_info(6, 8) +
                     sqrt_info(7, 6) * sqrt_info(7, 8) + sqrt_info(8, 6) * sqrt_info(8, 8) +
                     sqrt_info(9, 6) * sqrt_info(9, 8);
    _hessian(9, 6) = sqrt_info(0, 6) * sqrt_info(0, 9) + sqrt_info(1, 6) * sqrt_info(1, 9) +
                     sqrt_info(10, 6) * sqrt_info(10, 9) + sqrt_info(2, 6) * sqrt_info(2, 9) +
                     sqrt_info(3, 6) * sqrt_info(3, 9) + sqrt_info(4, 6) * sqrt_info(4, 9) +
                     sqrt_info(5, 6) * sqrt_info(5, 9) + sqrt_info(6, 6) * sqrt_info(6, 9) +
                     sqrt_info(7, 6) * sqrt_info(7, 9) + sqrt_info(8, 6) * sqrt_info(8, 9) +
                     sqrt_info(9, 6) * sqrt_info(9, 9);
    _hessian(10, 6) = sqrt_info(0, 10) * sqrt_info(0, 6) + sqrt_info(1, 10) * sqrt_info(1, 6) +
                      sqrt_info(10, 10) * sqrt_info(10, 6) + sqrt_info(2, 10) * sqrt_info(2, 6) +
                      sqrt_info(3, 10) * sqrt_info(3, 6) + sqrt_info(4, 10) * sqrt_info(4, 6) +
                      sqrt_info(5, 10) * sqrt_info(5, 6) + sqrt_info(6, 10) * sqrt_info(6, 6) +
                      sqrt_info(7, 10) * sqrt_info(7, 6) + sqrt_info(8, 10) * sqrt_info(8, 6) +
                      sqrt_info(9, 10) * sqrt_info(9, 6);
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(sqrt_info(0, 7), Scalar(2)) + std::pow(sqrt_info(1, 7), Scalar(2)) +
                     std::pow(sqrt_info(10, 7), Scalar(2)) + std::pow(sqrt_info(2, 7), Scalar(2)) +
                     std::pow(sqrt_info(3, 7), Scalar(2)) + std::pow(sqrt_info(4, 7), Scalar(2)) +
                     std::pow(sqrt_info(5, 7), Scalar(2)) + std::pow(sqrt_info(6, 7), Scalar(2)) +
                     std::pow(sqrt_info(7, 7), Scalar(2)) + std::pow(sqrt_info(8, 7), Scalar(2)) +
                     std::pow(sqrt_info(9, 7), Scalar(2));
    _hessian(8, 7) = sqrt_info(0, 7) * sqrt_info(0, 8) + sqrt_info(1, 7) * sqrt_info(1, 8) +
                     sqrt_info(10, 7) * sqrt_info(10, 8) + sqrt_info(2, 7) * sqrt_info(2, 8) +
                     sqrt_info(3, 7) * sqrt_info(3, 8) + sqrt_info(4, 7) * sqrt_info(4, 8) +
                     sqrt_info(5, 7) * sqrt_info(5, 8) + sqrt_info(6, 7) * sqrt_info(6, 8) +
                     sqrt_info(7, 7) * sqrt_info(7, 8) + sqrt_info(8, 7) * sqrt_info(8, 8) +
                     sqrt_info(9, 7) * sqrt_info(9, 8);
    _hessian(9, 7) = sqrt_info(0, 7) * sqrt_info(0, 9) + sqrt_info(1, 7) * sqrt_info(1, 9) +
                     sqrt_info(10, 7) * sqrt_info(10, 9) + sqrt_info(2, 7) * sqrt_info(2, 9) +
                     sqrt_info(3, 7) * sqrt_info(3, 9) + sqrt_info(4, 7) * sqrt_info(4, 9) +
                     sqrt_info(5, 7) * sqrt_info(5, 9) + sqrt_info(6, 7) * sqrt_info(6, 9) +
                     sqrt_info(7, 7) * sqrt_info(7, 9) + sqrt_info(8, 7) * sqrt_info(8, 9) +
                     sqrt_info(9, 7) * sqrt_info(9, 9);
    _hessian(10, 7) = sqrt_info(0, 10) * sqrt_info(0, 7) + sqrt_info(1, 10) * sqrt_info(1, 7) +
                      sqrt_info(10, 10) * sqrt_info(10, 7) + sqrt_info(2, 10) * sqrt_info(2, 7) +
                      sqrt_info(3, 10) * sqrt_info(3, 7) + sqrt_info(4, 10) * sqrt_info(4, 7) +
                      sqrt_info(5, 10) * sqrt_info(5, 7) + sqrt_info(6, 10) * sqrt_info(6, 7) +
                      sqrt_info(7, 10) * sqrt_info(7, 7) + sqrt_info(8, 10) * sqrt_info(8, 7) +
                      sqrt_info(9, 10) * sqrt_info(9, 7);
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(sqrt_info(0, 8), Scalar(2)) + std::pow(sqrt_info(1, 8), Scalar(2)) +
                     std::pow(sqrt_info(10, 8), Scalar(2)) + std::pow(sqrt_info(2, 8), Scalar(2)) +
                     std::pow(sqrt_info(3, 8), Scalar(2)) + std::pow(sqrt_info(4, 8), Scalar(2)) +
                     std::pow(sqrt_info(5, 8), Scalar(2)) + std::pow(sqrt_info(6, 8), Scalar(2)) +
                     std::pow(sqrt_info(7, 8), Scalar(2)) + std::pow(sqrt_info(8, 8), Scalar(2)) +
                     std::pow(sqrt_info(9, 8), Scalar(2));
    _hessian(9, 8) = sqrt_info(0, 8) * sqrt_info(0, 9) + sqrt_info(1, 8) * sqrt_info(1, 9) +
                     sqrt_info(10, 8) * sqrt_info(10, 9) + sqrt_info(2, 8) * sqrt_info(2, 9) +
                     sqrt_info(3, 8) * sqrt_info(3, 9) + sqrt_info(4, 8) * sqrt_info(4, 9) +
                     sqrt_info(5, 8) * sqrt_info(5, 9) + sqrt_info(6, 8) * sqrt_info(6, 9) +
                     sqrt_info(7, 8) * sqrt_info(7, 9) + sqrt_info(8, 8) * sqrt_info(8, 9) +
                     sqrt_info(9, 8) * sqrt_info(9, 9);
    _hessian(10, 8) = sqrt_info(0, 10) * sqrt_info(0, 8) + sqrt_info(1, 10) * sqrt_info(1, 8) +
                      sqrt_info(10, 10) * sqrt_info(10, 8) + sqrt_info(2, 10) * sqrt_info(2, 8) +
                      sqrt_info(3, 10) * sqrt_info(3, 8) + sqrt_info(4, 10) * sqrt_info(4, 8) +
                      sqrt_info(5, 10) * sqrt_info(5, 8) + sqrt_info(6, 10) * sqrt_info(6, 8) +
                      sqrt_info(7, 10) * sqrt_info(7, 8) + sqrt_info(8, 10) * sqrt_info(8, 8) +
                      sqrt_info(9, 10) * sqrt_info(9, 8);
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(sqrt_info(0, 9), Scalar(2)) + std::pow(sqrt_info(1, 9), Scalar(2)) +
                     std::pow(sqrt_info(10, 9), Scalar(2)) + std::pow(sqrt_info(2, 9), Scalar(2)) +
                     std::pow(sqrt_info(3, 9), Scalar(2)) + std::pow(sqrt_info(4, 9), Scalar(2)) +
                     std::pow(sqrt_info(5, 9), Scalar(2)) + std::pow(sqrt_info(6, 9), Scalar(2)) +
                     std::pow(sqrt_info(7, 9), Scalar(2)) + std::pow(sqrt_info(8, 9), Scalar(2)) +
                     std::pow(sqrt_info(9, 9), Scalar(2));
    _hessian(10, 9) = sqrt_info(0, 10) * sqrt_info(0, 9) + sqrt_info(1, 10) * sqrt_info(1, 9) +
                      sqrt_info(10, 10) * sqrt_info(10, 9) + sqrt_info(2, 10) * sqrt_info(2, 9) +
                      sqrt_info(3, 10) * sqrt_info(3, 9) + sqrt_info(4, 10) * sqrt_info(4, 9) +
                      sqrt_info(5, 10) * sqrt_info(5, 9) + sqrt_info(6, 10) * sqrt_info(6, 9) +
                      sqrt_info(7, 10) * sqrt_info(7, 9) + sqrt_info(8, 10) * sqrt_info(8, 9) +
                      sqrt_info(9, 10) * sqrt_info(9, 9);
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) =
        std::pow(sqrt_info(0, 10), Scalar(2)) + std::pow(sqrt_info(1, 10), Scalar(2)) +
        std::pow(sqrt_info(10, 10), Scalar(2)) + std::pow(sqrt_info(2, 10), Scalar(2)) +
        std::pow(sqrt_info(3, 10), Scalar(2)) + std::pow(sqrt_info(4, 10), Scalar(2)) +
        std::pow(sqrt_info(5, 10), Scalar(2)) + std::pow(sqrt_info(6, 10), Scalar(2)) +
        std::pow(sqrt_info(7, 10), Scalar(2)) + std::pow(sqrt_info(8, 10), Scalar(2)) +
        std::pow(sqrt_info(9, 10), Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 11, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp11 * sqrt_info(0, 0) + _tmp12 * sqrt_info(1, 0) + _tmp13 * sqrt_info(2, 0) +
                 _tmp14 * sqrt_info(3, 0) + _tmp15 * sqrt_info(4, 0) + _tmp16 * sqrt_info(5, 0) +
                 _tmp17 * sqrt_info(6, 0) + _tmp18 * sqrt_info(7, 0) + _tmp19 * sqrt_info(8, 0) +
                 _tmp20 * sqrt_info(9, 0) + _tmp21 * sqrt_info(10, 0);
    _rhs(1, 0) = _tmp11 * sqrt_info(0, 1) + _tmp12 * sqrt_info(1, 1) + _tmp13 * sqrt_info(2, 1) +
                 _tmp14 * sqrt_info(3, 1) + _tmp15 * sqrt_info(4, 1) + _tmp16 * sqrt_info(5, 1) +
                 _tmp17 * sqrt_info(6, 1) + _tmp18 * sqrt_info(7, 1) + _tmp19 * sqrt_info(8, 1) +
                 _tmp20 * sqrt_info(9, 1) + _tmp21 * sqrt_info(10, 1);
    _rhs(2, 0) = _tmp11 * sqrt_info(0, 2) + _tmp12 * sqrt_info(1, 2) + _tmp13 * sqrt_info(2, 2) +
                 _tmp14 * sqrt_info(3, 2) + _tmp15 * sqrt_info(4, 2) + _tmp16 * sqrt_info(5, 2) +
                 _tmp17 * sqrt_info(6, 2) + _tmp18 * sqrt_info(7, 2) + _tmp19 * sqrt_info(8, 2) +
                 _tmp20 * sqrt_info(9, 2) + _tmp21 * sqrt_info(10, 2);
    _rhs(3, 0) = _tmp11 * sqrt_info(0, 3) + _tmp12 * sqrt_info(1, 3) + _tmp13 * sqrt_info(2, 3) +
                 _tmp14 * sqrt_info(3, 3) + _tmp15 * sqrt_info(4, 3) + _tmp16 * sqrt_info(5, 3) +
                 _tmp17 * sqrt_info(6, 3) + _tmp18 * sqrt_info(7, 3) + _tmp19 * sqrt_info(8, 3) +
                 _tmp20 * sqrt_info(9, 3) + _tmp21 * sqrt_info(10, 3);
    _rhs(4, 0) = _tmp11 * sqrt_info(0, 4) + _tmp12 * sqrt_info(1, 4) + _tmp13 * sqrt_info(2, 4) +
                 _tmp14 * sqrt_info(3, 4) + _tmp15 * sqrt_info(4, 4) + _tmp16 * sqrt_info(5, 4) +
                 _tmp17 * sqrt_info(6, 4) + _tmp18 * sqrt_info(7, 4) + _tmp19 * sqrt_info(8, 4) +
                 _tmp20 * sqrt_info(9, 4) + _tmp21 * sqrt_info(10, 4);
    _rhs(5, 0) = _tmp11 * sqrt_info(0, 5) + _tmp12 * sqrt_info(1, 5) + _tmp13 * sqrt_info(2, 5) +
                 _tmp14 * sqrt_info(3, 5) + _tmp15 * sqrt_info(4, 5) + _tmp16 * sqrt_info(5, 5) +
                 _tmp17 * sqrt_info(6, 5) + _tmp18 * sqrt_info(7, 5) + _tmp19 * sqrt_info(8, 5) +
                 _tmp20 * sqrt_info(9, 5) + _tmp21 * sqrt_info(10, 5);
    _rhs(6, 0) = _tmp11 * sqrt_info(0, 6) + _tmp12 * sqrt_info(1, 6) + _tmp13 * sqrt_info(2, 6) +
                 _tmp14 * sqrt_info(3, 6) + _tmp15 * sqrt_info(4, 6) + _tmp16 * sqrt_info(5, 6) +
                 _tmp17 * sqrt_info(6, 6) + _tmp18 * sqrt_info(7, 6) + _tmp19 * sqrt_info(8, 6) +
                 _tmp20 * sqrt_info(9, 6) + _tmp21 * sqrt_info(10, 6);
    _rhs(7, 0) = _tmp11 * sqrt_info(0, 7) + _tmp12 * sqrt_info(1, 7) + _tmp13 * sqrt_info(2, 7) +
                 _tmp14 * sqrt_info(3, 7) + _tmp15 * sqrt_info(4, 7) + _tmp16 * sqrt_info(5, 7) +
                 _tmp17 * sqrt_info(6, 7) + _tmp18 * sqrt_info(7, 7) + _tmp19 * sqrt_info(8, 7) +
                 _tmp20 * sqrt_info(9, 7) + _tmp21 * sqrt_info(10, 7);
    _rhs(8, 0) = _tmp11 * sqrt_info(0, 8) + _tmp12 * sqrt_info(1, 8) + _tmp13 * sqrt_info(2, 8) +
                 _tmp14 * sqrt_info(3, 8) + _tmp15 * sqrt_info(4, 8) + _tmp16 * sqrt_info(5, 8) +
                 _tmp17 * sqrt_info(6, 8) + _tmp18 * sqrt_info(7, 8) + _tmp19 * sqrt_info(8, 8) +
                 _tmp20 * sqrt_info(9, 8) + _tmp21 * sqrt_info(10, 8);
    _rhs(9, 0) = _tmp11 * sqrt_info(0, 9) + _tmp12 * sqrt_info(1, 9) + _tmp13 * sqrt_info(2, 9) +
                 _tmp14 * sqrt_info(3, 9) + _tmp15 * sqrt_info(4, 9) + _tmp16 * sqrt_info(5, 9) +
                 _tmp17 * sqrt_info(6, 9) + _tmp18 * sqrt_info(7, 9) + _tmp19 * sqrt_info(8, 9) +
                 _tmp20 * sqrt_info(9, 9) + _tmp21 * sqrt_info(10, 9);
    _rhs(10, 0) =
        _tmp11 * sqrt_info(0, 10) + _tmp12 * sqrt_info(1, 10) + _tmp13 * sqrt_info(2, 10) +
        _tmp14 * sqrt_info(3, 10) + _tmp15 * sqrt_info(4, 10) + _tmp16 * sqrt_info(5, 10) +
        _tmp17 * sqrt_info(6, 10) + _tmp18 * sqrt_info(7, 10) + _tmp19 * sqrt_info(8, 10) +
        _tmp20 * sqrt_info(9, 10) + _tmp21 * sqrt_info(10, 10);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
