// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x3) jacobian of res wrt arg value (3)
 *     hessian: (3x3) Gauss-Newton hessian for arg value (3)
 *     rhs: (3x1) Gauss-Newton rhs for arg value (3)
 */
template <typename Scalar>
void PriorFactorRot3(const sym::Rot3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                     const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                     Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const jacobian = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const hessian = nullptr,
                     Eigen::Matrix<Scalar, 3, 1>* const rhs = nullptr) {
  // Total ops: 312

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (67)
  const Scalar _tmp0 = -_prior[0] * _value[3] - _prior[1] * _value[2] + _prior[2] * _value[1] +
                       _prior[3] * _value[0];
  const Scalar _tmp1 =
      _prior[0] * _value[0] + _prior[1] * _value[1] + _prior[2] * _value[2] + _prior[3] * _value[3];
  const Scalar _tmp2 = (((_tmp1) > 0) - ((_tmp1) < 0));
  const Scalar _tmp3 = std::min<Scalar>(0, _tmp2) + Scalar(1) / Scalar(2);
  const Scalar _tmp4 = std::fabs(_tmp1);
  const Scalar _tmp5 = epsilon - 1;
  const Scalar _tmp6 = std::min<Scalar>(_tmp4, -_tmp5);
  const Scalar _tmp7 = std::pow(_tmp6, Scalar(2)) - 1;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = std::acos(_tmp6);
  const Scalar _tmp10 = _tmp9 / std::sqrt(_tmp8);
  const Scalar _tmp11 = _tmp10 * _tmp3;
  const Scalar _tmp12 = _tmp0 * _tmp11;
  const Scalar _tmp13 = -_prior[0] * _value[1] + _prior[1] * _value[0] - _prior[2] * _value[3] +
                        _prior[3] * _value[2];
  const Scalar _tmp14 = _tmp11 * _tmp13;
  const Scalar _tmp15 =
      _prior[0] * _value[2] - _prior[1] * _value[3] - _prior[2] * _value[0] + _prior[3] * _value[1];
  const Scalar _tmp16 = _tmp3 * sqrt_info(0, 1);
  const Scalar _tmp17 = _tmp15 * _tmp16;
  const Scalar _tmp18 =
      4 * _tmp10 * _tmp17 + 4 * _tmp12 * sqrt_info(0, 0) + 4 * _tmp14 * sqrt_info(0, 2);
  const Scalar _tmp19 = _tmp11 * _tmp15;
  const Scalar _tmp20 =
      4 * _tmp12 * sqrt_info(1, 0) + 4 * _tmp14 * sqrt_info(1, 2) + 4 * _tmp19 * sqrt_info(1, 1);
  const Scalar _tmp21 =
      4 * _tmp12 * sqrt_info(2, 0) + 4 * _tmp14 * sqrt_info(2, 2) + 4 * _tmp19 * sqrt_info(2, 1);
  const Scalar _tmp22 = _tmp10 * _tmp16;
  const Scalar _tmp23 = 2 * _tmp22;
  const Scalar _tmp24 = _tmp2 * ((((_tmp4 + _tmp5) > 0) - ((_tmp4 + _tmp5) < 0)) - 1);
  const Scalar _tmp25 = _tmp24 * _tmp6 * _tmp9 / (_tmp8 * std::sqrt(_tmp8));
  const Scalar _tmp26 = _tmp25 * _tmp3;
  const Scalar _tmp27 = _tmp13 * _tmp26;
  const Scalar _tmp28 = _tmp0 * _tmp27;
  const Scalar _tmp29 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp30 = _tmp24 / _tmp7;
  const Scalar _tmp31 = _tmp3 * _tmp30;
  const Scalar _tmp32 = _tmp29 * _tmp31;
  const Scalar _tmp33 = _tmp26 * _tmp29;
  const Scalar _tmp34 = _tmp17 * _tmp30;
  const Scalar _tmp35 = _tmp17 * _tmp25;
  const Scalar _tmp36 = 2 * _tmp19;
  const Scalar _tmp37 = 2 * _tmp1;
  const Scalar _tmp38 = _tmp11 * _tmp37;
  const Scalar _tmp39 = _tmp13 * _tmp31;
  const Scalar _tmp40 = _tmp0 * _tmp39;
  const Scalar _tmp41 = _tmp0 * _tmp34 + _tmp0 * _tmp35 + _tmp13 * _tmp23 +
                        _tmp28 * sqrt_info(0, 2) + _tmp32 * sqrt_info(0, 0) +
                        _tmp33 * sqrt_info(0, 0) - _tmp36 * sqrt_info(0, 2) +
                        _tmp38 * sqrt_info(0, 0) + _tmp40 * sqrt_info(0, 2);
  const Scalar _tmp42 = 2 * _tmp14;
  const Scalar _tmp43 = _tmp0 * _tmp31;
  const Scalar _tmp44 = _tmp15 * sqrt_info(1, 1);
  const Scalar _tmp45 = _tmp0 * _tmp26;
  const Scalar _tmp46 = _tmp28 * sqrt_info(1, 2) + _tmp32 * sqrt_info(1, 0) +
                        _tmp33 * sqrt_info(1, 0) - _tmp36 * sqrt_info(1, 2) +
                        _tmp38 * sqrt_info(1, 0) + _tmp40 * sqrt_info(1, 2) +
                        _tmp42 * sqrt_info(1, 1) + _tmp43 * _tmp44 + _tmp44 * _tmp45;
  const Scalar _tmp47 = _tmp15 * sqrt_info(2, 1);
  const Scalar _tmp48 = _tmp28 * sqrt_info(2, 2) + _tmp32 * sqrt_info(2, 0) +
                        _tmp33 * sqrt_info(2, 0) - _tmp36 * sqrt_info(2, 2) +
                        _tmp38 * sqrt_info(2, 0) + _tmp40 * sqrt_info(2, 2) +
                        _tmp42 * sqrt_info(2, 1) + _tmp43 * _tmp47 + _tmp45 * _tmp47;
  const Scalar _tmp49 = 2 * _tmp12;
  const Scalar _tmp50 = _tmp15 * _tmp39;
  const Scalar _tmp51 = std::pow(_tmp15, Scalar(2));
  const Scalar _tmp52 = _tmp15 * _tmp27;
  const Scalar _tmp53 = _tmp15 * _tmp43;
  const Scalar _tmp54 = _tmp15 * _tmp45;
  const Scalar _tmp55 = _tmp30 * _tmp51;
  const Scalar _tmp56 = _tmp16 * _tmp25 * _tmp51 + _tmp16 * _tmp55 + _tmp22 * _tmp37 -
                        _tmp42 * sqrt_info(0, 0) + _tmp49 * sqrt_info(0, 2) +
                        _tmp50 * sqrt_info(0, 2) + _tmp52 * sqrt_info(0, 2) +
                        _tmp53 * sqrt_info(0, 0) + _tmp54 * sqrt_info(0, 0);
  const Scalar _tmp57 = _tmp26 * _tmp51;
  const Scalar _tmp58 = _tmp3 * _tmp55;
  const Scalar _tmp59 =
      _tmp38 * sqrt_info(1, 1) - _tmp42 * sqrt_info(1, 0) + _tmp49 * sqrt_info(1, 2) +
      _tmp50 * sqrt_info(1, 2) + _tmp52 * sqrt_info(1, 2) + _tmp53 * sqrt_info(1, 0) +
      _tmp54 * sqrt_info(1, 0) + _tmp57 * sqrt_info(1, 1) + _tmp58 * sqrt_info(1, 1);
  const Scalar _tmp60 =
      _tmp38 * sqrt_info(2, 1) - _tmp42 * sqrt_info(2, 0) + _tmp49 * sqrt_info(2, 2) +
      _tmp50 * sqrt_info(2, 2) + _tmp52 * sqrt_info(2, 2) + _tmp53 * sqrt_info(2, 0) +
      _tmp54 * sqrt_info(2, 0) + _tmp57 * sqrt_info(2, 1) + _tmp58 * sqrt_info(2, 1);
  const Scalar _tmp61 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp62 = _tmp26 * _tmp61;
  const Scalar _tmp63 = _tmp31 * _tmp61;
  const Scalar _tmp64 = -_tmp0 * _tmp23 + _tmp13 * _tmp34 + _tmp13 * _tmp35 +
                        _tmp28 * sqrt_info(0, 0) + _tmp36 * sqrt_info(0, 0) +
                        _tmp38 * sqrt_info(0, 2) + _tmp40 * sqrt_info(0, 0) +
                        _tmp62 * sqrt_info(0, 2) + _tmp63 * sqrt_info(0, 2);
  const Scalar _tmp65 = _tmp27 * _tmp44 + _tmp28 * sqrt_info(1, 0) + _tmp36 * sqrt_info(1, 0) +
                        _tmp38 * sqrt_info(1, 2) + _tmp40 * sqrt_info(1, 0) -
                        _tmp49 * sqrt_info(1, 1) + _tmp50 * sqrt_info(1, 1) +
                        _tmp62 * sqrt_info(1, 2) + _tmp63 * sqrt_info(1, 2);
  const Scalar _tmp66 = _tmp27 * _tmp47 + _tmp28 * sqrt_info(2, 0) + _tmp36 * sqrt_info(2, 0) +
                        _tmp38 * sqrt_info(2, 2) + _tmp39 * _tmp47 + _tmp40 * sqrt_info(2, 0) -
                        _tmp49 * sqrt_info(2, 1) + _tmp62 * sqrt_info(2, 2) +
                        _tmp63 * sqrt_info(2, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp18;
    _res(1, 0) = _tmp20;
    _res(2, 0) = _tmp21;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp41;
    _jacobian(1, 0) = _tmp46;
    _jacobian(2, 0) = _tmp48;
    _jacobian(0, 1) = _tmp56;
    _jacobian(1, 1) = _tmp59;
    _jacobian(2, 1) = _tmp60;
    _jacobian(0, 2) = _tmp64;
    _jacobian(1, 2) = _tmp65;
    _jacobian(2, 2) = _tmp66;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp41, Scalar(2)) + std::pow(_tmp46, Scalar(2)) + std::pow(_tmp48, Scalar(2));
    _hessian(1, 0) = _tmp41 * _tmp56 + _tmp46 * _tmp59 + _tmp48 * _tmp60;
    _hessian(2, 0) = _tmp41 * _tmp64 + _tmp46 * _tmp65 + _tmp48 * _tmp66;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp56, Scalar(2)) + std::pow(_tmp59, Scalar(2)) + std::pow(_tmp60, Scalar(2));
    _hessian(2, 1) = _tmp56 * _tmp64 + _tmp59 * _tmp65 + _tmp60 * _tmp66;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp64, Scalar(2)) + std::pow(_tmp65, Scalar(2)) + std::pow(_tmp66, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp18 * _tmp41 + _tmp20 * _tmp46 + _tmp21 * _tmp48;
    _rhs(1, 0) = _tmp18 * _tmp56 + _tmp20 * _tmp59 + _tmp21 * _tmp60;
    _rhs(2, 0) = _tmp18 * _tmp64 + _tmp20 * _tmp65 + _tmp21 * _tmp66;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
