// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/atan_camera_cal.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (5x10) jacobian of res wrt args a (5), b (5)
 *     hessian: (10x10) Gauss-Newton hessian for args a (5), b (5)
 *     rhs: (10x1) Gauss-Newton rhs for args a (5), b (5)
 */
template <typename Scalar>
void BetweenFactorAtanCameraCal(const sym::ATANCameraCal<Scalar>& a,
                                const sym::ATANCameraCal<Scalar>& b,
                                const sym::ATANCameraCal<Scalar>& a_T_b,
                                const Eigen::Matrix<Scalar, 5, 5>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 5, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 5, 10>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 10, 10>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 10, 1>* const rhs = nullptr) {
  // Total ops: 360

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 5, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 5, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 5, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (135)
  const Scalar _tmp0 = -_a[4] - _a_T_b[4] + _b[4];
  const Scalar _tmp1 = -_a[3] - _a_T_b[3] + _b[3];
  const Scalar _tmp2 = -_a[2] - _a_T_b[2] + _b[2];
  const Scalar _tmp3 = -_a[0] - _a_T_b[0] + _b[0];
  const Scalar _tmp4 = -_a[1] - _a_T_b[1] + _b[1];
  const Scalar _tmp5 = _tmp0 * sqrt_info(0, 4) + _tmp1 * sqrt_info(0, 3) + _tmp2 * sqrt_info(0, 2) +
                       _tmp3 * sqrt_info(0, 0) + _tmp4 * sqrt_info(0, 1);
  const Scalar _tmp6 = _tmp0 * sqrt_info(1, 4) + _tmp1 * sqrt_info(1, 3) + _tmp2 * sqrt_info(1, 2) +
                       _tmp3 * sqrt_info(1, 0) + _tmp4 * sqrt_info(1, 1);
  const Scalar _tmp7 = _tmp0 * sqrt_info(2, 4) + _tmp1 * sqrt_info(2, 3) + _tmp2 * sqrt_info(2, 2) +
                       _tmp3 * sqrt_info(2, 0) + _tmp4 * sqrt_info(2, 1);
  const Scalar _tmp8 = _tmp0 * sqrt_info(3, 4) + _tmp1 * sqrt_info(3, 3) + _tmp2 * sqrt_info(3, 2) +
                       _tmp3 * sqrt_info(3, 0) + _tmp4 * sqrt_info(3, 1);
  const Scalar _tmp9 = _tmp0 * sqrt_info(4, 4) + _tmp1 * sqrt_info(4, 3) + _tmp2 * sqrt_info(4, 2) +
                       _tmp3 * sqrt_info(4, 0) + _tmp4 * sqrt_info(4, 1);
  const Scalar _tmp10 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp11 = std::pow(sqrt_info(2, 0), Scalar(2));
  const Scalar _tmp12 = std::pow(sqrt_info(3, 0), Scalar(2));
  const Scalar _tmp13 = std::pow(sqrt_info(4, 0), Scalar(2));
  const Scalar _tmp14 = std::pow(sqrt_info(1, 0), Scalar(2));
  const Scalar _tmp15 = _tmp10 + _tmp11 + _tmp12 + _tmp13 + _tmp14;
  const Scalar _tmp16 = sqrt_info(3, 0) * sqrt_info(3, 1);
  const Scalar _tmp17 = sqrt_info(1, 0) * sqrt_info(1, 1);
  const Scalar _tmp18 = sqrt_info(2, 0) * sqrt_info(2, 1);
  const Scalar _tmp19 = sqrt_info(0, 0) * sqrt_info(0, 1);
  const Scalar _tmp20 = sqrt_info(4, 0) * sqrt_info(4, 1);
  const Scalar _tmp21 = _tmp16 + _tmp17 + _tmp18 + _tmp19 + _tmp20;
  const Scalar _tmp22 = sqrt_info(3, 0) * sqrt_info(3, 2);
  const Scalar _tmp23 = sqrt_info(1, 0) * sqrt_info(1, 2);
  const Scalar _tmp24 = sqrt_info(2, 0) * sqrt_info(2, 2);
  const Scalar _tmp25 = sqrt_info(0, 0) * sqrt_info(0, 2);
  const Scalar _tmp26 = sqrt_info(4, 0) * sqrt_info(4, 2);
  const Scalar _tmp27 = _tmp22 + _tmp23 + _tmp24 + _tmp25 + _tmp26;
  const Scalar _tmp28 = sqrt_info(3, 0) * sqrt_info(3, 3);
  const Scalar _tmp29 = sqrt_info(1, 0) * sqrt_info(1, 3);
  const Scalar _tmp30 = sqrt_info(2, 0) * sqrt_info(2, 3);
  const Scalar _tmp31 = sqrt_info(0, 0) * sqrt_info(0, 3);
  const Scalar _tmp32 = sqrt_info(4, 0) * sqrt_info(4, 3);
  const Scalar _tmp33 = _tmp28 + _tmp29 + _tmp30 + _tmp31 + _tmp32;
  const Scalar _tmp34 = sqrt_info(3, 0) * sqrt_info(3, 4);
  const Scalar _tmp35 = sqrt_info(1, 0) * sqrt_info(1, 4);
  const Scalar _tmp36 = sqrt_info(2, 0) * sqrt_info(2, 4);
  const Scalar _tmp37 = sqrt_info(0, 0) * sqrt_info(0, 4);
  const Scalar _tmp38 = sqrt_info(4, 0) * sqrt_info(4, 4);
  const Scalar _tmp39 = _tmp34 + _tmp35 + _tmp36 + _tmp37 + _tmp38;
  const Scalar _tmp40 = -_tmp16 - _tmp17 - _tmp18 - _tmp19 - _tmp20;
  const Scalar _tmp41 = -_tmp22 - _tmp23 - _tmp24 - _tmp25 - _tmp26;
  const Scalar _tmp42 = -_tmp28 - _tmp29 - _tmp30 - _tmp31 - _tmp32;
  const Scalar _tmp43 = -_tmp34 - _tmp35 - _tmp36 - _tmp37 - _tmp38;
  const Scalar _tmp44 = std::pow(sqrt_info(0, 1), Scalar(2));
  const Scalar _tmp45 = std::pow(sqrt_info(2, 1), Scalar(2));
  const Scalar _tmp46 = std::pow(sqrt_info(3, 1), Scalar(2));
  const Scalar _tmp47 = std::pow(sqrt_info(4, 1), Scalar(2));
  const Scalar _tmp48 = std::pow(sqrt_info(1, 1), Scalar(2));
  const Scalar _tmp49 = _tmp44 + _tmp45 + _tmp46 + _tmp47 + _tmp48;
  const Scalar _tmp50 = sqrt_info(3, 1) * sqrt_info(3, 2);
  const Scalar _tmp51 = sqrt_info(1, 1) * sqrt_info(1, 2);
  const Scalar _tmp52 = sqrt_info(2, 1) * sqrt_info(2, 2);
  const Scalar _tmp53 = sqrt_info(0, 1) * sqrt_info(0, 2);
  const Scalar _tmp54 = sqrt_info(4, 1) * sqrt_info(4, 2);
  const Scalar _tmp55 = _tmp50 + _tmp51 + _tmp52 + _tmp53 + _tmp54;
  const Scalar _tmp56 = sqrt_info(3, 1) * sqrt_info(3, 3);
  const Scalar _tmp57 = sqrt_info(1, 1) * sqrt_info(1, 3);
  const Scalar _tmp58 = sqrt_info(2, 1) * sqrt_info(2, 3);
  const Scalar _tmp59 = sqrt_info(0, 1) * sqrt_info(0, 3);
  const Scalar _tmp60 = sqrt_info(4, 1) * sqrt_info(4, 3);
  const Scalar _tmp61 = _tmp56 + _tmp57 + _tmp58 + _tmp59 + _tmp60;
  const Scalar _tmp62 = sqrt_info(3, 1) * sqrt_info(3, 4);
  const Scalar _tmp63 = sqrt_info(1, 1) * sqrt_info(1, 4);
  const Scalar _tmp64 = sqrt_info(2, 1) * sqrt_info(2, 4);
  const Scalar _tmp65 = sqrt_info(0, 1) * sqrt_info(0, 4);
  const Scalar _tmp66 = sqrt_info(4, 1) * sqrt_info(4, 4);
  const Scalar _tmp67 = _tmp62 + _tmp63 + _tmp64 + _tmp65 + _tmp66;
  const Scalar _tmp68 = -_tmp50 - _tmp51 - _tmp52 - _tmp53 - _tmp54;
  const Scalar _tmp69 = -_tmp56 - _tmp57 - _tmp58 - _tmp59 - _tmp60;
  const Scalar _tmp70 = -_tmp62 - _tmp63 - _tmp64 - _tmp65 - _tmp66;
  const Scalar _tmp71 = std::pow(sqrt_info(0, 2), Scalar(2));
  const Scalar _tmp72 = std::pow(sqrt_info(2, 2), Scalar(2));
  const Scalar _tmp73 = std::pow(sqrt_info(3, 2), Scalar(2));
  const Scalar _tmp74 = std::pow(sqrt_info(4, 2), Scalar(2));
  const Scalar _tmp75 = std::pow(sqrt_info(1, 2), Scalar(2));
  const Scalar _tmp76 = _tmp71 + _tmp72 + _tmp73 + _tmp74 + _tmp75;
  const Scalar _tmp77 = sqrt_info(3, 2) * sqrt_info(3, 3);
  const Scalar _tmp78 = sqrt_info(1, 2) * sqrt_info(1, 3);
  const Scalar _tmp79 = sqrt_info(2, 2) * sqrt_info(2, 3);
  const Scalar _tmp80 = sqrt_info(0, 2) * sqrt_info(0, 3);
  const Scalar _tmp81 = sqrt_info(4, 2) * sqrt_info(4, 3);
  const Scalar _tmp82 = _tmp77 + _tmp78 + _tmp79 + _tmp80 + _tmp81;
  const Scalar _tmp83 = sqrt_info(3, 2) * sqrt_info(3, 4);
  const Scalar _tmp84 = sqrt_info(1, 2) * sqrt_info(1, 4);
  const Scalar _tmp85 = sqrt_info(2, 2) * sqrt_info(2, 4);
  const Scalar _tmp86 = sqrt_info(0, 2) * sqrt_info(0, 4);
  const Scalar _tmp87 = sqrt_info(4, 2) * sqrt_info(4, 4);
  const Scalar _tmp88 = _tmp83 + _tmp84 + _tmp85 + _tmp86 + _tmp87;
  const Scalar _tmp89 = -_tmp77 - _tmp78 - _tmp79 - _tmp80 - _tmp81;
  const Scalar _tmp90 = -_tmp83 - _tmp84 - _tmp85 - _tmp86 - _tmp87;
  const Scalar _tmp91 = std::pow(sqrt_info(0, 3), Scalar(2));
  const Scalar _tmp92 = std::pow(sqrt_info(2, 3), Scalar(2));
  const Scalar _tmp93 = std::pow(sqrt_info(3, 3), Scalar(2));
  const Scalar _tmp94 = std::pow(sqrt_info(4, 3), Scalar(2));
  const Scalar _tmp95 = std::pow(sqrt_info(1, 3), Scalar(2));
  const Scalar _tmp96 = _tmp91 + _tmp92 + _tmp93 + _tmp94 + _tmp95;
  const Scalar _tmp97 = sqrt_info(3, 3) * sqrt_info(3, 4);
  const Scalar _tmp98 = sqrt_info(1, 3) * sqrt_info(1, 4);
  const Scalar _tmp99 = sqrt_info(2, 3) * sqrt_info(2, 4);
  const Scalar _tmp100 = sqrt_info(0, 3) * sqrt_info(0, 4);
  const Scalar _tmp101 = sqrt_info(4, 3) * sqrt_info(4, 4);
  const Scalar _tmp102 = _tmp100 + _tmp101 + _tmp97 + _tmp98 + _tmp99;
  const Scalar _tmp103 = -_tmp100 - _tmp101 - _tmp97 - _tmp98 - _tmp99;
  const Scalar _tmp104 = std::pow(sqrt_info(0, 4), Scalar(2));
  const Scalar _tmp105 = std::pow(sqrt_info(2, 4), Scalar(2));
  const Scalar _tmp106 = std::pow(sqrt_info(3, 4), Scalar(2));
  const Scalar _tmp107 = std::pow(sqrt_info(4, 4), Scalar(2));
  const Scalar _tmp108 = std::pow(sqrt_info(1, 4), Scalar(2));
  const Scalar _tmp109 = _tmp104 + _tmp105 + _tmp106 + _tmp107 + _tmp108;
  const Scalar _tmp110 = _tmp7 * sqrt_info(2, 0);
  const Scalar _tmp111 = _tmp6 * sqrt_info(1, 0);
  const Scalar _tmp112 = _tmp5 * sqrt_info(0, 0);
  const Scalar _tmp113 = _tmp8 * sqrt_info(3, 0);
  const Scalar _tmp114 = _tmp9 * sqrt_info(4, 0);
  const Scalar _tmp115 = _tmp7 * sqrt_info(2, 1);
  const Scalar _tmp116 = _tmp6 * sqrt_info(1, 1);
  const Scalar _tmp117 = _tmp5 * sqrt_info(0, 1);
  const Scalar _tmp118 = _tmp8 * sqrt_info(3, 1);
  const Scalar _tmp119 = _tmp9 * sqrt_info(4, 1);
  const Scalar _tmp120 = _tmp7 * sqrt_info(2, 2);
  const Scalar _tmp121 = _tmp6 * sqrt_info(1, 2);
  const Scalar _tmp122 = _tmp5 * sqrt_info(0, 2);
  const Scalar _tmp123 = _tmp8 * sqrt_info(3, 2);
  const Scalar _tmp124 = _tmp9 * sqrt_info(4, 2);
  const Scalar _tmp125 = _tmp7 * sqrt_info(2, 3);
  const Scalar _tmp126 = _tmp6 * sqrt_info(1, 3);
  const Scalar _tmp127 = _tmp5 * sqrt_info(0, 3);
  const Scalar _tmp128 = _tmp8 * sqrt_info(3, 3);
  const Scalar _tmp129 = _tmp9 * sqrt_info(4, 3);
  const Scalar _tmp130 = _tmp7 * sqrt_info(2, 4);
  const Scalar _tmp131 = _tmp6 * sqrt_info(1, 4);
  const Scalar _tmp132 = _tmp5 * sqrt_info(0, 4);
  const Scalar _tmp133 = _tmp8 * sqrt_info(3, 4);
  const Scalar _tmp134 = _tmp9 * sqrt_info(4, 4);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 5, 1>& _res = (*res);

    _res(0, 0) = _tmp5;
    _res(1, 0) = _tmp6;
    _res(2, 0) = _tmp7;
    _res(3, 0) = _tmp8;
    _res(4, 0) = _tmp9;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 5, 10>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -sqrt_info(0, 0);
    _jacobian(1, 0) = -sqrt_info(1, 0);
    _jacobian(2, 0) = -sqrt_info(2, 0);
    _jacobian(3, 0) = -sqrt_info(3, 0);
    _jacobian(4, 0) = -sqrt_info(4, 0);
    _jacobian(0, 1) = -sqrt_info(0, 1);
    _jacobian(1, 1) = -sqrt_info(1, 1);
    _jacobian(2, 1) = -sqrt_info(2, 1);
    _jacobian(3, 1) = -sqrt_info(3, 1);
    _jacobian(4, 1) = -sqrt_info(4, 1);
    _jacobian(0, 2) = -sqrt_info(0, 2);
    _jacobian(1, 2) = -sqrt_info(1, 2);
    _jacobian(2, 2) = -sqrt_info(2, 2);
    _jacobian(3, 2) = -sqrt_info(3, 2);
    _jacobian(4, 2) = -sqrt_info(4, 2);
    _jacobian(0, 3) = -sqrt_info(0, 3);
    _jacobian(1, 3) = -sqrt_info(1, 3);
    _jacobian(2, 3) = -sqrt_info(2, 3);
    _jacobian(3, 3) = -sqrt_info(3, 3);
    _jacobian(4, 3) = -sqrt_info(4, 3);
    _jacobian(0, 4) = -sqrt_info(0, 4);
    _jacobian(1, 4) = -sqrt_info(1, 4);
    _jacobian(2, 4) = -sqrt_info(2, 4);
    _jacobian(3, 4) = -sqrt_info(3, 4);
    _jacobian(4, 4) = -sqrt_info(4, 4);
    _jacobian(0, 5) = sqrt_info(0, 0);
    _jacobian(1, 5) = sqrt_info(1, 0);
    _jacobian(2, 5) = sqrt_info(2, 0);
    _jacobian(3, 5) = sqrt_info(3, 0);
    _jacobian(4, 5) = sqrt_info(4, 0);
    _jacobian(0, 6) = sqrt_info(0, 1);
    _jacobian(1, 6) = sqrt_info(1, 1);
    _jacobian(2, 6) = sqrt_info(2, 1);
    _jacobian(3, 6) = sqrt_info(3, 1);
    _jacobian(4, 6) = sqrt_info(4, 1);
    _jacobian(0, 7) = sqrt_info(0, 2);
    _jacobian(1, 7) = sqrt_info(1, 2);
    _jacobian(2, 7) = sqrt_info(2, 2);
    _jacobian(3, 7) = sqrt_info(3, 2);
    _jacobian(4, 7) = sqrt_info(4, 2);
    _jacobian(0, 8) = sqrt_info(0, 3);
    _jacobian(1, 8) = sqrt_info(1, 3);
    _jacobian(2, 8) = sqrt_info(2, 3);
    _jacobian(3, 8) = sqrt_info(3, 3);
    _jacobian(4, 8) = sqrt_info(4, 3);
    _jacobian(0, 9) = sqrt_info(0, 4);
    _jacobian(1, 9) = sqrt_info(1, 4);
    _jacobian(2, 9) = sqrt_info(2, 4);
    _jacobian(3, 9) = sqrt_info(3, 4);
    _jacobian(4, 9) = sqrt_info(4, 4);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 10, 10>& _hessian = (*hessian);

    _hessian(0, 0) = _tmp15;
    _hessian(1, 0) = _tmp21;
    _hessian(2, 0) = _tmp27;
    _hessian(3, 0) = _tmp33;
    _hessian(4, 0) = _tmp39;
    _hessian(5, 0) = -_tmp10 - _tmp11 - _tmp12 - _tmp13 - _tmp14;
    _hessian(6, 0) = _tmp40;
    _hessian(7, 0) = _tmp41;
    _hessian(8, 0) = _tmp42;
    _hessian(9, 0) = _tmp43;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = _tmp49;
    _hessian(2, 1) = _tmp55;
    _hessian(3, 1) = _tmp61;
    _hessian(4, 1) = _tmp67;
    _hessian(5, 1) = _tmp40;
    _hessian(6, 1) = -_tmp44 - _tmp45 - _tmp46 - _tmp47 - _tmp48;
    _hessian(7, 1) = _tmp68;
    _hessian(8, 1) = _tmp69;
    _hessian(9, 1) = _tmp70;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = _tmp76;
    _hessian(3, 2) = _tmp82;
    _hessian(4, 2) = _tmp88;
    _hessian(5, 2) = _tmp41;
    _hessian(6, 2) = _tmp68;
    _hessian(7, 2) = -_tmp71 - _tmp72 - _tmp73 - _tmp74 - _tmp75;
    _hessian(8, 2) = _tmp89;
    _hessian(9, 2) = _tmp90;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = _tmp96;
    _hessian(4, 3) = _tmp102;
    _hessian(5, 3) = _tmp42;
    _hessian(6, 3) = _tmp69;
    _hessian(7, 3) = _tmp89;
    _hessian(8, 3) = -_tmp91 - _tmp92 - _tmp93 - _tmp94 - _tmp95;
    _hessian(9, 3) = _tmp103;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = _tmp109;
    _hessian(5, 4) = _tmp43;
    _hessian(6, 4) = _tmp70;
    _hessian(7, 4) = _tmp90;
    _hessian(8, 4) = _tmp103;
    _hessian(9, 4) = -_tmp104 - _tmp105 - _tmp106 - _tmp107 - _tmp108;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = _tmp15;
    _hessian(6, 5) = _tmp21;
    _hessian(7, 5) = _tmp27;
    _hessian(8, 5) = _tmp33;
    _hessian(9, 5) = _tmp39;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = _tmp49;
    _hessian(7, 6) = _tmp55;
    _hessian(8, 6) = _tmp61;
    _hessian(9, 6) = _tmp67;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = _tmp76;
    _hessian(8, 7) = _tmp82;
    _hessian(9, 7) = _tmp88;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = _tmp96;
    _hessian(9, 8) = _tmp102;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = _tmp109;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 10, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp110 - _tmp111 - _tmp112 - _tmp113 - _tmp114;
    _rhs(1, 0) = -_tmp115 - _tmp116 - _tmp117 - _tmp118 - _tmp119;
    _rhs(2, 0) = -_tmp120 - _tmp121 - _tmp122 - _tmp123 - _tmp124;
    _rhs(3, 0) = -_tmp125 - _tmp126 - _tmp127 - _tmp128 - _tmp129;
    _rhs(4, 0) = -_tmp130 - _tmp131 - _tmp132 - _tmp133 - _tmp134;
    _rhs(5, 0) = _tmp110 + _tmp111 + _tmp112 + _tmp113 + _tmp114;
    _rhs(6, 0) = _tmp115 + _tmp116 + _tmp117 + _tmp118 + _tmp119;
    _rhs(7, 0) = _tmp120 + _tmp121 + _tmp122 + _tmp123 + _tmp124;
    _rhs(8, 0) = _tmp125 + _tmp126 + _tmp127 + _tmp128 + _tmp129;
    _rhs(9, 0) = _tmp130 + _tmp131 + _tmp132 + _tmp133 + _tmp134;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
