// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (6x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3(const sym::Pose3<Scalar>& value, const sym::Pose3<Scalar>& prior,
                      const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
                      Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const jacobian = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                      Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 777

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _prior = prior.Data();

  // Intermediate terms (98)
  const Scalar _tmp0 =
      _prior[0] * _value[0] + _prior[1] * _value[1] + _prior[2] * _value[2] + _prior[3] * _value[3];
  const Scalar _tmp1 = std::fabs(_tmp0);
  const Scalar _tmp2 = epsilon - 1;
  const Scalar _tmp3 = std::min<Scalar>(_tmp1, -_tmp2);
  const Scalar _tmp4 = std::pow(_tmp3, Scalar(2)) - 1;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = std::acos(_tmp3);
  const Scalar _tmp7 = _tmp6 / std::sqrt(_tmp5);
  const Scalar _tmp8 = 4 * _tmp7;
  const Scalar _tmp9 = -_prior[0] * _value[2] + _prior[1] * _value[3] + _prior[2] * _value[0] -
                       _prior[3] * _value[1];
  const Scalar _tmp10 = (((_tmp0) > 0) - ((_tmp0) < 0));
  const Scalar _tmp11 = std::min<Scalar>(0, _tmp10) + Scalar(1) / Scalar(2);
  const Scalar _tmp12 = _tmp11 * sqrt_info(0, 1);
  const Scalar _tmp13 = _tmp12 * _tmp9;
  const Scalar _tmp14 = _prior[5] - _value[5];
  const Scalar _tmp15 = _prior[6] - _value[6];
  const Scalar _tmp16 = _prior[4] - _value[4];
  const Scalar _tmp17 = -_prior[0] * _value[3] - _prior[1] * _value[2] + _prior[2] * _value[1] +
                        _prior[3] * _value[0];
  const Scalar _tmp18 = _tmp11 * _tmp8;
  const Scalar _tmp19 = _tmp17 * _tmp18;
  const Scalar _tmp20 =
      _prior[0] * _value[1] - _prior[1] * _value[0] + _prior[2] * _value[3] - _prior[3] * _value[2];
  const Scalar _tmp21 = _tmp18 * _tmp20;
  const Scalar _tmp22 = -_tmp13 * _tmp8 - _tmp14 * sqrt_info(0, 4) - _tmp15 * sqrt_info(0, 5) -
                        _tmp16 * sqrt_info(0, 3) + _tmp19 * sqrt_info(0, 0) -
                        _tmp21 * sqrt_info(0, 2);
  const Scalar _tmp23 = _tmp8 * _tmp9;
  const Scalar _tmp24 = _tmp11 * _tmp23;
  const Scalar _tmp25 = -_tmp14 * sqrt_info(1, 4) - _tmp15 * sqrt_info(1, 5) -
                        _tmp16 * sqrt_info(1, 3) + _tmp19 * sqrt_info(1, 0) -
                        _tmp21 * sqrt_info(1, 2) - _tmp24 * sqrt_info(1, 1);
  const Scalar _tmp26 = _tmp11 * sqrt_info(2, 1);
  const Scalar _tmp27 = -_tmp14 * sqrt_info(2, 4) - _tmp15 * sqrt_info(2, 5) -
                        _tmp16 * sqrt_info(2, 3) + _tmp19 * sqrt_info(2, 0) -
                        _tmp21 * sqrt_info(2, 2) - _tmp23 * _tmp26;
  const Scalar _tmp28 = -_tmp14 * sqrt_info(3, 4) - _tmp15 * sqrt_info(3, 5) -
                        _tmp16 * sqrt_info(3, 3) + _tmp19 * sqrt_info(3, 0) -
                        _tmp21 * sqrt_info(3, 2) - _tmp24 * sqrt_info(3, 1);
  const Scalar _tmp29 = _tmp11 * sqrt_info(4, 0);
  const Scalar _tmp30 = _tmp17 * _tmp29;
  const Scalar _tmp31 = -_tmp14 * sqrt_info(4, 4) - _tmp15 * sqrt_info(4, 5) -
                        _tmp16 * sqrt_info(4, 3) - _tmp21 * sqrt_info(4, 2) -
                        _tmp24 * sqrt_info(4, 1) + _tmp30 * _tmp8;
  const Scalar _tmp32 = -_tmp14 * sqrt_info(5, 4) - _tmp15 * sqrt_info(5, 5) -
                        _tmp16 * sqrt_info(5, 3) + _tmp19 * sqrt_info(5, 0) -
                        _tmp21 * sqrt_info(5, 2) - _tmp24 * sqrt_info(5, 1);
  const Scalar _tmp33 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp34 = _tmp10 * ((((_tmp1 + _tmp2) > 0) - ((_tmp1 + _tmp2) < 0)) - 1);
  const Scalar _tmp35 = _tmp34 / _tmp4;
  const Scalar _tmp36 = _tmp11 * _tmp35;
  const Scalar _tmp37 = _tmp33 * _tmp36;
  const Scalar _tmp38 = _tmp20 * _tmp36;
  const Scalar _tmp39 = _tmp17 * _tmp38;
  const Scalar _tmp40 = _tmp13 * _tmp35;
  const Scalar _tmp41 = _tmp3 * _tmp34 * _tmp6 / (_tmp5 * std::sqrt(_tmp5));
  const Scalar _tmp42 = _tmp11 * _tmp41;
  const Scalar _tmp43 = _tmp33 * _tmp42;
  const Scalar _tmp44 = 2 * _tmp7;
  const Scalar _tmp45 = _tmp11 * _tmp44;
  const Scalar _tmp46 = _tmp45 * _tmp9;
  const Scalar _tmp47 = _tmp45 * sqrt_info(0, 0);
  const Scalar _tmp48 = _tmp17 * _tmp20;
  const Scalar _tmp49 = _tmp42 * _tmp48;
  const Scalar _tmp50 = _tmp13 * _tmp41;
  const Scalar _tmp51 = _tmp20 * _tmp45;
  const Scalar _tmp52 = _tmp0 * _tmp47 - _tmp17 * _tmp40 - _tmp17 * _tmp50 +
                        _tmp37 * sqrt_info(0, 0) - _tmp39 * sqrt_info(0, 2) +
                        _tmp43 * sqrt_info(0, 0) + _tmp46 * sqrt_info(0, 2) -
                        _tmp49 * sqrt_info(0, 2) - _tmp51 * sqrt_info(0, 1);
  const Scalar _tmp53 = _tmp17 * _tmp9;
  const Scalar _tmp54 = _tmp36 * _tmp53;
  const Scalar _tmp55 = _tmp0 * _tmp45;
  const Scalar _tmp56 = _tmp42 * _tmp53;
  const Scalar _tmp57 =
      _tmp37 * sqrt_info(1, 0) - _tmp39 * sqrt_info(1, 2) + _tmp43 * sqrt_info(1, 0) +
      _tmp46 * sqrt_info(1, 2) - _tmp49 * sqrt_info(1, 2) - _tmp51 * sqrt_info(1, 1) -
      _tmp54 * sqrt_info(1, 1) + _tmp55 * sqrt_info(1, 0) - _tmp56 * sqrt_info(1, 1);
  const Scalar _tmp58 = _tmp26 * _tmp53;
  const Scalar _tmp59 = -_tmp35 * _tmp58 + _tmp37 * sqrt_info(2, 0) - _tmp39 * sqrt_info(2, 2) -
                        _tmp41 * _tmp58 + _tmp43 * sqrt_info(2, 0) + _tmp46 * sqrt_info(2, 2) -
                        _tmp49 * sqrt_info(2, 2) - _tmp51 * sqrt_info(2, 1) +
                        _tmp55 * sqrt_info(2, 0);
  const Scalar _tmp60 = _tmp11 * sqrt_info(3, 1);
  const Scalar _tmp61 = _tmp35 * _tmp60;
  const Scalar _tmp62 = _tmp41 * _tmp60;
  const Scalar _tmp63 = _tmp37 * sqrt_info(3, 0) - _tmp39 * sqrt_info(3, 2) +
                        _tmp43 * sqrt_info(3, 0) + _tmp46 * sqrt_info(3, 2) -
                        _tmp49 * sqrt_info(3, 2) - _tmp51 * sqrt_info(3, 1) - _tmp53 * _tmp61 -
                        _tmp53 * _tmp62 + _tmp55 * sqrt_info(3, 0);
  const Scalar _tmp64 = _tmp29 * _tmp33;
  const Scalar _tmp65 = _tmp29 * _tmp44;
  const Scalar _tmp66 = _tmp0 * _tmp65 + _tmp35 * _tmp64 - _tmp39 * sqrt_info(4, 2) +
                        _tmp41 * _tmp64 + _tmp46 * sqrt_info(4, 2) - _tmp49 * sqrt_info(4, 2) -
                        _tmp51 * sqrt_info(4, 1) - _tmp54 * sqrt_info(4, 1) -
                        _tmp56 * sqrt_info(4, 1);
  const Scalar _tmp67 =
      _tmp37 * sqrt_info(5, 0) - _tmp39 * sqrt_info(5, 2) + _tmp43 * sqrt_info(5, 0) +
      _tmp46 * sqrt_info(5, 2) - _tmp49 * sqrt_info(5, 2) - _tmp51 * sqrt_info(5, 1) -
      _tmp54 * sqrt_info(5, 1) + _tmp55 * sqrt_info(5, 0) - _tmp56 * sqrt_info(5, 1);
  const Scalar _tmp68 = _tmp20 * _tmp9;
  const Scalar _tmp69 = _tmp42 * _tmp68;
  const Scalar _tmp70 = std::pow(_tmp9, Scalar(2));
  const Scalar _tmp71 = _tmp41 * _tmp70;
  const Scalar _tmp72 = _tmp38 * _tmp9;
  const Scalar _tmp73 = _tmp17 * _tmp45;
  const Scalar _tmp74 = _tmp35 * _tmp70;
  const Scalar _tmp75 = _tmp12 * _tmp71 + _tmp12 * _tmp74 + _tmp20 * _tmp47 -
                        _tmp54 * sqrt_info(0, 0) + _tmp55 * sqrt_info(0, 1) -
                        _tmp56 * sqrt_info(0, 0) + _tmp69 * sqrt_info(0, 2) +
                        _tmp72 * sqrt_info(0, 2) + _tmp73 * sqrt_info(0, 2);
  const Scalar _tmp76 = _tmp11 * _tmp71;
  const Scalar _tmp77 = _tmp11 * _tmp74;
  const Scalar _tmp78 =
      _tmp51 * sqrt_info(1, 0) - _tmp54 * sqrt_info(1, 0) + _tmp55 * sqrt_info(1, 1) -
      _tmp56 * sqrt_info(1, 0) + _tmp69 * sqrt_info(1, 2) + _tmp72 * sqrt_info(1, 2) +
      _tmp73 * sqrt_info(1, 2) + _tmp76 * sqrt_info(1, 1) + _tmp77 * sqrt_info(1, 1);
  const Scalar _tmp79 = _tmp26 * _tmp71 + _tmp26 * _tmp74 + _tmp51 * sqrt_info(2, 0) -
                        _tmp54 * sqrt_info(2, 0) + _tmp55 * sqrt_info(2, 1) -
                        _tmp56 * sqrt_info(2, 0) + _tmp69 * sqrt_info(2, 2) +
                        _tmp72 * sqrt_info(2, 2) + _tmp73 * sqrt_info(2, 2);
  const Scalar _tmp80 = _tmp51 * sqrt_info(3, 0) - _tmp54 * sqrt_info(3, 0) +
                        _tmp55 * sqrt_info(3, 1) - _tmp56 * sqrt_info(3, 0) + _tmp60 * _tmp71 +
                        _tmp60 * _tmp74 + _tmp69 * sqrt_info(3, 2) + _tmp72 * sqrt_info(3, 2) +
                        _tmp73 * sqrt_info(3, 2);
  const Scalar _tmp81 = _tmp35 * _tmp9;
  const Scalar _tmp82 = _tmp41 * _tmp9;
  const Scalar _tmp83 = _tmp20 * _tmp29;
  const Scalar _tmp84 = -_tmp30 * _tmp81 - _tmp30 * _tmp82 + _tmp44 * _tmp83 +
                        _tmp55 * sqrt_info(4, 1) + _tmp69 * sqrt_info(4, 2) +
                        _tmp72 * sqrt_info(4, 2) + _tmp73 * sqrt_info(4, 2) +
                        _tmp76 * sqrt_info(4, 1) + _tmp77 * sqrt_info(4, 1);
  const Scalar _tmp85 = _tmp42 * sqrt_info(5, 0);
  const Scalar _tmp86 = _tmp51 * sqrt_info(5, 0) - _tmp53 * _tmp85 - _tmp54 * sqrt_info(5, 0) +
                        _tmp55 * sqrt_info(5, 1) + _tmp69 * sqrt_info(5, 2) +
                        _tmp72 * sqrt_info(5, 2) + _tmp73 * sqrt_info(5, 2) +
                        _tmp76 * sqrt_info(5, 1) + _tmp77 * sqrt_info(5, 1);
  const Scalar _tmp87 = std::pow(_tmp20, Scalar(2));
  const Scalar _tmp88 = _tmp36 * _tmp87;
  const Scalar _tmp89 = _tmp42 * _tmp87;
  const Scalar _tmp90 = _tmp20 * _tmp40 + _tmp20 * _tmp50 - _tmp39 * sqrt_info(0, 0) -
                        _tmp47 * _tmp9 - _tmp49 * sqrt_info(0, 0) + _tmp55 * sqrt_info(0, 2) -
                        _tmp73 * sqrt_info(0, 1) + _tmp88 * sqrt_info(0, 2) +
                        _tmp89 * sqrt_info(0, 2);
  const Scalar _tmp91 =
      -_tmp39 * sqrt_info(1, 0) - _tmp46 * sqrt_info(1, 0) - _tmp49 * sqrt_info(1, 0) +
      _tmp55 * sqrt_info(1, 2) + _tmp69 * sqrt_info(1, 1) + _tmp72 * sqrt_info(1, 1) -
      _tmp73 * sqrt_info(1, 1) + _tmp88 * sqrt_info(1, 2) + _tmp89 * sqrt_info(1, 2);
  const Scalar _tmp92 = _tmp20 * _tmp26;
  const Scalar _tmp93 = -_tmp39 * sqrt_info(2, 0) - _tmp46 * sqrt_info(2, 0) -
                        _tmp49 * sqrt_info(2, 0) + _tmp55 * sqrt_info(2, 2) -
                        _tmp73 * sqrt_info(2, 1) + _tmp81 * _tmp92 + _tmp82 * _tmp92 +
                        _tmp88 * sqrt_info(2, 2) + _tmp89 * sqrt_info(2, 2);
  const Scalar _tmp94 = -_tmp39 * sqrt_info(3, 0) - _tmp46 * sqrt_info(3, 0) -
                        _tmp49 * sqrt_info(3, 0) + _tmp55 * sqrt_info(3, 2) + _tmp61 * _tmp68 +
                        _tmp62 * _tmp68 - _tmp73 * sqrt_info(3, 1) + _tmp88 * sqrt_info(3, 2) +
                        _tmp89 * sqrt_info(3, 2);
  const Scalar _tmp95 = _tmp17 * _tmp83;
  const Scalar _tmp96 = -_tmp35 * _tmp95 - _tmp41 * _tmp95 + _tmp55 * sqrt_info(4, 2) -
                        _tmp65 * _tmp9 + _tmp69 * sqrt_info(4, 1) + _tmp72 * sqrt_info(4, 1) -
                        _tmp73 * sqrt_info(4, 1) + _tmp88 * sqrt_info(4, 2) +
                        _tmp89 * sqrt_info(4, 2);
  const Scalar _tmp97 = -_tmp39 * sqrt_info(5, 0) - _tmp46 * sqrt_info(5, 0) - _tmp48 * _tmp85 +
                        _tmp55 * sqrt_info(5, 2) + _tmp69 * sqrt_info(5, 1) +
                        _tmp72 * sqrt_info(5, 1) - _tmp73 * sqrt_info(5, 1) +
                        _tmp88 * sqrt_info(5, 2) + _tmp89 * sqrt_info(5, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp22;
    _res(1, 0) = _tmp25;
    _res(2, 0) = _tmp27;
    _res(3, 0) = _tmp28;
    _res(4, 0) = _tmp31;
    _res(5, 0) = _tmp32;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp52;
    _jacobian(1, 0) = _tmp57;
    _jacobian(2, 0) = _tmp59;
    _jacobian(3, 0) = _tmp63;
    _jacobian(4, 0) = _tmp66;
    _jacobian(5, 0) = _tmp67;
    _jacobian(0, 1) = _tmp75;
    _jacobian(1, 1) = _tmp78;
    _jacobian(2, 1) = _tmp79;
    _jacobian(3, 1) = _tmp80;
    _jacobian(4, 1) = _tmp84;
    _jacobian(5, 1) = _tmp86;
    _jacobian(0, 2) = _tmp90;
    _jacobian(1, 2) = _tmp91;
    _jacobian(2, 2) = _tmp93;
    _jacobian(3, 2) = _tmp94;
    _jacobian(4, 2) = _tmp96;
    _jacobian(5, 2) = _tmp97;
    _jacobian(0, 3) = sqrt_info(0, 3);
    _jacobian(1, 3) = sqrt_info(1, 3);
    _jacobian(2, 3) = sqrt_info(2, 3);
    _jacobian(3, 3) = sqrt_info(3, 3);
    _jacobian(4, 3) = sqrt_info(4, 3);
    _jacobian(5, 3) = sqrt_info(5, 3);
    _jacobian(0, 4) = sqrt_info(0, 4);
    _jacobian(1, 4) = sqrt_info(1, 4);
    _jacobian(2, 4) = sqrt_info(2, 4);
    _jacobian(3, 4) = sqrt_info(3, 4);
    _jacobian(4, 4) = sqrt_info(4, 4);
    _jacobian(5, 4) = sqrt_info(5, 4);
    _jacobian(0, 5) = sqrt_info(0, 5);
    _jacobian(1, 5) = sqrt_info(1, 5);
    _jacobian(2, 5) = sqrt_info(2, 5);
    _jacobian(3, 5) = sqrt_info(3, 5);
    _jacobian(4, 5) = sqrt_info(4, 5);
    _jacobian(5, 5) = sqrt_info(5, 5);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp52, Scalar(2)) + std::pow(_tmp57, Scalar(2)) +
                     std::pow(_tmp59, Scalar(2)) + std::pow(_tmp63, Scalar(2)) +
                     std::pow(_tmp66, Scalar(2)) + std::pow(_tmp67, Scalar(2));
    _hessian(1, 0) = _tmp52 * _tmp75 + _tmp57 * _tmp78 + _tmp59 * _tmp79 + _tmp63 * _tmp80 +
                     _tmp66 * _tmp84 + _tmp67 * _tmp86;
    _hessian(2, 0) = _tmp52 * _tmp90 + _tmp57 * _tmp91 + _tmp59 * _tmp93 + _tmp63 * _tmp94 +
                     _tmp66 * _tmp96 + _tmp67 * _tmp97;
    _hessian(3, 0) = _tmp52 * sqrt_info(0, 3) + _tmp57 * sqrt_info(1, 3) +
                     _tmp59 * sqrt_info(2, 3) + _tmp63 * sqrt_info(3, 3) +
                     _tmp66 * sqrt_info(4, 3) + _tmp67 * sqrt_info(5, 3);
    _hessian(4, 0) = _tmp52 * sqrt_info(0, 4) + _tmp57 * sqrt_info(1, 4) +
                     _tmp59 * sqrt_info(2, 4) + _tmp63 * sqrt_info(3, 4) +
                     _tmp66 * sqrt_info(4, 4) + _tmp67 * sqrt_info(5, 4);
    _hessian(5, 0) = _tmp52 * sqrt_info(0, 5) + _tmp57 * sqrt_info(1, 5) +
                     _tmp59 * sqrt_info(2, 5) + _tmp63 * sqrt_info(3, 5) +
                     _tmp66 * sqrt_info(4, 5) + _tmp67 * sqrt_info(5, 5);
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp75, Scalar(2)) + std::pow(_tmp78, Scalar(2)) +
                     std::pow(_tmp79, Scalar(2)) + std::pow(_tmp80, Scalar(2)) +
                     std::pow(_tmp84, Scalar(2)) + std::pow(_tmp86, Scalar(2));
    _hessian(2, 1) = _tmp75 * _tmp90 + _tmp78 * _tmp91 + _tmp79 * _tmp93 + _tmp80 * _tmp94 +
                     _tmp84 * _tmp96 + _tmp86 * _tmp97;
    _hessian(3, 1) = _tmp75 * sqrt_info(0, 3) + _tmp78 * sqrt_info(1, 3) +
                     _tmp79 * sqrt_info(2, 3) + _tmp80 * sqrt_info(3, 3) +
                     _tmp84 * sqrt_info(4, 3) + _tmp86 * sqrt_info(5, 3);
    _hessian(4, 1) = _tmp75 * sqrt_info(0, 4) + _tmp78 * sqrt_info(1, 4) +
                     _tmp79 * sqrt_info(2, 4) + _tmp80 * sqrt_info(3, 4) +
                     _tmp84 * sqrt_info(4, 4) + _tmp86 * sqrt_info(5, 4);
    _hessian(5, 1) = _tmp75 * sqrt_info(0, 5) + _tmp78 * sqrt_info(1, 5) +
                     _tmp79 * sqrt_info(2, 5) + _tmp80 * sqrt_info(3, 5) +
                     _tmp84 * sqrt_info(4, 5) + _tmp86 * sqrt_info(5, 5);
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp90, Scalar(2)) + std::pow(_tmp91, Scalar(2)) +
                     std::pow(_tmp93, Scalar(2)) + std::pow(_tmp94, Scalar(2)) +
                     std::pow(_tmp96, Scalar(2)) + std::pow(_tmp97, Scalar(2));
    _hessian(3, 2) = _tmp90 * sqrt_info(0, 3) + _tmp91 * sqrt_info(1, 3) +
                     _tmp93 * sqrt_info(2, 3) + _tmp94 * sqrt_info(3, 3) +
                     _tmp96 * sqrt_info(4, 3) + _tmp97 * sqrt_info(5, 3);
    _hessian(4, 2) = _tmp90 * sqrt_info(0, 4) + _tmp91 * sqrt_info(1, 4) +
                     _tmp93 * sqrt_info(2, 4) + _tmp94 * sqrt_info(3, 4) +
                     _tmp96 * sqrt_info(4, 4) + _tmp97 * sqrt_info(5, 4);
    _hessian(5, 2) = _tmp90 * sqrt_info(0, 5) + _tmp91 * sqrt_info(1, 5) +
                     _tmp93 * sqrt_info(2, 5) + _tmp94 * sqrt_info(3, 5) +
                     _tmp96 * sqrt_info(4, 5) + _tmp97 * sqrt_info(5, 5);
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(sqrt_info(0, 3), Scalar(2)) + std::pow(sqrt_info(1, 3), Scalar(2)) +
                     std::pow(sqrt_info(2, 3), Scalar(2)) + std::pow(sqrt_info(3, 3), Scalar(2)) +
                     std::pow(sqrt_info(4, 3), Scalar(2)) + std::pow(sqrt_info(5, 3), Scalar(2));
    _hessian(4, 3) = sqrt_info(0, 3) * sqrt_info(0, 4) + sqrt_info(1, 3) * sqrt_info(1, 4) +
                     sqrt_info(2, 3) * sqrt_info(2, 4) + sqrt_info(3, 3) * sqrt_info(3, 4) +
                     sqrt_info(4, 3) * sqrt_info(4, 4) + sqrt_info(5, 3) * sqrt_info(5, 4);
    _hessian(5, 3) = sqrt_info(0, 3) * sqrt_info(0, 5) + sqrt_info(1, 3) * sqrt_info(1, 5) +
                     sqrt_info(2, 3) * sqrt_info(2, 5) + sqrt_info(3, 3) * sqrt_info(3, 5) +
                     sqrt_info(4, 3) * sqrt_info(4, 5) + sqrt_info(5, 3) * sqrt_info(5, 5);
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(sqrt_info(0, 4), Scalar(2)) + std::pow(sqrt_info(1, 4), Scalar(2)) +
                     std::pow(sqrt_info(2, 4), Scalar(2)) + std::pow(sqrt_info(3, 4), Scalar(2)) +
                     std::pow(sqrt_info(4, 4), Scalar(2)) + std::pow(sqrt_info(5, 4), Scalar(2));
    _hessian(5, 4) = sqrt_info(0, 4) * sqrt_info(0, 5) + sqrt_info(1, 4) * sqrt_info(1, 5) +
                     sqrt_info(2, 4) * sqrt_info(2, 5) + sqrt_info(3, 4) * sqrt_info(3, 5) +
                     sqrt_info(4, 4) * sqrt_info(4, 5) + sqrt_info(5, 4) * sqrt_info(5, 5);
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(sqrt_info(0, 5), Scalar(2)) + std::pow(sqrt_info(1, 5), Scalar(2)) +
                     std::pow(sqrt_info(2, 5), Scalar(2)) + std::pow(sqrt_info(3, 5), Scalar(2)) +
                     std::pow(sqrt_info(4, 5), Scalar(2)) + std::pow(sqrt_info(5, 5), Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp22 * _tmp52 + _tmp25 * _tmp57 + _tmp27 * _tmp59 + _tmp28 * _tmp63 +
                 _tmp31 * _tmp66 + _tmp32 * _tmp67;
    _rhs(1, 0) = _tmp22 * _tmp75 + _tmp25 * _tmp78 + _tmp27 * _tmp79 + _tmp28 * _tmp80 +
                 _tmp31 * _tmp84 + _tmp32 * _tmp86;
    _rhs(2, 0) = _tmp22 * _tmp90 + _tmp25 * _tmp91 + _tmp27 * _tmp93 + _tmp28 * _tmp94 +
                 _tmp31 * _tmp96 + _tmp32 * _tmp97;
    _rhs(3, 0) = _tmp22 * sqrt_info(0, 3) + _tmp25 * sqrt_info(1, 3) + _tmp27 * sqrt_info(2, 3) +
                 _tmp28 * sqrt_info(3, 3) + _tmp31 * sqrt_info(4, 3) + _tmp32 * sqrt_info(5, 3);
    _rhs(4, 0) = _tmp22 * sqrt_info(0, 4) + _tmp25 * sqrt_info(1, 4) + _tmp27 * sqrt_info(2, 4) +
                 _tmp28 * sqrt_info(3, 4) + _tmp31 * sqrt_info(4, 4) + _tmp32 * sqrt_info(5, 4);
    _rhs(5, 0) = _tmp22 * sqrt_info(0, 5) + _tmp25 * sqrt_info(1, 5) + _tmp27 * sqrt_info(2, 5) +
                 _tmp28 * sqrt_info(3, 5) + _tmp31 * sqrt_info(4, 5) + _tmp32 * sqrt_info(5, 5);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
