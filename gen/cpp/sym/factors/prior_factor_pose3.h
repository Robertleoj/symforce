// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (6x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3(const sym::Pose3<Scalar>& value, const sym::Pose3<Scalar>& prior,
                      const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
                      Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const jacobian = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                      Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 820

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _prior = prior.Data();

  // Intermediate terms (137)
  const Scalar _tmp0 = _prior[2] * _value[1];
  const Scalar _tmp1 = _prior[1] * _value[2];
  const Scalar _tmp2 = _prior[0] * _value[3];
  const Scalar _tmp3 = _prior[3] * _value[0];
  const Scalar _tmp4 = _tmp0 - _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _prior[3] * _value[3];
  const Scalar _tmp6 = _prior[2] * _value[2];
  const Scalar _tmp7 = _prior[1] * _value[1];
  const Scalar _tmp8 = _prior[0] * _value[0];
  const Scalar _tmp9 = _tmp5 + _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp10 = std::fabs(_tmp9);
  const Scalar _tmp11 = 1 - epsilon;
  const Scalar _tmp12 = std::min<Scalar>(_tmp10, _tmp11);
  const Scalar _tmp13 = 1 - std::pow(_tmp12, Scalar(2));
  const Scalar _tmp14 = 2 / std::sqrt(_tmp13);
  const Scalar _tmp15 = (((_tmp9) > 0) - ((_tmp9) < 0));
  const Scalar _tmp16 = 2 * std::min<Scalar>(0, _tmp15) + 1;
  const Scalar _tmp17 = std::acos(_tmp12);
  const Scalar _tmp18 = _tmp16 * _tmp17;
  const Scalar _tmp19 = _tmp14 * _tmp18;
  const Scalar _tmp20 = _tmp19 * _tmp4;
  const Scalar _tmp21 = -_prior[6] + _value[6];
  const Scalar _tmp22 = -_prior[5] + _value[5];
  const Scalar _tmp23 = -_prior[4] + _value[4];
  const Scalar _tmp24 = _prior[2] * _value[0];
  const Scalar _tmp25 = _prior[1] * _value[3];
  const Scalar _tmp26 = _prior[0] * _value[2];
  const Scalar _tmp27 = _prior[3] * _value[1];
  const Scalar _tmp28 = -_tmp24 - _tmp25 + _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp19 * _tmp28;
  const Scalar _tmp30 = _prior[2] * _value[3];
  const Scalar _tmp31 = _prior[1] * _value[0];
  const Scalar _tmp32 = _prior[0] * _value[1];
  const Scalar _tmp33 = _prior[3] * _value[2];
  const Scalar _tmp34 = -_tmp30 + _tmp31 - _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp19 * _tmp34;
  const Scalar _tmp36 = _tmp20 * sqrt_info(0, 0) + _tmp21 * sqrt_info(0, 5) +
                        _tmp22 * sqrt_info(0, 4) + _tmp23 * sqrt_info(0, 3) +
                        _tmp29 * sqrt_info(0, 1) + _tmp35 * sqrt_info(0, 2);
  const Scalar _tmp37 = _tmp20 * sqrt_info(1, 0) + _tmp21 * sqrt_info(1, 5) +
                        _tmp22 * sqrt_info(1, 4) + _tmp23 * sqrt_info(1, 3) +
                        _tmp29 * sqrt_info(1, 1) + _tmp35 * sqrt_info(1, 2);
  const Scalar _tmp38 = _tmp16 * sqrt_info(2, 1);
  const Scalar _tmp39 = _tmp17 * _tmp38;
  const Scalar _tmp40 = _tmp14 * _tmp39;
  const Scalar _tmp41 = _tmp20 * sqrt_info(2, 0) + _tmp21 * sqrt_info(2, 5) +
                        _tmp22 * sqrt_info(2, 4) + _tmp23 * sqrt_info(2, 3) + _tmp28 * _tmp40 +
                        _tmp35 * sqrt_info(2, 2);
  const Scalar _tmp42 = _tmp18 * sqrt_info(3, 2);
  const Scalar _tmp43 = _tmp14 * _tmp42;
  const Scalar _tmp44 = _tmp20 * sqrt_info(3, 0) + _tmp21 * sqrt_info(3, 5) +
                        _tmp22 * sqrt_info(3, 4) + _tmp23 * sqrt_info(3, 3) +
                        _tmp29 * sqrt_info(3, 1) + _tmp34 * _tmp43;
  const Scalar _tmp45 = _tmp20 * sqrt_info(4, 0) + _tmp21 * sqrt_info(4, 5) +
                        _tmp22 * sqrt_info(4, 4) + _tmp23 * sqrt_info(4, 3) +
                        _tmp29 * sqrt_info(4, 1) + _tmp35 * sqrt_info(4, 2);
  const Scalar _tmp46 = _tmp20 * sqrt_info(5, 0) + _tmp21 * sqrt_info(5, 5) +
                        _tmp22 * sqrt_info(5, 4) + _tmp23 * sqrt_info(5, 3) +
                        _tmp29 * sqrt_info(5, 1) + _tmp35 * sqrt_info(5, 2);
  const Scalar _tmp47 = _tmp12 / (_tmp13 * std::sqrt(_tmp13));
  const Scalar _tmp48 = _tmp18 * _tmp47;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp53 = -_tmp49 + _tmp50 + _tmp51 - _tmp52;
  const Scalar _tmp54 = _tmp15 * ((((-_tmp10 + _tmp11) > 0) - ((-_tmp10 + _tmp11) < 0)) + 1);
  const Scalar _tmp55 = _tmp53 * _tmp54;
  const Scalar _tmp56 = _tmp48 * _tmp55;
  const Scalar _tmp57 = _tmp34 * _tmp56;
  const Scalar _tmp58 = Scalar(1.0) / (_tmp13);
  const Scalar _tmp59 = _tmp16 * _tmp58;
  const Scalar _tmp60 = _tmp28 * _tmp54;
  const Scalar _tmp61 = _tmp53 * _tmp60;
  const Scalar _tmp62 = _tmp59 * _tmp61;
  const Scalar _tmp63 = _tmp4 * _tmp56;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp68 = -_tmp64 + _tmp65 - _tmp66 + _tmp67;
  const Scalar _tmp69 = _tmp19 * _tmp68;
  const Scalar _tmp70 = _tmp54 * _tmp59;
  const Scalar _tmp71 = _tmp53 * _tmp70;
  const Scalar _tmp72 = _tmp4 * _tmp71;
  const Scalar _tmp73 = _tmp34 * _tmp71;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp76 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp77 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp78 = _tmp74 + _tmp75 - _tmp76 - _tmp77;
  const Scalar _tmp79 = _tmp19 * _tmp78;
  const Scalar _tmp80 = _tmp48 * _tmp61;
  const Scalar _tmp81 =
      _tmp14 * ((Scalar(1) / Scalar(2)) * _tmp5 + (Scalar(1) / Scalar(2)) * _tmp6 +
                (Scalar(1) / Scalar(2)) * _tmp7 + (Scalar(1) / Scalar(2)) * _tmp8);
  const Scalar _tmp82 = _tmp18 * _tmp81;
  const Scalar _tmp83 =
      _tmp57 * sqrt_info(0, 2) - _tmp62 * sqrt_info(0, 1) + _tmp63 * sqrt_info(0, 0) +
      _tmp69 * sqrt_info(0, 1) - _tmp72 * sqrt_info(0, 0) - _tmp73 * sqrt_info(0, 2) +
      _tmp79 * sqrt_info(0, 2) + _tmp80 * sqrt_info(0, 1) + _tmp82 * sqrt_info(0, 0);
  const Scalar _tmp84 =
      _tmp57 * sqrt_info(1, 2) - _tmp62 * sqrt_info(1, 1) + _tmp63 * sqrt_info(1, 0) +
      _tmp69 * sqrt_info(1, 1) - _tmp72 * sqrt_info(1, 0) - _tmp73 * sqrt_info(1, 2) +
      _tmp79 * sqrt_info(1, 2) + _tmp80 * sqrt_info(1, 1) + _tmp82 * sqrt_info(1, 0);
  const Scalar _tmp85 = _tmp38 * _tmp58;
  const Scalar _tmp86 = _tmp4 * sqrt_info(2, 0);
  const Scalar _tmp87 = _tmp39 * _tmp47;
  const Scalar _tmp88 = _tmp40 * _tmp68 + _tmp56 * _tmp86 + _tmp57 * sqrt_info(2, 2) -
                        _tmp61 * _tmp85 + _tmp61 * _tmp87 - _tmp71 * _tmp86 -
                        _tmp73 * sqrt_info(2, 2) + _tmp79 * sqrt_info(2, 2) +
                        _tmp82 * sqrt_info(2, 0);
  const Scalar _tmp89 = _tmp34 * _tmp42 * _tmp47;
  const Scalar _tmp90 = _tmp34 * sqrt_info(3, 2);
  const Scalar _tmp91 = _tmp43 * _tmp78 + _tmp55 * _tmp89 - _tmp62 * sqrt_info(3, 1) +
                        _tmp63 * sqrt_info(3, 0) + _tmp69 * sqrt_info(3, 1) - _tmp71 * _tmp90 -
                        _tmp72 * sqrt_info(3, 0) + _tmp80 * sqrt_info(3, 1) +
                        _tmp82 * sqrt_info(3, 0);
  const Scalar _tmp92 = _tmp78 * sqrt_info(4, 2);
  const Scalar _tmp93 = _tmp19 * _tmp92 + _tmp57 * sqrt_info(4, 2) - _tmp62 * sqrt_info(4, 1) +
                        _tmp63 * sqrt_info(4, 0) + _tmp69 * sqrt_info(4, 1) -
                        _tmp72 * sqrt_info(4, 0) - _tmp73 * sqrt_info(4, 2) +
                        _tmp80 * sqrt_info(4, 1) + _tmp82 * sqrt_info(4, 0);
  const Scalar _tmp94 = _tmp4 * sqrt_info(5, 0);
  const Scalar _tmp95 = _tmp56 * _tmp94 + _tmp57 * sqrt_info(5, 2) - _tmp62 * sqrt_info(5, 1) +
                        _tmp69 * sqrt_info(5, 1) - _tmp71 * _tmp94 - _tmp73 * sqrt_info(5, 2) +
                        _tmp79 * sqrt_info(5, 2) + _tmp80 * sqrt_info(5, 1) +
                        _tmp82 * sqrt_info(5, 0);
  const Scalar _tmp96 = _tmp48 * _tmp54;
  const Scalar _tmp97 = _tmp78 * _tmp96;
  const Scalar _tmp98 = _tmp34 * _tmp97;
  const Scalar _tmp99 = _tmp14 * (_tmp49 - _tmp50 - _tmp51 + _tmp52);
  const Scalar _tmp100 = _tmp18 * _tmp99;
  const Scalar _tmp101 = _tmp70 * _tmp78;
  const Scalar _tmp102 = _tmp101 * _tmp34;
  const Scalar _tmp103 = _tmp4 * _tmp97;
  const Scalar _tmp104 = _tmp101 * _tmp4;
  const Scalar _tmp105 = _tmp64 - _tmp65 + _tmp66 - _tmp67;
  const Scalar _tmp106 = _tmp105 * _tmp19;
  const Scalar _tmp107 = _tmp60 * _tmp78;
  const Scalar _tmp108 = _tmp107 * sqrt_info(0, 1);
  const Scalar _tmp109 = _tmp100 * sqrt_info(0, 2) - _tmp102 * sqrt_info(0, 2) +
                         _tmp103 * sqrt_info(0, 0) - _tmp104 * sqrt_info(0, 0) +
                         _tmp106 * sqrt_info(0, 0) + _tmp108 * _tmp48 - _tmp108 * _tmp59 +
                         _tmp82 * sqrt_info(0, 1) + _tmp98 * sqrt_info(0, 2);
  const Scalar _tmp110 = _tmp107 * _tmp48;
  const Scalar _tmp111 = _tmp107 * _tmp59;
  const Scalar _tmp112 =
      _tmp100 * sqrt_info(1, 2) - _tmp102 * sqrt_info(1, 2) + _tmp103 * sqrt_info(1, 0) -
      _tmp104 * sqrt_info(1, 0) + _tmp106 * sqrt_info(1, 0) + _tmp110 * sqrt_info(1, 1) -
      _tmp111 * sqrt_info(1, 1) + _tmp82 * sqrt_info(1, 1) + _tmp98 * sqrt_info(1, 2);
  const Scalar _tmp113 = _tmp34 * sqrt_info(2, 2);
  const Scalar _tmp114 = _tmp100 * sqrt_info(2, 2) - _tmp102 * sqrt_info(2, 2) -
                         _tmp104 * sqrt_info(2, 0) + _tmp106 * sqrt_info(2, 0) - _tmp107 * _tmp85 +
                         _tmp107 * _tmp87 + _tmp113 * _tmp97 + _tmp39 * _tmp81 + _tmp86 * _tmp97;
  const Scalar _tmp115 = _tmp54 * _tmp89;
  const Scalar _tmp116 = -_tmp102 * sqrt_info(3, 2) + _tmp103 * sqrt_info(3, 0) -
                         _tmp104 * sqrt_info(3, 0) + _tmp106 * sqrt_info(3, 0) +
                         _tmp110 * sqrt_info(3, 1) - _tmp111 * sqrt_info(3, 1) + _tmp115 * _tmp78 +
                         _tmp42 * _tmp99 + _tmp82 * sqrt_info(3, 1);
  const Scalar _tmp117 = _tmp34 * _tmp92;
  const Scalar _tmp118 = _tmp100 * sqrt_info(4, 2) + _tmp103 * sqrt_info(4, 0) -
                         _tmp104 * sqrt_info(4, 0) + _tmp106 * sqrt_info(4, 0) +
                         _tmp110 * sqrt_info(4, 1) - _tmp111 * sqrt_info(4, 1) - _tmp117 * _tmp70 +
                         _tmp117 * _tmp96 + _tmp82 * sqrt_info(4, 1);
  const Scalar _tmp119 = _tmp100 * sqrt_info(5, 2) - _tmp101 * _tmp94 - _tmp102 * sqrt_info(5, 2) +
                         _tmp106 * sqrt_info(5, 0) + _tmp110 * sqrt_info(5, 1) -
                         _tmp111 * sqrt_info(5, 1) + _tmp82 * sqrt_info(5, 1) + _tmp94 * _tmp97 +
                         _tmp98 * sqrt_info(5, 2);
  const Scalar _tmp120 = _tmp105 * _tmp60;
  const Scalar _tmp121 = _tmp120 * _tmp48;
  const Scalar _tmp122 = _tmp120 * _tmp59;
  const Scalar _tmp123 = _tmp105 * _tmp70;
  const Scalar _tmp124 = _tmp123 * _tmp4;
  const Scalar _tmp125 = _tmp19 * (-_tmp74 - _tmp75 + _tmp76 + _tmp77);
  const Scalar _tmp126 = _tmp105 * _tmp96;
  const Scalar _tmp127 = _tmp126 * _tmp34;
  const Scalar _tmp128 = _tmp123 * _tmp34;
  const Scalar _tmp129 = _tmp19 * _tmp53;
  const Scalar _tmp130 = _tmp126 * _tmp4;
  const Scalar _tmp131 =
      _tmp121 * sqrt_info(0, 1) - _tmp122 * sqrt_info(0, 1) - _tmp124 * sqrt_info(0, 0) +
      _tmp125 * sqrt_info(0, 0) + _tmp127 * sqrt_info(0, 2) - _tmp128 * sqrt_info(0, 2) +
      _tmp129 * sqrt_info(0, 1) + _tmp130 * sqrt_info(0, 0) + _tmp82 * sqrt_info(0, 2);
  const Scalar _tmp132 =
      _tmp121 * sqrt_info(1, 1) - _tmp122 * sqrt_info(1, 1) - _tmp124 * sqrt_info(1, 0) +
      _tmp125 * sqrt_info(1, 0) + _tmp127 * sqrt_info(1, 2) - _tmp128 * sqrt_info(1, 2) +
      _tmp129 * sqrt_info(1, 1) + _tmp130 * sqrt_info(1, 0) + _tmp82 * sqrt_info(1, 2);
  const Scalar _tmp133 = _tmp113 * _tmp126 - _tmp120 * _tmp85 + _tmp120 * _tmp87 -
                         _tmp123 * _tmp86 + _tmp125 * sqrt_info(2, 0) + _tmp126 * _tmp86 -
                         _tmp128 * sqrt_info(2, 2) + _tmp40 * _tmp53 + _tmp82 * sqrt_info(2, 2);
  const Scalar _tmp134 = _tmp105 * _tmp115 + _tmp121 * sqrt_info(3, 1) - _tmp122 * sqrt_info(3, 1) -
                         _tmp123 * _tmp90 - _tmp124 * sqrt_info(3, 0) + _tmp125 * sqrt_info(3, 0) +
                         _tmp129 * sqrt_info(3, 1) + _tmp130 * sqrt_info(3, 0) + _tmp42 * _tmp81;
  const Scalar _tmp135 =
      _tmp121 * sqrt_info(4, 1) - _tmp122 * sqrt_info(4, 1) - _tmp124 * sqrt_info(4, 0) +
      _tmp125 * sqrt_info(4, 0) + _tmp127 * sqrt_info(4, 2) - _tmp128 * sqrt_info(4, 2) +
      _tmp129 * sqrt_info(4, 1) + _tmp130 * sqrt_info(4, 0) + _tmp82 * sqrt_info(4, 2);
  const Scalar _tmp136 = _tmp121 * sqrt_info(5, 1) - _tmp122 * sqrt_info(5, 1) - _tmp123 * _tmp94 +
                         _tmp125 * sqrt_info(5, 0) + _tmp126 * _tmp94 + _tmp127 * sqrt_info(5, 2) -
                         _tmp128 * sqrt_info(5, 2) + _tmp129 * sqrt_info(5, 1) +
                         _tmp82 * sqrt_info(5, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp36;
    _res(1, 0) = _tmp37;
    _res(2, 0) = _tmp41;
    _res(3, 0) = _tmp44;
    _res(4, 0) = _tmp45;
    _res(5, 0) = _tmp46;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp83;
    _jacobian(1, 0) = _tmp84;
    _jacobian(2, 0) = _tmp88;
    _jacobian(3, 0) = _tmp91;
    _jacobian(4, 0) = _tmp93;
    _jacobian(5, 0) = _tmp95;
    _jacobian(0, 1) = _tmp109;
    _jacobian(1, 1) = _tmp112;
    _jacobian(2, 1) = _tmp114;
    _jacobian(3, 1) = _tmp116;
    _jacobian(4, 1) = _tmp118;
    _jacobian(5, 1) = _tmp119;
    _jacobian(0, 2) = _tmp131;
    _jacobian(1, 2) = _tmp132;
    _jacobian(2, 2) = _tmp133;
    _jacobian(3, 2) = _tmp134;
    _jacobian(4, 2) = _tmp135;
    _jacobian(5, 2) = _tmp136;
    _jacobian(0, 3) = sqrt_info(0, 3);
    _jacobian(1, 3) = sqrt_info(1, 3);
    _jacobian(2, 3) = sqrt_info(2, 3);
    _jacobian(3, 3) = sqrt_info(3, 3);
    _jacobian(4, 3) = sqrt_info(4, 3);
    _jacobian(5, 3) = sqrt_info(5, 3);
    _jacobian(0, 4) = sqrt_info(0, 4);
    _jacobian(1, 4) = sqrt_info(1, 4);
    _jacobian(2, 4) = sqrt_info(2, 4);
    _jacobian(3, 4) = sqrt_info(3, 4);
    _jacobian(4, 4) = sqrt_info(4, 4);
    _jacobian(5, 4) = sqrt_info(5, 4);
    _jacobian(0, 5) = sqrt_info(0, 5);
    _jacobian(1, 5) = sqrt_info(1, 5);
    _jacobian(2, 5) = sqrt_info(2, 5);
    _jacobian(3, 5) = sqrt_info(3, 5);
    _jacobian(4, 5) = sqrt_info(4, 5);
    _jacobian(5, 5) = sqrt_info(5, 5);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp83, Scalar(2)) + std::pow(_tmp84, Scalar(2)) +
                     std::pow(_tmp88, Scalar(2)) + std::pow(_tmp91, Scalar(2)) +
                     std::pow(_tmp93, Scalar(2)) + std::pow(_tmp95, Scalar(2));
    _hessian(1, 0) = _tmp109 * _tmp83 + _tmp112 * _tmp84 + _tmp114 * _tmp88 + _tmp116 * _tmp91 +
                     _tmp118 * _tmp93 + _tmp119 * _tmp95;
    _hessian(2, 0) = _tmp131 * _tmp83 + _tmp132 * _tmp84 + _tmp133 * _tmp88 + _tmp134 * _tmp91 +
                     _tmp135 * _tmp93 + _tmp136 * _tmp95;
    _hessian(3, 0) = _tmp83 * sqrt_info(0, 3) + _tmp84 * sqrt_info(1, 3) +
                     _tmp88 * sqrt_info(2, 3) + _tmp91 * sqrt_info(3, 3) +
                     _tmp93 * sqrt_info(4, 3) + _tmp95 * sqrt_info(5, 3);
    _hessian(4, 0) = _tmp83 * sqrt_info(0, 4) + _tmp84 * sqrt_info(1, 4) +
                     _tmp88 * sqrt_info(2, 4) + _tmp91 * sqrt_info(3, 4) +
                     _tmp93 * sqrt_info(4, 4) + _tmp95 * sqrt_info(5, 4);
    _hessian(5, 0) = _tmp83 * sqrt_info(0, 5) + _tmp84 * sqrt_info(1, 5) +
                     _tmp88 * sqrt_info(2, 5) + _tmp91 * sqrt_info(3, 5) +
                     _tmp93 * sqrt_info(4, 5) + _tmp95 * sqrt_info(5, 5);
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp109, Scalar(2)) + std::pow(_tmp112, Scalar(2)) +
                     std::pow(_tmp114, Scalar(2)) + std::pow(_tmp116, Scalar(2)) +
                     std::pow(_tmp118, Scalar(2)) + std::pow(_tmp119, Scalar(2));
    _hessian(2, 1) = _tmp109 * _tmp131 + _tmp112 * _tmp132 + _tmp114 * _tmp133 + _tmp116 * _tmp134 +
                     _tmp118 * _tmp135 + _tmp119 * _tmp136;
    _hessian(3, 1) = _tmp109 * sqrt_info(0, 3) + _tmp112 * sqrt_info(1, 3) +
                     _tmp114 * sqrt_info(2, 3) + _tmp116 * sqrt_info(3, 3) +
                     _tmp118 * sqrt_info(4, 3) + _tmp119 * sqrt_info(5, 3);
    _hessian(4, 1) = _tmp109 * sqrt_info(0, 4) + _tmp112 * sqrt_info(1, 4) +
                     _tmp114 * sqrt_info(2, 4) + _tmp116 * sqrt_info(3, 4) +
                     _tmp118 * sqrt_info(4, 4) + _tmp119 * sqrt_info(5, 4);
    _hessian(5, 1) = _tmp109 * sqrt_info(0, 5) + _tmp112 * sqrt_info(1, 5) +
                     _tmp114 * sqrt_info(2, 5) + _tmp116 * sqrt_info(3, 5) +
                     _tmp118 * sqrt_info(4, 5) + _tmp119 * sqrt_info(5, 5);
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp131, Scalar(2)) + std::pow(_tmp132, Scalar(2)) +
                     std::pow(_tmp133, Scalar(2)) + std::pow(_tmp134, Scalar(2)) +
                     std::pow(_tmp135, Scalar(2)) + std::pow(_tmp136, Scalar(2));
    _hessian(3, 2) = _tmp131 * sqrt_info(0, 3) + _tmp132 * sqrt_info(1, 3) +
                     _tmp133 * sqrt_info(2, 3) + _tmp134 * sqrt_info(3, 3) +
                     _tmp135 * sqrt_info(4, 3) + _tmp136 * sqrt_info(5, 3);
    _hessian(4, 2) = _tmp131 * sqrt_info(0, 4) + _tmp132 * sqrt_info(1, 4) +
                     _tmp133 * sqrt_info(2, 4) + _tmp134 * sqrt_info(3, 4) +
                     _tmp135 * sqrt_info(4, 4) + _tmp136 * sqrt_info(5, 4);
    _hessian(5, 2) = _tmp131 * sqrt_info(0, 5) + _tmp132 * sqrt_info(1, 5) +
                     _tmp133 * sqrt_info(2, 5) + _tmp134 * sqrt_info(3, 5) +
                     _tmp135 * sqrt_info(4, 5) + _tmp136 * sqrt_info(5, 5);
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(sqrt_info(0, 3), Scalar(2)) + std::pow(sqrt_info(1, 3), Scalar(2)) +
                     std::pow(sqrt_info(2, 3), Scalar(2)) + std::pow(sqrt_info(3, 3), Scalar(2)) +
                     std::pow(sqrt_info(4, 3), Scalar(2)) + std::pow(sqrt_info(5, 3), Scalar(2));
    _hessian(4, 3) = sqrt_info(0, 3) * sqrt_info(0, 4) + sqrt_info(1, 3) * sqrt_info(1, 4) +
                     sqrt_info(2, 3) * sqrt_info(2, 4) + sqrt_info(3, 3) * sqrt_info(3, 4) +
                     sqrt_info(4, 3) * sqrt_info(4, 4) + sqrt_info(5, 3) * sqrt_info(5, 4);
    _hessian(5, 3) = sqrt_info(0, 3) * sqrt_info(0, 5) + sqrt_info(1, 3) * sqrt_info(1, 5) +
                     sqrt_info(2, 3) * sqrt_info(2, 5) + sqrt_info(3, 3) * sqrt_info(3, 5) +
                     sqrt_info(4, 3) * sqrt_info(4, 5) + sqrt_info(5, 3) * sqrt_info(5, 5);
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(sqrt_info(0, 4), Scalar(2)) + std::pow(sqrt_info(1, 4), Scalar(2)) +
                     std::pow(sqrt_info(2, 4), Scalar(2)) + std::pow(sqrt_info(3, 4), Scalar(2)) +
                     std::pow(sqrt_info(4, 4), Scalar(2)) + std::pow(sqrt_info(5, 4), Scalar(2));
    _hessian(5, 4) = sqrt_info(0, 4) * sqrt_info(0, 5) + sqrt_info(1, 4) * sqrt_info(1, 5) +
                     sqrt_info(2, 4) * sqrt_info(2, 5) + sqrt_info(3, 4) * sqrt_info(3, 5) +
                     sqrt_info(4, 4) * sqrt_info(4, 5) + sqrt_info(5, 4) * sqrt_info(5, 5);
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(sqrt_info(0, 5), Scalar(2)) + std::pow(sqrt_info(1, 5), Scalar(2)) +
                     std::pow(sqrt_info(2, 5), Scalar(2)) + std::pow(sqrt_info(3, 5), Scalar(2)) +
                     std::pow(sqrt_info(4, 5), Scalar(2)) + std::pow(sqrt_info(5, 5), Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp36 * _tmp83 + _tmp37 * _tmp84 + _tmp41 * _tmp88 + _tmp44 * _tmp91 +
                 _tmp45 * _tmp93 + _tmp46 * _tmp95;
    _rhs(1, 0) = _tmp109 * _tmp36 + _tmp112 * _tmp37 + _tmp114 * _tmp41 + _tmp116 * _tmp44 +
                 _tmp118 * _tmp45 + _tmp119 * _tmp46;
    _rhs(2, 0) = _tmp131 * _tmp36 + _tmp132 * _tmp37 + _tmp133 * _tmp41 + _tmp134 * _tmp44 +
                 _tmp135 * _tmp45 + _tmp136 * _tmp46;
    _rhs(3, 0) = _tmp36 * sqrt_info(0, 3) + _tmp37 * sqrt_info(1, 3) + _tmp41 * sqrt_info(2, 3) +
                 _tmp44 * sqrt_info(3, 3) + _tmp45 * sqrt_info(4, 3) + _tmp46 * sqrt_info(5, 3);
    _rhs(4, 0) = _tmp36 * sqrt_info(0, 4) + _tmp37 * sqrt_info(1, 4) + _tmp41 * sqrt_info(2, 4) +
                 _tmp44 * sqrt_info(3, 4) + _tmp45 * sqrt_info(4, 4) + _tmp46 * sqrt_info(5, 4);
    _rhs(5, 0) = _tmp36 * sqrt_info(0, 5) + _tmp37 * sqrt_info(1, 5) + _tmp41 * sqrt_info(2, 5) +
                 _tmp44 * sqrt_info(3, 5) + _tmp45 * sqrt_info(4, 5) + _tmp46 * sqrt_info(5, 5);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
