// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_R_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_R_b
 *
 * In lie group terms:
 *     local_coordinates(a_R_b, between(a, b))
 *     to_tangent(compose(inverse(a_R_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Rotation(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const sym::Rot3<Scalar>& a_R_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 660

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_R_b = a_R_b.Data();

  // Intermediate terms (155)
  const Scalar _tmp0 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp1 = _a_R_b[2] * _tmp0;
  const Scalar _tmp2 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] - _a[3] * _b[2];
  const Scalar _tmp3 = _a_R_b[1] * _tmp2;
  const Scalar _tmp4 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp5 = _a_R_b[3] * _tmp4;
  const Scalar _tmp6 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp7 = _a_R_b[0] * _tmp6;
  const Scalar _tmp8 = _tmp5 - _tmp7;
  const Scalar _tmp9 = _tmp1 + _tmp3 + _tmp8;
  const Scalar _tmp10 = _a_R_b[1] * _tmp0;
  const Scalar _tmp11 = _a_R_b[0] * _tmp4;
  const Scalar _tmp12 = _a_R_b[2] * _tmp2;
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = _tmp10 + _tmp13;
  const Scalar _tmp15 = _a_R_b[3] * _tmp6;
  const Scalar _tmp16 = _tmp14 + _tmp15;
  const Scalar _tmp17 = (((_tmp16) > 0) - ((_tmp16) < 0));
  const Scalar _tmp18 = std::min<Scalar>(0, _tmp17) + Scalar(1) / Scalar(2);
  const Scalar _tmp19 = epsilon - 1;
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = std::min<Scalar>(_tmp20, std::fabs(_tmp14 + _tmp15));
  const Scalar _tmp22 = std::acos(_tmp21) / std::sqrt(Scalar(1 - std::pow(_tmp21, Scalar(2))));
  const Scalar _tmp23 = _tmp18 * _tmp22;
  const Scalar _tmp24 = _tmp23 * _tmp9;
  const Scalar _tmp25 = _a_R_b[0] * _tmp0;
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = _a_R_b[3] * _tmp2;
  const Scalar _tmp28 = -_tmp27;
  const Scalar _tmp29 = _a_R_b[1] * _tmp4;
  const Scalar _tmp30 = _a_R_b[2] * _tmp6;
  const Scalar _tmp31 = _tmp29 - _tmp30;
  const Scalar _tmp32 = _tmp26 + _tmp28 + _tmp31;
  const Scalar _tmp33 = _tmp23 * _tmp32;
  const Scalar _tmp34 = _a_R_b[0] * _tmp2;
  const Scalar _tmp35 = _a_R_b[3] * _tmp0;
  const Scalar _tmp36 = -_tmp35;
  const Scalar _tmp37 = _a_R_b[2] * _tmp4;
  const Scalar _tmp38 = _a_R_b[1] * _tmp6;
  const Scalar _tmp39 = _tmp37 + _tmp38;
  const Scalar _tmp40 = _tmp34 + _tmp36 + _tmp39;
  const Scalar _tmp41 = _tmp23 * _tmp40;
  const Scalar _tmp42 =
      4 * _tmp24 * sqrt_info(0, 0) + 4 * _tmp33 * sqrt_info(0, 2) - 4 * _tmp41 * sqrt_info(0, 1);
  const Scalar _tmp43 = _tmp18 * sqrt_info(1, 2);
  const Scalar _tmp44 = _tmp32 * _tmp43;
  const Scalar _tmp45 =
      4 * _tmp22 * _tmp44 + 4 * _tmp24 * sqrt_info(1, 0) - 4 * _tmp41 * sqrt_info(1, 1);
  const Scalar _tmp46 =
      4 * _tmp24 * sqrt_info(2, 0) + 4 * _tmp33 * sqrt_info(2, 2) - 4 * _tmp41 * sqrt_info(2, 1);
  const Scalar _tmp47 = -_tmp10;
  const Scalar _tmp48 = _tmp11 + _tmp12;
  const Scalar _tmp49 = std::fabs(_tmp16);
  const Scalar _tmp50 = std::min<Scalar>(_tmp20, _tmp49);
  const Scalar _tmp51 = std::acos(_tmp50);
  const Scalar _tmp52 = std::pow(_tmp50, Scalar(2)) - 1;
  const Scalar _tmp53 = -_tmp52;
  const Scalar _tmp54 = 2 * _tmp51 / std::sqrt(_tmp53);
  const Scalar _tmp55 = _tmp18 * _tmp54;
  const Scalar _tmp56 = _tmp55 * (_tmp15 + _tmp47 + _tmp48);
  const Scalar _tmp57 = -_tmp34;
  const Scalar _tmp58 = _tmp35 + _tmp39 + _tmp57;
  const Scalar _tmp59 = _tmp55 * sqrt_info(0, 2);
  const Scalar _tmp60 = _tmp9 * sqrt_info(0, 0);
  const Scalar _tmp61 = -_tmp1;
  const Scalar _tmp62 = -_tmp3;
  const Scalar _tmp63 = _tmp61 + _tmp62 + _tmp8;
  const Scalar _tmp64 = _tmp17 * ((((_tmp19 + _tmp49) > 0) - ((_tmp19 + _tmp49) < 0)) - 1);
  const Scalar _tmp65 = _tmp50 * _tmp51 * _tmp64 / (_tmp53 * std::sqrt(_tmp53));
  const Scalar _tmp66 = _tmp18 * _tmp65;
  const Scalar _tmp67 = _tmp63 * _tmp66;
  const Scalar _tmp68 = _tmp40 * sqrt_info(0, 1);
  const Scalar _tmp69 = _tmp66 * _tmp68;
  const Scalar _tmp70 = _tmp64 / _tmp52;
  const Scalar _tmp71 = _tmp18 * sqrt_info(0, 2);
  const Scalar _tmp72 = _tmp32 * _tmp71;
  const Scalar _tmp73 = _tmp70 * _tmp72;
  const Scalar _tmp74 = _tmp18 * _tmp70;
  const Scalar _tmp75 = _tmp63 * _tmp74;
  const Scalar _tmp76 = _tmp25 + _tmp27 + _tmp31;
  const Scalar _tmp77 = _tmp55 * sqrt_info(0, 1);
  const Scalar _tmp78 = _tmp65 * _tmp72;
  const Scalar _tmp79 = _tmp40 * _tmp75;
  const Scalar _tmp80 = -_tmp56 * sqrt_info(0, 0) - _tmp58 * _tmp59 - _tmp60 * _tmp67 -
                        _tmp60 * _tmp75 + _tmp63 * _tmp69 - _tmp63 * _tmp73 - _tmp63 * _tmp78 -
                        _tmp76 * _tmp77 + _tmp79 * sqrt_info(0, 1);
  const Scalar _tmp81 = _tmp43 * _tmp54;
  const Scalar _tmp82 = _tmp9 * sqrt_info(1, 0);
  const Scalar _tmp83 = _tmp40 * _tmp66;
  const Scalar _tmp84 = _tmp83 * sqrt_info(1, 1);
  const Scalar _tmp85 = _tmp44 * _tmp70;
  const Scalar _tmp86 = _tmp55 * sqrt_info(1, 1);
  const Scalar _tmp87 = _tmp44 * _tmp65;
  const Scalar _tmp88 = -_tmp56 * sqrt_info(1, 0) - _tmp58 * _tmp81 + _tmp63 * _tmp84 -
                        _tmp63 * _tmp85 - _tmp63 * _tmp87 - _tmp67 * _tmp82 - _tmp75 * _tmp82 -
                        _tmp76 * _tmp86 + _tmp79 * sqrt_info(1, 1);
  const Scalar _tmp89 = _tmp18 * sqrt_info(2, 2);
  const Scalar _tmp90 = _tmp54 * _tmp89;
  const Scalar _tmp91 = _tmp9 * sqrt_info(2, 0);
  const Scalar _tmp92 = _tmp40 * sqrt_info(2, 1);
  const Scalar _tmp93 = _tmp66 * _tmp92;
  const Scalar _tmp94 = _tmp32 * _tmp89;
  const Scalar _tmp95 = _tmp70 * _tmp94;
  const Scalar _tmp96 = _tmp55 * sqrt_info(2, 1);
  const Scalar _tmp97 = _tmp65 * _tmp94;
  const Scalar _tmp98 = _tmp74 * _tmp92;
  const Scalar _tmp99 = -_tmp56 * sqrt_info(2, 0) - _tmp58 * _tmp90 + _tmp63 * _tmp93 -
                        _tmp63 * _tmp95 - _tmp63 * _tmp97 + _tmp63 * _tmp98 - _tmp67 * _tmp91 -
                        _tmp75 * _tmp91 - _tmp76 * _tmp96;
  const Scalar _tmp100 = _tmp37 - _tmp38;
  const Scalar _tmp101 = _tmp100 + _tmp34 + _tmp35;
  const Scalar _tmp102 = _tmp101 * _tmp70;
  const Scalar _tmp103 = _tmp101 * _tmp66;
  const Scalar _tmp104 = _tmp101 * _tmp74;
  const Scalar _tmp105 = _tmp104 * _tmp40;
  const Scalar _tmp106 = _tmp104 * _tmp9;
  const Scalar _tmp107 = -_tmp15;
  const Scalar _tmp108 = _tmp55 * (_tmp107 + _tmp13 + _tmp47);
  const Scalar _tmp109 = _tmp29 + _tmp30;
  const Scalar _tmp110 = _tmp55 * (_tmp109 + _tmp25 + _tmp28);
  const Scalar _tmp111 = _tmp5 + _tmp7;
  const Scalar _tmp112 = _tmp111 + _tmp3 + _tmp61;
  const Scalar _tmp113 = _tmp101 * _tmp69 - _tmp101 * _tmp78 - _tmp102 * _tmp72 - _tmp103 * _tmp60 +
                         _tmp105 * sqrt_info(0, 1) - _tmp106 * sqrt_info(0, 0) +
                         _tmp108 * sqrt_info(0, 1) - _tmp110 * sqrt_info(0, 0) + _tmp112 * _tmp59;
  const Scalar _tmp114 = _tmp101 * _tmp84 - _tmp101 * _tmp87 - _tmp102 * _tmp44 - _tmp103 * _tmp82 -
                         _tmp104 * _tmp82 + _tmp105 * sqrt_info(1, 1) + _tmp108 * sqrt_info(1, 1) -
                         _tmp110 * sqrt_info(1, 0) + _tmp112 * _tmp81;
  const Scalar _tmp115 = _tmp101 * _tmp93 - _tmp101 * _tmp97 - _tmp102 * _tmp94 - _tmp103 * _tmp91 +
                         _tmp105 * sqrt_info(2, 1) - _tmp106 * sqrt_info(2, 0) +
                         _tmp108 * sqrt_info(2, 1) - _tmp110 * sqrt_info(2, 0) + _tmp112 * _tmp90;
  const Scalar _tmp116 = _tmp109 + _tmp26 + _tmp27;
  const Scalar _tmp117 = _tmp116 * _tmp74;
  const Scalar _tmp118 = _tmp117 * _tmp40;
  const Scalar _tmp119 = _tmp117 * _tmp9;
  const Scalar _tmp120 = _tmp116 * _tmp70;
  const Scalar _tmp121 = _tmp116 * _tmp66;
  const Scalar _tmp122 = _tmp54 * (_tmp10 + _tmp107 + _tmp48);
  const Scalar _tmp123 = _tmp55 * (_tmp100 + _tmp36 + _tmp57);
  const Scalar _tmp124 = _tmp1 + _tmp111 + _tmp62;
  const Scalar _tmp125 = _tmp121 * _tmp40;
  const Scalar _tmp126 = _tmp116 * _tmp78 - _tmp118 * sqrt_info(0, 1) + _tmp119 * sqrt_info(0, 0) +
                         _tmp120 * _tmp72 + _tmp121 * _tmp60 + _tmp122 * _tmp71 -
                         _tmp123 * sqrt_info(0, 0) - _tmp124 * _tmp77 - _tmp125 * sqrt_info(0, 1);
  const Scalar _tmp127 = _tmp116 * _tmp87 + _tmp117 * _tmp82 - _tmp118 * sqrt_info(1, 1) +
                         _tmp120 * _tmp44 + _tmp121 * _tmp82 + _tmp122 * _tmp43 -
                         _tmp123 * sqrt_info(1, 0) - _tmp124 * _tmp86 - _tmp125 * sqrt_info(1, 1);
  const Scalar _tmp128 = _tmp116 * _tmp97 - _tmp117 * _tmp92 + _tmp119 * sqrt_info(2, 0) +
                         _tmp120 * _tmp94 + _tmp121 * _tmp91 - _tmp121 * _tmp92 + _tmp122 * _tmp89 -
                         _tmp123 * sqrt_info(2, 0) - _tmp124 * _tmp96;
  const Scalar _tmp129 = _tmp16 * _tmp55;
  const Scalar _tmp130 = std::pow(_tmp9, Scalar(2));
  const Scalar _tmp131 = _tmp130 * _tmp74;
  const Scalar _tmp132 = _tmp40 * _tmp74;
  const Scalar _tmp133 = _tmp132 * _tmp9;
  const Scalar _tmp134 = _tmp130 * _tmp66;
  const Scalar _tmp135 = _tmp129 * sqrt_info(0, 0) + _tmp131 * sqrt_info(0, 0) -
                         _tmp133 * sqrt_info(0, 1) + _tmp134 * sqrt_info(0, 0) + _tmp32 * _tmp77 +
                         _tmp40 * _tmp59 - _tmp69 * _tmp9 + _tmp73 * _tmp9 + _tmp78 * _tmp9;
  const Scalar _tmp136 = _tmp129 * sqrt_info(1, 0) + _tmp131 * sqrt_info(1, 0) -
                         _tmp133 * sqrt_info(1, 1) + _tmp134 * sqrt_info(1, 0) + _tmp32 * _tmp86 +
                         _tmp40 * _tmp81 - _tmp84 * _tmp9 + _tmp85 * _tmp9 + _tmp87 * _tmp9;
  const Scalar _tmp137 = _tmp32 * _tmp55;
  const Scalar _tmp138 = _tmp129 * sqrt_info(2, 0) + _tmp131 * sqrt_info(2, 0) +
                         _tmp134 * sqrt_info(2, 0) + _tmp137 * sqrt_info(2, 1) + _tmp40 * _tmp90 -
                         _tmp9 * _tmp93 + _tmp9 * _tmp95 + _tmp9 * _tmp97 - _tmp9 * _tmp98;
  const Scalar _tmp139 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp140 = _tmp139 * _tmp74;
  const Scalar _tmp141 = _tmp139 * _tmp66;
  const Scalar _tmp142 = -_tmp133 * sqrt_info(0, 0) - _tmp137 * sqrt_info(0, 0) +
                         _tmp140 * sqrt_info(0, 1) + _tmp141 * sqrt_info(0, 1) + _tmp16 * _tmp77 -
                         _tmp40 * _tmp73 - _tmp40 * _tmp78 + _tmp59 * _tmp9 - _tmp60 * _tmp83;
  const Scalar _tmp143 = -_tmp132 * _tmp82 - _tmp137 * sqrt_info(1, 0) + _tmp140 * sqrt_info(1, 1) +
                         _tmp141 * sqrt_info(1, 1) + _tmp16 * _tmp86 - _tmp40 * _tmp85 -
                         _tmp40 * _tmp87 + _tmp81 * _tmp9 - _tmp82 * _tmp83;
  const Scalar _tmp144 = _tmp129 * sqrt_info(2, 1) - _tmp132 * _tmp91 - _tmp137 * sqrt_info(2, 0) +
                         _tmp140 * sqrt_info(2, 1) + _tmp141 * sqrt_info(2, 1) - _tmp40 * _tmp95 -
                         _tmp40 * _tmp97 - _tmp83 * _tmp91 + _tmp9 * _tmp90;
  const Scalar _tmp145 = _tmp40 * _tmp55;
  const Scalar _tmp146 = _tmp132 * _tmp32;
  const Scalar _tmp147 = _tmp32 * _tmp74;
  const Scalar _tmp148 = _tmp32 * _tmp66;
  const Scalar _tmp149 = std::pow(_tmp32, Scalar(2));
  const Scalar _tmp150 = _tmp149 * _tmp70;
  const Scalar _tmp151 = _tmp149 * _tmp65;
  const Scalar _tmp152 = _tmp129 * sqrt_info(0, 2) - _tmp145 * sqrt_info(0, 0) -
                         _tmp146 * sqrt_info(0, 1) + _tmp147 * _tmp60 + _tmp148 * _tmp60 -
                         _tmp148 * _tmp68 + _tmp150 * _tmp71 + _tmp151 * _tmp71 - _tmp77 * _tmp9;
  const Scalar _tmp153 = -_tmp145 * sqrt_info(1, 0) - _tmp146 * sqrt_info(1, 1) + _tmp147 * _tmp82 -
                         _tmp148 * _tmp40 * sqrt_info(1, 1) + _tmp148 * _tmp82 + _tmp150 * _tmp43 +
                         _tmp151 * _tmp43 + _tmp16 * _tmp81 - _tmp86 * _tmp9;
  const Scalar _tmp154 = -_tmp145 * sqrt_info(2, 0) + _tmp147 * _tmp91 + _tmp148 * _tmp91 -
                         _tmp148 * _tmp92 + _tmp150 * _tmp89 + _tmp151 * _tmp89 + _tmp16 * _tmp90 -
                         _tmp32 * _tmp98 - _tmp9 * _tmp96;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp42;
    _res(1, 0) = _tmp45;
    _res(2, 0) = _tmp46;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp80;
    _jacobian(1, 0) = _tmp88;
    _jacobian(2, 0) = _tmp99;
    _jacobian(0, 1) = _tmp113;
    _jacobian(1, 1) = _tmp114;
    _jacobian(2, 1) = _tmp115;
    _jacobian(0, 2) = _tmp126;
    _jacobian(1, 2) = _tmp127;
    _jacobian(2, 2) = _tmp128;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(0, 6) = _tmp135;
    _jacobian(1, 6) = _tmp136;
    _jacobian(2, 6) = _tmp138;
    _jacobian(0, 7) = _tmp142;
    _jacobian(1, 7) = _tmp143;
    _jacobian(2, 7) = _tmp144;
    _jacobian(0, 8) = _tmp152;
    _jacobian(1, 8) = _tmp153;
    _jacobian(2, 8) = _tmp154;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp80, Scalar(2)) + std::pow(_tmp88, Scalar(2)) + std::pow(_tmp99, Scalar(2));
    _hessian(1, 0) = _tmp113 * _tmp80 + _tmp114 * _tmp88 + _tmp115 * _tmp99;
    _hessian(2, 0) = _tmp126 * _tmp80 + _tmp127 * _tmp88 + _tmp128 * _tmp99;
    _hessian(6, 0) = _tmp135 * _tmp80 + _tmp136 * _tmp88 + _tmp138 * _tmp99;
    _hessian(7, 0) = _tmp142 * _tmp80 + _tmp143 * _tmp88 + _tmp144 * _tmp99;
    _hessian(8, 0) = _tmp152 * _tmp80 + _tmp153 * _tmp88 + _tmp154 * _tmp99;
    _hessian(1, 1) =
        std::pow(_tmp113, Scalar(2)) + std::pow(_tmp114, Scalar(2)) + std::pow(_tmp115, Scalar(2));
    _hessian(2, 1) = _tmp113 * _tmp126 + _tmp114 * _tmp127 + _tmp115 * _tmp128;
    _hessian(6, 1) = _tmp113 * _tmp135 + _tmp114 * _tmp136 + _tmp115 * _tmp138;
    _hessian(7, 1) = _tmp113 * _tmp142 + _tmp114 * _tmp143 + _tmp115 * _tmp144;
    _hessian(8, 1) = _tmp113 * _tmp152 + _tmp114 * _tmp153 + _tmp115 * _tmp154;
    _hessian(2, 2) =
        std::pow(_tmp126, Scalar(2)) + std::pow(_tmp127, Scalar(2)) + std::pow(_tmp128, Scalar(2));
    _hessian(6, 2) = _tmp126 * _tmp135 + _tmp127 * _tmp136 + _tmp128 * _tmp138;
    _hessian(7, 2) = _tmp126 * _tmp142 + _tmp127 * _tmp143 + _tmp128 * _tmp144;
    _hessian(8, 2) = _tmp126 * _tmp152 + _tmp127 * _tmp153 + _tmp128 * _tmp154;
    _hessian(6, 6) =
        std::pow(_tmp135, Scalar(2)) + std::pow(_tmp136, Scalar(2)) + std::pow(_tmp138, Scalar(2));
    _hessian(7, 6) = _tmp135 * _tmp142 + _tmp136 * _tmp143 + _tmp138 * _tmp144;
    _hessian(8, 6) = _tmp135 * _tmp152 + _tmp136 * _tmp153 + _tmp138 * _tmp154;
    _hessian(7, 7) =
        std::pow(_tmp142, Scalar(2)) + std::pow(_tmp143, Scalar(2)) + std::pow(_tmp144, Scalar(2));
    _hessian(8, 7) = _tmp142 * _tmp152 + _tmp143 * _tmp153 + _tmp144 * _tmp154;
    _hessian(8, 8) =
        std::pow(_tmp152, Scalar(2)) + std::pow(_tmp153, Scalar(2)) + std::pow(_tmp154, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp42 * _tmp80 + _tmp45 * _tmp88 + _tmp46 * _tmp99;
    _rhs(1, 0) = _tmp113 * _tmp42 + _tmp114 * _tmp45 + _tmp115 * _tmp46;
    _rhs(2, 0) = _tmp126 * _tmp42 + _tmp127 * _tmp45 + _tmp128 * _tmp46;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
    _rhs(6, 0) = _tmp135 * _tmp42 + _tmp136 * _tmp45 + _tmp138 * _tmp46;
    _rhs(7, 0) = _tmp142 * _tmp42 + _tmp143 * _tmp45 + _tmp144 * _tmp46;
    _rhs(8, 0) = _tmp152 * _tmp42 + _tmp153 * _tmp45 + _tmp154 * _tmp46;
    _rhs(9, 0) = 0;
    _rhs(10, 0) = 0;
    _rhs(11, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
