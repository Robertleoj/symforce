// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkEquirectangularReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 4, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 4, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 984

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (255)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp2 = _tmp0 + _tmp1 + Scalar(-1) / Scalar(2);
  const Scalar _tmp3 =
      (source_calibration_storage(2, 0) - source_pixel(0, 0)) / source_calibration_storage(0, 0);
  const Scalar _tmp4 = std::cos(_tmp3);
  const Scalar _tmp5 =
      (source_calibration_storage(3, 0) - source_pixel(1, 0)) / source_calibration_storage(1, 0);
  const Scalar _tmp6 = std::sin(_tmp5);
  const Scalar _tmp7 = std::cos(_tmp5);
  const Scalar _tmp8 = std::pow(_tmp7, Scalar(2));
  const Scalar _tmp9 = std::sin(_tmp3);
  const Scalar _tmp10 =
      std::pow(Scalar(std::pow(_tmp4, Scalar(2)) * _tmp8 + std::pow(_tmp6, Scalar(2)) +
                      _tmp8 * std::pow(_tmp9, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp11 = _tmp10 * _tmp7;
  const Scalar _tmp12 = _tmp11 * _tmp4;
  const Scalar _tmp13 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp14 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = 2 * _tmp15;
  const Scalar _tmp17 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp18 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp19 = _tmp18 + Scalar(-1) / Scalar(2);
  const Scalar _tmp20 = _tmp11 * _tmp9;
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp23 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp24 = _tmp22 - _tmp23;
  const Scalar _tmp25 = _tmp10 * _tmp6;
  const Scalar _tmp26 = 2 * _tmp25;
  const Scalar _tmp27 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp28 = _tmp12 * _tmp16 + _tmp21 * (_tmp17 + _tmp19) - _tmp24 * _tmp26 -
                        _tmp27 * source_inverse_range;
  const Scalar _tmp29 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp30 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp31 = _tmp29 - _tmp30;
  const Scalar _tmp32 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp33 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp34 = _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp13 - _tmp14;
  const Scalar _tmp36 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp37 = 2 * _tmp12;
  const Scalar _tmp38 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp39 = -_tmp21 * _tmp35 - _tmp26 * _tmp34 -
                        _tmp37 * (_tmp17 + _tmp36 + Scalar(-1) / Scalar(2)) -
                        _tmp38 * source_inverse_range;
  const Scalar _tmp40 = _tmp31 * _tmp39;
  const Scalar _tmp41 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp42 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp43 = _tmp41 + _tmp42;
  const Scalar _tmp44 = _tmp22 + _tmp23;
  const Scalar _tmp45 = _tmp32 - _tmp33;
  const Scalar _tmp46 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp47 = -_tmp21 * _tmp44 + _tmp26 * (_tmp19 + _tmp36) - _tmp37 * _tmp45 -
                        _tmp46 * source_inverse_range;
  const Scalar _tmp48 = _tmp43 * _tmp47;
  const Scalar _tmp49 = _tmp2 * _tmp28 - _tmp40 - _tmp48;
  const Scalar _tmp50 = 2 * _tmp49;
  const Scalar _tmp51 = _tmp29 + _tmp30;
  const Scalar _tmp52 = _tmp28 * _tmp51;
  const Scalar _tmp53 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp54 = _tmp53 + Scalar(-1) / Scalar(2);
  const Scalar _tmp55 = _tmp0 + _tmp54;
  const Scalar _tmp56 = _tmp39 * _tmp55;
  const Scalar _tmp57 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp58 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp59 = _tmp57 - _tmp58;
  const Scalar _tmp60 = _tmp47 * _tmp59;
  const Scalar _tmp61 = _tmp52 + _tmp60;
  const Scalar _tmp62 = -_tmp56 + _tmp61;
  const Scalar _tmp63 = 2 * _tmp52 - 2 * _tmp56 + 2 * _tmp60 +
                        epsilon * ((((_tmp62) > 0) - ((_tmp62) < 0)) + Scalar(0.5));
  const Scalar _tmp64 = -target_calibration_storage(0, 0) * std::atan2(-_tmp50, _tmp63) -
                        target_calibration_storage(2, 0) + target_pixel(0, 0);
  const Scalar _tmp65 = _tmp1 + _tmp54;
  const Scalar _tmp66 = _tmp41 - _tmp42;
  const Scalar _tmp67 = _tmp28 * _tmp66;
  const Scalar _tmp68 = _tmp57 + _tmp58;
  const Scalar _tmp69 = _tmp39 * _tmp68;
  const Scalar _tmp70 = _tmp67 - _tmp69;
  const Scalar _tmp71 = _tmp47 * _tmp65 + _tmp70;
  const Scalar _tmp72 = std::pow(_tmp49, Scalar(2));
  const Scalar _tmp73 = 4 * _tmp72;
  const Scalar _tmp74 = std::pow(_tmp62, Scalar(2));
  const Scalar _tmp75 = _tmp73 + 4 * _tmp74 + epsilon;
  const Scalar _tmp76 = std::sqrt(_tmp75);
  const Scalar _tmp77 = -target_calibration_storage(1, 0) * std::atan2(-2 * _tmp71, _tmp76) -
                        target_calibration_storage(3, 0) + target_pixel(1, 0);
  const Scalar _tmp78 = std::pow(_tmp64, Scalar(2)) + std::pow(_tmp77, Scalar(2)) + epsilon;
  const Scalar _tmp79 = std::pow(_tmp78, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp80 = std::sqrt(weight);
  const Scalar _tmp81 = std::pow(_tmp71, Scalar(2));
  const Scalar _tmp82 =
      std::max<Scalar>(0, (((_tmp72 + _tmp74 + _tmp81) > 0) - ((_tmp72 + _tmp74 + _tmp81) < 0)));
  const Scalar _tmp83 = Scalar(1.0) / (-epsilon + gnc_mu - 1);
  const Scalar _tmp84 = epsilon + std::fabs(_tmp83);
  const Scalar _tmp85 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp86 = _tmp78 * _tmp85 / _tmp84 + 1;
  const Scalar _tmp87 = _tmp83 + 2;
  const Scalar _tmp88 =
      _tmp87 + 2 * epsilon *
                   (std::min<Scalar>(0, (((_tmp87) > 0) - ((_tmp87) < 0))) + Scalar(1) / Scalar(2));
  const Scalar _tmp89 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(_tmp84 * (std::pow(_tmp86, Scalar((Scalar(1) / Scalar(2)) * _tmp88)) - 1) /
                       _tmp88));
  const Scalar _tmp90 = std::max<Scalar>(
      0, std::min<Scalar>(
             (((Scalar(M_PI) - std::fabs(_tmp3)) > 0) - ((Scalar(M_PI) - std::fabs(_tmp3)) < 0)),
             (((-std::fabs(_tmp5) + Scalar(M_PI_2)) > 0) -
              ((-std::fabs(_tmp5) + Scalar(M_PI_2)) < 0))));
  const Scalar _tmp91 = _tmp80 * _tmp82 * _tmp89 * _tmp90;
  const Scalar _tmp92 = _tmp79 * _tmp91;
  const Scalar _tmp93 = _tmp64 * _tmp92;
  const Scalar _tmp94 = _tmp77 * _tmp92;
  const Scalar _tmp95 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp96 = -_tmp17;
  const Scalar _tmp97 = -_tmp36;
  const Scalar _tmp98 = _tmp18 + _tmp95 + _tmp96 + _tmp97;
  const Scalar _tmp99 = -_tmp25 * _tmp98 - _tmp34 * _tmp37;
  const Scalar _tmp100 = _tmp55 * _tmp99;
  const Scalar _tmp101 = _tmp18 - _tmp95;
  const Scalar _tmp102 = _tmp101 + _tmp36 + _tmp96;
  const Scalar _tmp103 = _tmp102 * _tmp12 + _tmp26 * _tmp45;
  const Scalar _tmp104 = _tmp103 * _tmp59;
  const Scalar _tmp105 = _tmp12 * _tmp24 + _tmp15 * _tmp25;
  const Scalar _tmp106 = 4 * _tmp51;
  const Scalar _tmp107 = std::pow(_tmp63, Scalar(2));
  const Scalar _tmp108 = Scalar(1.0) / (_tmp107);
  const Scalar _tmp109 = _tmp108 * _tmp49;
  const Scalar _tmp110 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp111 = 2 * _tmp105;
  const Scalar _tmp112 = -_tmp103 * _tmp43 - _tmp111 * _tmp2 - _tmp31 * _tmp99;
  const Scalar _tmp113 =
      _tmp109 * (-2 * _tmp100 + 2 * _tmp104 - _tmp105 * _tmp106) - _tmp110 * _tmp112;
  const Scalar _tmp114 = target_calibration_storage(0, 0) / (_tmp107 + _tmp73);
  const Scalar _tmp115 = _tmp114 * _tmp64;
  const Scalar _tmp116 = _tmp107 * _tmp115;
  const Scalar _tmp117 = 4 * _tmp116;
  const Scalar _tmp118 = Scalar(1.0) / (_tmp76);
  const Scalar _tmp119 = 2 * _tmp118;
  const Scalar _tmp120 = 8 * _tmp71;
  const Scalar _tmp121 = _tmp120 / (_tmp75 * std::sqrt(_tmp75));
  const Scalar _tmp122 =
      -_tmp119 * (_tmp103 * _tmp65 - _tmp111 * _tmp66 - _tmp68 * _tmp99) +
      _tmp121 * (_tmp112 * _tmp49 + _tmp62 * (-_tmp100 + _tmp104 - _tmp111 * _tmp51));
  const Scalar _tmp123 = target_calibration_storage(1, 0) / (_tmp75 + 4 * _tmp81);
  const Scalar _tmp124 = _tmp123 * _tmp77;
  const Scalar _tmp125 = _tmp124 * _tmp75;
  const Scalar _tmp126 = 2 * _tmp125;
  const Scalar _tmp127 = -_tmp113 * _tmp117 - _tmp122 * _tmp126;
  const Scalar _tmp128 = _tmp91 / (_tmp78 * std::sqrt(_tmp78));
  const Scalar _tmp129 = _tmp128 * _tmp64;
  const Scalar _tmp130 = (Scalar(1) / Scalar(2)) * _tmp129;
  const Scalar _tmp131 = _tmp79 * _tmp80 * _tmp82 * _tmp85 *
                         std::pow(_tmp86, Scalar((Scalar(1) / Scalar(2)) * _tmp88 - 1)) * _tmp90 /
                         _tmp89;
  const Scalar _tmp132 = _tmp131 * _tmp64;
  const Scalar _tmp133 = (Scalar(1) / Scalar(2)) * _tmp132;
  const Scalar _tmp134 = _tmp114 * _tmp92;
  const Scalar _tmp135 = _tmp107 * _tmp134;
  const Scalar _tmp136 = 2 * _tmp135;
  const Scalar _tmp137 = _tmp113 * _tmp136 + _tmp127 * _tmp130 - _tmp127 * _tmp133;
  const Scalar _tmp138 = _tmp131 * _tmp77;
  const Scalar _tmp139 = (Scalar(1) / Scalar(2)) * _tmp138;
  const Scalar _tmp140 = _tmp123 * _tmp92;
  const Scalar _tmp141 = _tmp140 * _tmp75;
  const Scalar _tmp142 = _tmp128 * _tmp77;
  const Scalar _tmp143 = (Scalar(1) / Scalar(2)) * _tmp142;
  const Scalar _tmp144 = _tmp122 * _tmp141 - _tmp127 * _tmp139 + _tmp127 * _tmp143;
  const Scalar _tmp145 = _tmp101 + _tmp17 + _tmp97;
  const Scalar _tmp146 = -_tmp12 * _tmp145 + _tmp16 * _tmp20;
  const Scalar _tmp147 = _tmp146 * _tmp51;
  const Scalar _tmp148 = _tmp20 * _tmp98 + _tmp35 * _tmp37;
  const Scalar _tmp149 = _tmp148 * _tmp55;
  const Scalar _tmp150 = _tmp12 * _tmp44 - _tmp20 * _tmp45;
  const Scalar _tmp151 = _tmp150 * _tmp59;
  const Scalar _tmp152 = 2 * _tmp150;
  const Scalar _tmp153 = _tmp146 * _tmp2 - _tmp148 * _tmp31 - _tmp152 * _tmp43;
  const Scalar _tmp154 = -_tmp119 * (_tmp146 * _tmp66 - _tmp148 * _tmp68 + _tmp152 * _tmp65) +
                         _tmp121 * (_tmp153 * _tmp49 + _tmp62 * (_tmp147 - _tmp149 + 2 * _tmp151));
  const Scalar _tmp155 = _tmp109 * (2 * _tmp147 - 2 * _tmp149 + 4 * _tmp151) - _tmp110 * _tmp153;
  const Scalar _tmp156 = -_tmp117 * _tmp155 - _tmp126 * _tmp154;
  const Scalar _tmp157 = _tmp130 * _tmp156 - _tmp133 * _tmp156 + _tmp136 * _tmp155;
  const Scalar _tmp158 = -_tmp139 * _tmp156 + _tmp141 * _tmp154 + _tmp143 * _tmp156;
  const Scalar _tmp159 = -_tmp20 * _tmp34 + _tmp25 * _tmp35;
  const Scalar _tmp160 = 4 * _tmp55;
  const Scalar _tmp161 = -_tmp145 * _tmp25 - _tmp21 * _tmp24;
  const Scalar _tmp162 = _tmp161 * _tmp51;
  const Scalar _tmp163 = _tmp102 * _tmp20 + _tmp26 * _tmp44;
  const Scalar _tmp164 = _tmp163 * _tmp59;
  const Scalar _tmp165 = 2 * _tmp159;
  const Scalar _tmp166 = _tmp161 * _tmp2 - _tmp163 * _tmp43 - _tmp165 * _tmp31;
  const Scalar _tmp167 =
      _tmp109 * (-_tmp159 * _tmp160 + 2 * _tmp162 + 2 * _tmp164) - _tmp110 * _tmp166;
  const Scalar _tmp168 =
      -_tmp119 * (_tmp161 * _tmp66 + _tmp163 * _tmp65 - _tmp165 * _tmp68) +
      _tmp121 * (_tmp166 * _tmp49 + _tmp62 * (_tmp162 + _tmp164 - _tmp165 * _tmp55));
  const Scalar _tmp169 = -_tmp117 * _tmp167 - _tmp126 * _tmp168;
  const Scalar _tmp170 = _tmp130 * _tmp169 - _tmp133 * _tmp169 + _tmp136 * _tmp167;
  const Scalar _tmp171 = -_tmp139 * _tmp169 + _tmp141 * _tmp168 + _tmp143 * _tmp169;
  const Scalar _tmp172 = 2 * _tmp110;
  const Scalar _tmp173 = _tmp172 * source_inverse_range;
  const Scalar _tmp174 = _tmp173 * _tmp2;
  const Scalar _tmp175 = _tmp49 * source_inverse_range;
  const Scalar _tmp176 = _tmp108 * _tmp175;
  const Scalar _tmp177 = _tmp106 * _tmp176;
  const Scalar _tmp178 = -_tmp174 + _tmp177;
  const Scalar _tmp179 = _tmp62 * source_inverse_range;
  const Scalar _tmp180 = _tmp121 * (_tmp175 * _tmp2 + _tmp179 * _tmp51);
  const Scalar _tmp181 = _tmp119 * source_inverse_range;
  const Scalar _tmp182 = _tmp181 * _tmp66;
  const Scalar _tmp183 = _tmp180 - _tmp182;
  const Scalar _tmp184 = _tmp116 * _tmp178 + _tmp125 * _tmp183;
  const Scalar _tmp185 = -_tmp129 * _tmp184 + _tmp132 * _tmp184 + _tmp135 * _tmp178;
  const Scalar _tmp186 = _tmp138 * _tmp184 + _tmp141 * _tmp183 - _tmp142 * _tmp184;
  const Scalar _tmp187 = _tmp173 * _tmp43;
  const Scalar _tmp188 = 4 * _tmp176 * _tmp59;
  const Scalar _tmp189 = _tmp187 + _tmp188;
  const Scalar _tmp190 = _tmp121 * (_tmp175 * _tmp43 - _tmp179 * _tmp59);
  const Scalar _tmp191 = _tmp181 * _tmp65;
  const Scalar _tmp192 = -_tmp190 - _tmp191;
  const Scalar _tmp193 = _tmp116 * _tmp189 + _tmp125 * _tmp192;
  const Scalar _tmp194 = -_tmp129 * _tmp193 + _tmp132 * _tmp193 + _tmp135 * _tmp189;
  const Scalar _tmp195 = _tmp138 * _tmp193 + _tmp141 * _tmp192 - _tmp142 * _tmp193;
  const Scalar _tmp196 = _tmp173 * _tmp31;
  const Scalar _tmp197 = _tmp160 * _tmp176;
  const Scalar _tmp198 = _tmp196 - _tmp197;
  const Scalar _tmp199 = _tmp121 * (_tmp175 * _tmp31 + _tmp179 * _tmp55);
  const Scalar _tmp200 = _tmp181 * _tmp68;
  const Scalar _tmp201 = -_tmp199 + _tmp200;
  const Scalar _tmp202 = _tmp116 * _tmp198 + _tmp125 * _tmp201;
  const Scalar _tmp203 = -_tmp129 * _tmp202 + _tmp132 * _tmp202 + _tmp135 * _tmp198;
  const Scalar _tmp204 = _tmp202 * _tmp77;
  const Scalar _tmp205 = _tmp128 * _tmp204 - _tmp131 * _tmp204 - _tmp141 * _tmp201;
  const Scalar _tmp206 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp207 = -_tmp206;
  const Scalar _tmp208 = -_tmp0 + _tmp53;
  const Scalar _tmp209 = _tmp47 * (_tmp1 + _tmp207 + _tmp208);
  const Scalar _tmp210 = _tmp209 + 2 * _tmp67 - 2 * _tmp69;
  const Scalar _tmp211 = (Scalar(1) / Scalar(2)) * _tmp209 + _tmp70;
  const Scalar _tmp212 = _tmp121 * _tmp211;
  const Scalar _tmp213 = -_tmp1;
  const Scalar _tmp214 = (Scalar(1) / Scalar(2)) * _tmp39 * (_tmp0 + _tmp207 + _tmp213 + _tmp53);
  const Scalar _tmp215 = -_tmp119 * (_tmp214 - _tmp52 - _tmp60) + _tmp212 * _tmp62;
  const Scalar _tmp216 = 4 * _tmp115;
  const Scalar _tmp217 = -_tmp126 * _tmp215 - _tmp210 * _tmp216 * _tmp49;
  const Scalar _tmp218 = _tmp130 * _tmp217 - _tmp133 * _tmp217 + _tmp134 * _tmp210 * _tmp50;
  const Scalar _tmp219 = -_tmp139 * _tmp217 + _tmp141 * _tmp215 + _tmp143 * _tmp217;
  const Scalar _tmp220 = -_tmp214 + _tmp61;
  const Scalar _tmp221 = _tmp28 * (_tmp206 + _tmp208 + _tmp213);
  const Scalar _tmp222 = -_tmp109 * (_tmp221 + 2 * _tmp40 + 2 * _tmp48) + _tmp110 * _tmp220;
  const Scalar _tmp223 = (Scalar(1) / Scalar(2)) * _tmp221 + _tmp40 + _tmp48;
  const Scalar _tmp224 = _tmp118 * (_tmp220 * _tmp49 + _tmp223 * _tmp62);
  const Scalar _tmp225 = _tmp117 * _tmp222 - 16 * _tmp124 * _tmp224 * _tmp71;
  const Scalar _tmp226 = _tmp130 * _tmp225 - _tmp133 * _tmp225 - _tmp136 * _tmp222;
  const Scalar _tmp227 = _tmp120 * _tmp140 * _tmp224 - _tmp139 * _tmp225 + _tmp143 * _tmp225;
  const Scalar _tmp228 = -_tmp119 * _tmp223 + _tmp212 * _tmp49;
  const Scalar _tmp229 = _tmp211 * _tmp63;
  const Scalar _tmp230 = -_tmp126 * _tmp228 + _tmp216 * _tmp229;
  const Scalar _tmp231 = _tmp130 * _tmp230 - _tmp133 * _tmp230 - 2 * _tmp134 * _tmp229;
  const Scalar _tmp232 = -_tmp139 * _tmp230 + _tmp141 * _tmp228 + _tmp143 * _tmp230;
  const Scalar _tmp233 = _tmp174 - _tmp177;
  const Scalar _tmp234 = -_tmp180 + _tmp182;
  const Scalar _tmp235 = _tmp116 * _tmp233 + _tmp125 * _tmp234;
  const Scalar _tmp236 = -_tmp129 * _tmp235 + _tmp132 * _tmp235 + _tmp135 * _tmp233;
  const Scalar _tmp237 = _tmp138 * _tmp235 + _tmp141 * _tmp234 - _tmp142 * _tmp235;
  const Scalar _tmp238 = -_tmp187 - _tmp188;
  const Scalar _tmp239 = _tmp190 + _tmp191;
  const Scalar _tmp240 = _tmp116 * _tmp238 + _tmp125 * _tmp239;
  const Scalar _tmp241 = -_tmp129 * _tmp240 + _tmp132 * _tmp240 + _tmp135 * _tmp238;
  const Scalar _tmp242 = _tmp138 * _tmp240 + _tmp141 * _tmp239 - _tmp142 * _tmp240;
  const Scalar _tmp243 = -_tmp196 + _tmp197;
  const Scalar _tmp244 = _tmp199 - _tmp200;
  const Scalar _tmp245 = _tmp116 * _tmp243 + _tmp125 * _tmp244;
  const Scalar _tmp246 = _tmp129 * _tmp245 - _tmp132 * _tmp245 - _tmp135 * _tmp243;
  const Scalar _tmp247 = _tmp138 * _tmp245 + _tmp141 * _tmp244 - _tmp142 * _tmp245;
  const Scalar _tmp248 = _tmp27 * _tmp51 - _tmp38 * _tmp55 + _tmp46 * _tmp59;
  const Scalar _tmp249 = -_tmp2 * _tmp27 + _tmp31 * _tmp38 + _tmp43 * _tmp46;
  const Scalar _tmp250 = -4 * _tmp109 * _tmp248 - _tmp172 * _tmp249;
  const Scalar _tmp251 = _tmp119 * (_tmp27 * _tmp66 - _tmp38 * _tmp68 + _tmp46 * _tmp65) +
                         _tmp121 * (-_tmp248 * _tmp62 + _tmp249 * _tmp49);
  const Scalar _tmp252 = _tmp116 * _tmp250 + _tmp125 * _tmp251;
  const Scalar _tmp253 = -_tmp129 * _tmp252 + _tmp132 * _tmp252 + _tmp135 * _tmp250;
  const Scalar _tmp254 = _tmp138 * _tmp252 + _tmp141 * _tmp251 - _tmp142 * _tmp252;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = -_tmp93;
    _res(1, 0) = -_tmp94;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp137;
    _jacobian(1, 0) = _tmp144;
    _jacobian(0, 1) = _tmp157;
    _jacobian(1, 1) = _tmp158;
    _jacobian(0, 2) = _tmp170;
    _jacobian(1, 2) = _tmp171;
    _jacobian(0, 3) = _tmp185;
    _jacobian(1, 3) = _tmp186;
    _jacobian(0, 4) = _tmp194;
    _jacobian(1, 4) = _tmp195;
    _jacobian(0, 5) = _tmp203;
    _jacobian(1, 5) = -_tmp205;
    _jacobian(0, 6) = _tmp218;
    _jacobian(1, 6) = _tmp219;
    _jacobian(0, 7) = _tmp226;
    _jacobian(1, 7) = _tmp227;
    _jacobian(0, 8) = _tmp231;
    _jacobian(1, 8) = _tmp232;
    _jacobian(0, 9) = _tmp236;
    _jacobian(1, 9) = _tmp237;
    _jacobian(0, 10) = _tmp241;
    _jacobian(1, 10) = _tmp242;
    _jacobian(0, 11) = -_tmp246;
    _jacobian(1, 11) = _tmp247;
    _jacobian(0, 12) = _tmp253;
    _jacobian(1, 12) = _tmp254;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp137, Scalar(2)) + std::pow(_tmp144, Scalar(2));
    _hessian(1, 0) = _tmp137 * _tmp157 + _tmp144 * _tmp158;
    _hessian(2, 0) = _tmp137 * _tmp170 + _tmp144 * _tmp171;
    _hessian(3, 0) = _tmp137 * _tmp185 + _tmp144 * _tmp186;
    _hessian(4, 0) = _tmp137 * _tmp194 + _tmp144 * _tmp195;
    _hessian(5, 0) = _tmp137 * _tmp203 - _tmp144 * _tmp205;
    _hessian(6, 0) = _tmp137 * _tmp218 + _tmp144 * _tmp219;
    _hessian(7, 0) = _tmp137 * _tmp226 + _tmp144 * _tmp227;
    _hessian(8, 0) = _tmp137 * _tmp231 + _tmp144 * _tmp232;
    _hessian(9, 0) = _tmp137 * _tmp236 + _tmp144 * _tmp237;
    _hessian(10, 0) = _tmp137 * _tmp241 + _tmp144 * _tmp242;
    _hessian(11, 0) = -_tmp137 * _tmp246 + _tmp144 * _tmp247;
    _hessian(12, 0) = _tmp137 * _tmp253 + _tmp144 * _tmp254;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp157, Scalar(2)) + std::pow(_tmp158, Scalar(2));
    _hessian(2, 1) = _tmp157 * _tmp170 + _tmp158 * _tmp171;
    _hessian(3, 1) = _tmp157 * _tmp185 + _tmp158 * _tmp186;
    _hessian(4, 1) = _tmp157 * _tmp194 + _tmp158 * _tmp195;
    _hessian(5, 1) = _tmp157 * _tmp203 - _tmp158 * _tmp205;
    _hessian(6, 1) = _tmp157 * _tmp218 + _tmp158 * _tmp219;
    _hessian(7, 1) = _tmp157 * _tmp226 + _tmp158 * _tmp227;
    _hessian(8, 1) = _tmp157 * _tmp231 + _tmp158 * _tmp232;
    _hessian(9, 1) = _tmp157 * _tmp236 + _tmp158 * _tmp237;
    _hessian(10, 1) = _tmp157 * _tmp241 + _tmp158 * _tmp242;
    _hessian(11, 1) = -_tmp157 * _tmp246 + _tmp158 * _tmp247;
    _hessian(12, 1) = _tmp157 * _tmp253 + _tmp158 * _tmp254;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp170, Scalar(2)) + std::pow(_tmp171, Scalar(2));
    _hessian(3, 2) = _tmp170 * _tmp185 + _tmp171 * _tmp186;
    _hessian(4, 2) = _tmp170 * _tmp194 + _tmp171 * _tmp195;
    _hessian(5, 2) = _tmp170 * _tmp203 - _tmp171 * _tmp205;
    _hessian(6, 2) = _tmp170 * _tmp218 + _tmp171 * _tmp219;
    _hessian(7, 2) = _tmp170 * _tmp226 + _tmp171 * _tmp227;
    _hessian(8, 2) = _tmp170 * _tmp231 + _tmp171 * _tmp232;
    _hessian(9, 2) = _tmp170 * _tmp236 + _tmp171 * _tmp237;
    _hessian(10, 2) = _tmp170 * _tmp241 + _tmp171 * _tmp242;
    _hessian(11, 2) = -_tmp170 * _tmp246 + _tmp171 * _tmp247;
    _hessian(12, 2) = _tmp170 * _tmp253 + _tmp171 * _tmp254;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp185, Scalar(2)) + std::pow(_tmp186, Scalar(2));
    _hessian(4, 3) = _tmp185 * _tmp194 + _tmp186 * _tmp195;
    _hessian(5, 3) = _tmp185 * _tmp203 - _tmp186 * _tmp205;
    _hessian(6, 3) = _tmp185 * _tmp218 + _tmp186 * _tmp219;
    _hessian(7, 3) = _tmp185 * _tmp226 + _tmp186 * _tmp227;
    _hessian(8, 3) = _tmp185 * _tmp231 + _tmp186 * _tmp232;
    _hessian(9, 3) = _tmp185 * _tmp236 + _tmp186 * _tmp237;
    _hessian(10, 3) = _tmp185 * _tmp241 + _tmp186 * _tmp242;
    _hessian(11, 3) = -_tmp185 * _tmp246 + _tmp186 * _tmp247;
    _hessian(12, 3) = _tmp185 * _tmp253 + _tmp186 * _tmp254;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp194, Scalar(2)) + std::pow(_tmp195, Scalar(2));
    _hessian(5, 4) = _tmp194 * _tmp203 - _tmp195 * _tmp205;
    _hessian(6, 4) = _tmp194 * _tmp218 + _tmp195 * _tmp219;
    _hessian(7, 4) = _tmp194 * _tmp226 + _tmp195 * _tmp227;
    _hessian(8, 4) = _tmp194 * _tmp231 + _tmp195 * _tmp232;
    _hessian(9, 4) = _tmp194 * _tmp236 + _tmp195 * _tmp237;
    _hessian(10, 4) = _tmp194 * _tmp241 + _tmp195 * _tmp242;
    _hessian(11, 4) = -_tmp194 * _tmp246 + _tmp195 * _tmp247;
    _hessian(12, 4) = _tmp194 * _tmp253 + _tmp195 * _tmp254;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp203, Scalar(2)) + std::pow(_tmp205, Scalar(2));
    _hessian(6, 5) = _tmp203 * _tmp218 - _tmp205 * _tmp219;
    _hessian(7, 5) = _tmp203 * _tmp226 - _tmp205 * _tmp227;
    _hessian(8, 5) = _tmp203 * _tmp231 - _tmp205 * _tmp232;
    _hessian(9, 5) = _tmp203 * _tmp236 - _tmp205 * _tmp237;
    _hessian(10, 5) = _tmp203 * _tmp241 - _tmp205 * _tmp242;
    _hessian(11, 5) = -_tmp203 * _tmp246 - _tmp205 * _tmp247;
    _hessian(12, 5) = _tmp203 * _tmp253 - _tmp205 * _tmp254;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp218, Scalar(2)) + std::pow(_tmp219, Scalar(2));
    _hessian(7, 6) = _tmp218 * _tmp226 + _tmp219 * _tmp227;
    _hessian(8, 6) = _tmp218 * _tmp231 + _tmp219 * _tmp232;
    _hessian(9, 6) = _tmp218 * _tmp236 + _tmp219 * _tmp237;
    _hessian(10, 6) = _tmp218 * _tmp241 + _tmp219 * _tmp242;
    _hessian(11, 6) = -_tmp218 * _tmp246 + _tmp219 * _tmp247;
    _hessian(12, 6) = _tmp218 * _tmp253 + _tmp219 * _tmp254;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp226, Scalar(2)) + std::pow(_tmp227, Scalar(2));
    _hessian(8, 7) = _tmp226 * _tmp231 + _tmp227 * _tmp232;
    _hessian(9, 7) = _tmp226 * _tmp236 + _tmp227 * _tmp237;
    _hessian(10, 7) = _tmp226 * _tmp241 + _tmp227 * _tmp242;
    _hessian(11, 7) = -_tmp226 * _tmp246 + _tmp227 * _tmp247;
    _hessian(12, 7) = _tmp226 * _tmp253 + _tmp227 * _tmp254;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp231, Scalar(2)) + std::pow(_tmp232, Scalar(2));
    _hessian(9, 8) = _tmp231 * _tmp236 + _tmp232 * _tmp237;
    _hessian(10, 8) = _tmp231 * _tmp241 + _tmp232 * _tmp242;
    _hessian(11, 8) = -_tmp231 * _tmp246 + _tmp232 * _tmp247;
    _hessian(12, 8) = _tmp231 * _tmp253 + _tmp232 * _tmp254;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp236, Scalar(2)) + std::pow(_tmp237, Scalar(2));
    _hessian(10, 9) = _tmp236 * _tmp241 + _tmp237 * _tmp242;
    _hessian(11, 9) = -_tmp236 * _tmp246 + _tmp237 * _tmp247;
    _hessian(12, 9) = _tmp236 * _tmp253 + _tmp237 * _tmp254;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp241, Scalar(2)) + std::pow(_tmp242, Scalar(2));
    _hessian(11, 10) = -_tmp241 * _tmp246 + _tmp242 * _tmp247;
    _hessian(12, 10) = _tmp241 * _tmp253 + _tmp242 * _tmp254;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp246, Scalar(2)) + std::pow(_tmp247, Scalar(2));
    _hessian(12, 11) = -_tmp246 * _tmp253 + _tmp247 * _tmp254;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp253, Scalar(2)) + std::pow(_tmp254, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp137 * _tmp93 - _tmp144 * _tmp94;
    _rhs(1, 0) = -_tmp157 * _tmp93 - _tmp158 * _tmp94;
    _rhs(2, 0) = -_tmp170 * _tmp93 - _tmp171 * _tmp94;
    _rhs(3, 0) = -_tmp185 * _tmp93 - _tmp186 * _tmp94;
    _rhs(4, 0) = -_tmp194 * _tmp93 - _tmp195 * _tmp94;
    _rhs(5, 0) = -_tmp203 * _tmp93 + _tmp205 * _tmp94;
    _rhs(6, 0) = -_tmp218 * _tmp93 - _tmp219 * _tmp94;
    _rhs(7, 0) = -_tmp226 * _tmp93 - _tmp227 * _tmp94;
    _rhs(8, 0) = -_tmp231 * _tmp93 - _tmp232 * _tmp94;
    _rhs(9, 0) = -_tmp236 * _tmp93 - _tmp237 * _tmp94;
    _rhs(10, 0) = -_tmp241 * _tmp93 - _tmp242 * _tmp94;
    _rhs(11, 0) = _tmp246 * _tmp93 - _tmp247 * _tmp94;
    _rhs(12, 0) = -_tmp253 * _tmp93 - _tmp254 * _tmp94;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
