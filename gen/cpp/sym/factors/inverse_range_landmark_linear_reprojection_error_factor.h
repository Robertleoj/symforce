// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkLinearReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 4, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 4, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 820

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (285)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp2 = _tmp0 + _tmp1 + Scalar(-1) / Scalar(2);
  const Scalar _tmp3 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp4 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = source_calibration_storage(3, 0) - source_pixel(1, 0);
  const Scalar _tmp7 = source_calibration_storage(2, 0) - source_pixel(0, 0);
  const Scalar _tmp8 = std::pow(
      Scalar(std::pow(_tmp6, Scalar(2)) / std::pow(source_calibration_storage(1, 0), Scalar(2)) +
             std::pow(_tmp7, Scalar(2)) / std::pow(source_calibration_storage(0, 0), Scalar(2)) +
             1),
      Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp9 = 2 * _tmp8;
  const Scalar _tmp10 = _tmp5 * _tmp9;
  const Scalar _tmp11 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp12 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp13 = _tmp8 * (_tmp11 - _tmp12);
  const Scalar _tmp14 = _tmp6 / source_calibration_storage(1, 0);
  const Scalar _tmp15 = 2 * _tmp14;
  const Scalar _tmp16 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp17 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp18 = _tmp17 + Scalar(-1) / Scalar(2);
  const Scalar _tmp19 = _tmp7 / source_calibration_storage(0, 0);
  const Scalar _tmp20 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp21 =
      _tmp10 - _tmp13 * _tmp15 + _tmp19 * _tmp9 * (_tmp16 + _tmp18) - _tmp20 * source_inverse_range;
  const Scalar _tmp22 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp23 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp26 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp27 = _tmp25 - _tmp26;
  const Scalar _tmp28 = _tmp27 * _tmp9;
  const Scalar _tmp29 = _tmp8 * (_tmp11 + _tmp12);
  const Scalar _tmp30 = 2 * _tmp19;
  const Scalar _tmp31 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp32 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp33 =
      _tmp14 * _tmp9 * (_tmp18 + _tmp31) - _tmp28 - _tmp29 * _tmp30 - _tmp32 * source_inverse_range;
  const Scalar _tmp34 = _tmp24 * _tmp33;
  const Scalar _tmp35 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp36 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp37 = _tmp35 - _tmp36;
  const Scalar _tmp38 = _tmp3 - _tmp4;
  const Scalar _tmp39 = _tmp38 * _tmp9;
  const Scalar _tmp40 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp41 = _tmp25 + _tmp26;
  const Scalar _tmp42 = _tmp41 * _tmp9;
  const Scalar _tmp43 = -_tmp14 * _tmp42 - _tmp19 * _tmp39 - _tmp40 * source_inverse_range -
                        _tmp9 * (_tmp16 + _tmp31 + Scalar(-1) / Scalar(2));
  const Scalar _tmp44 = _tmp37 * _tmp43;
  const Scalar _tmp45 = _tmp2 * _tmp21 - _tmp34 - _tmp44;
  const Scalar _tmp46 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp47 = _tmp46 + Scalar(-1) / Scalar(2);
  const Scalar _tmp48 = _tmp0 + _tmp47;
  const Scalar _tmp49 = _tmp35 + _tmp36;
  const Scalar _tmp50 = _tmp21 * _tmp49;
  const Scalar _tmp51 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp52 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp53 = _tmp51 - _tmp52;
  const Scalar _tmp54 = _tmp33 * _tmp53;
  const Scalar _tmp55 = _tmp50 + _tmp54;
  const Scalar _tmp56 = -_tmp43 * _tmp48 + _tmp55;
  const Scalar _tmp57 = 2 * _tmp56;
  const Scalar _tmp58 = std::max<Scalar>(_tmp57, epsilon);
  const Scalar _tmp59 = Scalar(1.0) / (_tmp58);
  const Scalar _tmp60 = _tmp59 * target_calibration_storage(0, 0);
  const Scalar _tmp61 =
      -2 * _tmp45 * _tmp60 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp62 = _tmp1 + _tmp47;
  const Scalar _tmp63 = _tmp22 - _tmp23;
  const Scalar _tmp64 = _tmp51 + _tmp52;
  const Scalar _tmp65 = _tmp21 * _tmp63 - _tmp43 * _tmp64;
  const Scalar _tmp66 = _tmp33 * _tmp62 + _tmp65;
  const Scalar _tmp67 = _tmp59 * target_calibration_storage(1, 0);
  const Scalar _tmp68 =
      -2 * _tmp66 * _tmp67 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp69 = std::pow(_tmp61, Scalar(2)) + std::pow(_tmp68, Scalar(2)) + epsilon;
  const Scalar _tmp70 = std::pow(_tmp69, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = std::sqrt(weight);
  const Scalar _tmp72 = -epsilon;
  const Scalar _tmp73 = Scalar(1.0) / (_tmp72 + gnc_mu - 1);
  const Scalar _tmp74 = epsilon + std::fabs(_tmp73);
  const Scalar _tmp75 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp76 = _tmp69 * _tmp75 / _tmp74 + 1;
  const Scalar _tmp77 = _tmp73 + 2;
  const Scalar _tmp78 =
      _tmp77 + 2 * epsilon *
                   (std::min<Scalar>(0, (((_tmp77) > 0) - ((_tmp77) < 0))) + Scalar(1) / Scalar(2));
  const Scalar _tmp79 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(_tmp74 * (std::pow(_tmp76, Scalar((Scalar(1) / Scalar(2)) * _tmp78)) - 1) /
                       _tmp78));
  const Scalar _tmp80 = std::max<Scalar>(0, (((_tmp56) > 0) - ((_tmp56) < 0)));
  const Scalar _tmp81 = _tmp71 * _tmp79 * _tmp80;
  const Scalar _tmp82 = _tmp70 * _tmp81;
  const Scalar _tmp83 = _tmp61 * _tmp82;
  const Scalar _tmp84 = _tmp68 * _tmp82;
  const Scalar _tmp85 = -_tmp16;
  const Scalar _tmp86 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp87 = _tmp17 - _tmp86;
  const Scalar _tmp88 = _tmp8 * (_tmp31 + _tmp85 + _tmp87);
  const Scalar _tmp89 = _tmp14 * _tmp28 + _tmp88;
  const Scalar _tmp90 = -_tmp31;
  const Scalar _tmp91 = _tmp17 + _tmp85 + _tmp86 + _tmp90;
  const Scalar _tmp92 = _tmp14 * _tmp8;
  const Scalar _tmp93 = -_tmp42 - _tmp91 * _tmp92;
  const Scalar _tmp94 = 2 * _tmp13 + 2 * _tmp5 * _tmp92;
  const Scalar _tmp95 = -_tmp48 * _tmp93 - _tmp49 * _tmp94 + _tmp53 * _tmp89;
  const Scalar _tmp96 =
      ((((_tmp57 + _tmp72) > 0) - ((_tmp57 + _tmp72) < 0)) + 1) / std::pow(_tmp58, Scalar(2));
  const Scalar _tmp97 = _tmp45 * target_calibration_storage(0, 0);
  const Scalar _tmp98 = _tmp96 * _tmp97;
  const Scalar _tmp99 =
      -_tmp60 * (-_tmp2 * _tmp94 - _tmp24 * _tmp89 - _tmp37 * _tmp93) + _tmp95 * _tmp98;
  const Scalar _tmp100 = _tmp66 * target_calibration_storage(1, 0);
  const Scalar _tmp101 = _tmp100 * _tmp96;
  const Scalar _tmp102 =
      _tmp101 * _tmp95 - _tmp67 * (_tmp62 * _tmp89 - _tmp63 * _tmp94 - _tmp64 * _tmp93);
  const Scalar _tmp103 = _tmp102 * _tmp68 + _tmp61 * _tmp99;
  const Scalar _tmp104 = _tmp70 * _tmp71 * _tmp75 *
                         std::pow(_tmp76, Scalar((Scalar(1) / Scalar(2)) * _tmp78 - 1)) * _tmp80 /
                         _tmp79;
  const Scalar _tmp105 = _tmp104 * _tmp61;
  const Scalar _tmp106 = _tmp81 / (_tmp69 * std::sqrt(_tmp69));
  const Scalar _tmp107 = _tmp106 * _tmp61;
  const Scalar _tmp108 = _tmp103 * _tmp105 - _tmp103 * _tmp107 + _tmp82 * _tmp99;
  const Scalar _tmp109 = 2 * _tmp108;
  const Scalar _tmp110 = _tmp104 * _tmp68;
  const Scalar _tmp111 = _tmp106 * _tmp68;
  const Scalar _tmp112 = _tmp102 * _tmp82 + _tmp103 * _tmp110 - _tmp103 * _tmp111;
  const Scalar _tmp113 = 2 * _tmp112;
  const Scalar _tmp114 = _tmp19 * _tmp8;
  const Scalar _tmp115 = -2 * _tmp114 * _tmp27 + 2 * _tmp29;
  const Scalar _tmp116 = _tmp8 * (_tmp16 + _tmp87 + _tmp90);
  const Scalar _tmp117 = _tmp10 * _tmp19 - _tmp116;
  const Scalar _tmp118 = _tmp114 * _tmp91 + _tmp39;
  const Scalar _tmp119 = _tmp115 * _tmp53 + _tmp117 * _tmp49 - _tmp118 * _tmp48;
  const Scalar _tmp120 =
      _tmp119 * _tmp98 - _tmp60 * (-_tmp115 * _tmp24 + _tmp117 * _tmp2 - _tmp118 * _tmp37);
  const Scalar _tmp121 =
      -_tmp101 * _tmp119 + _tmp67 * (_tmp115 * _tmp62 + _tmp117 * _tmp63 - _tmp118 * _tmp64);
  const Scalar _tmp122 = -_tmp120 * _tmp61 + _tmp121 * _tmp68;
  const Scalar _tmp123 = -_tmp105 * _tmp122 + _tmp107 * _tmp122 + _tmp120 * _tmp82;
  const Scalar _tmp124 = 2 * _tmp123;
  const Scalar _tmp125 = -_tmp110 * _tmp122 + _tmp111 * _tmp122 - _tmp121 * _tmp82;
  const Scalar _tmp126 = 2 * _tmp125;
  const Scalar _tmp127 = -2 * _tmp114 * _tmp41 + 2 * _tmp38 * _tmp92;
  const Scalar _tmp128 = _tmp15 * _tmp29 + _tmp19 * _tmp88;
  const Scalar _tmp129 = -_tmp116 * _tmp14 - _tmp13 * _tmp30;
  const Scalar _tmp130 = -_tmp127 * _tmp48 + _tmp128 * _tmp53 + _tmp129 * _tmp49;
  const Scalar _tmp131 =
      _tmp130 * _tmp98 - _tmp60 * (-_tmp127 * _tmp37 - _tmp128 * _tmp24 + _tmp129 * _tmp2);
  const Scalar _tmp132 =
      -_tmp101 * _tmp130 + _tmp67 * (-_tmp127 * _tmp64 + _tmp128 * _tmp62 + _tmp129 * _tmp63);
  const Scalar _tmp133 = _tmp131 * _tmp61 - _tmp132 * _tmp68;
  const Scalar _tmp134 = _tmp105 * _tmp133 - _tmp107 * _tmp133 + _tmp131 * _tmp82;
  const Scalar _tmp135 = 2 * _tmp134;
  const Scalar _tmp136 = _tmp133 * _tmp68;
  const Scalar _tmp137 = _tmp104 * _tmp136 - _tmp106 * _tmp136 - _tmp132 * _tmp82;
  const Scalar _tmp138 = 2 * _tmp137;
  const Scalar _tmp139 = _tmp67 * source_inverse_range;
  const Scalar _tmp140 = _tmp101 * source_inverse_range;
  const Scalar _tmp141 = _tmp139 * _tmp63 - _tmp140 * _tmp49;
  const Scalar _tmp142 = _tmp60 * source_inverse_range;
  const Scalar _tmp143 = _tmp98 * source_inverse_range;
  const Scalar _tmp144 = _tmp142 * _tmp2 - _tmp143 * _tmp49;
  const Scalar _tmp145 = _tmp141 * _tmp68 + _tmp144 * _tmp61;
  const Scalar _tmp146 = -_tmp105 * _tmp145 + _tmp107 * _tmp145 - _tmp144 * _tmp82;
  const Scalar _tmp147 = 2 * _tmp146;
  const Scalar _tmp148 = _tmp110 * _tmp145 - _tmp111 * _tmp145 + _tmp141 * _tmp82;
  const Scalar _tmp149 = 2 * _tmp148;
  const Scalar _tmp150 = _tmp142 * _tmp24 + _tmp143 * _tmp53;
  const Scalar _tmp151 = _tmp139 * _tmp62 - _tmp140 * _tmp53;
  const Scalar _tmp152 = _tmp150 * _tmp61 - _tmp151 * _tmp68;
  const Scalar _tmp153 = _tmp105 * _tmp152 - _tmp107 * _tmp152 + _tmp150 * _tmp82;
  const Scalar _tmp154 = 2 * _tmp153;
  const Scalar _tmp155 = _tmp110 * _tmp152 - _tmp111 * _tmp152 - _tmp151 * _tmp82;
  const Scalar _tmp156 = 2 * _tmp155;
  const Scalar _tmp157 = _tmp142 * _tmp37 - _tmp143 * _tmp48;
  const Scalar _tmp158 = -_tmp139 * _tmp64 + _tmp140 * _tmp48;
  const Scalar _tmp159 = _tmp157 * _tmp61 - _tmp158 * _tmp68;
  const Scalar _tmp160 = _tmp105 * _tmp159 - _tmp107 * _tmp159 + _tmp157 * _tmp82;
  const Scalar _tmp161 = 2 * _tmp160;
  const Scalar _tmp162 = _tmp110 * _tmp159 - _tmp111 * _tmp159 - _tmp158 * _tmp82;
  const Scalar _tmp163 = 2 * _tmp162;
  const Scalar _tmp164 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp165 = -_tmp164;
  const Scalar _tmp166 = -_tmp1;
  const Scalar _tmp167 = (Scalar(1) / Scalar(2)) * _tmp43 * (_tmp0 + _tmp165 + _tmp166 + _tmp46);
  const Scalar _tmp168 = -_tmp0 + _tmp46;
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp33 * (_tmp1 + _tmp165 + _tmp168) + _tmp65;
  const Scalar _tmp170 = -_tmp101 * _tmp169 + _tmp67 * (_tmp167 - _tmp50 - _tmp54);
  const Scalar _tmp171 = _tmp169 * _tmp61;
  const Scalar _tmp172 = _tmp170 * _tmp68 - _tmp171 * _tmp98;
  const Scalar _tmp173 = _tmp169 * _tmp82;
  const Scalar _tmp174 = _tmp105 * _tmp172 - _tmp107 * _tmp172 - _tmp173 * _tmp98;
  const Scalar _tmp175 = 2 * _tmp174;
  const Scalar _tmp176 = _tmp110 * _tmp172 - _tmp111 * _tmp172 + _tmp170 * _tmp82;
  const Scalar _tmp177 = 2 * _tmp176;
  const Scalar _tmp178 =
      (Scalar(1) / Scalar(2)) * _tmp21 * (_tmp164 + _tmp166 + _tmp168) + _tmp34 + _tmp44;
  const Scalar _tmp179 = _tmp178 * _tmp96;
  const Scalar _tmp180 = -_tmp179 * _tmp97 + _tmp60 * (-_tmp167 + _tmp55);
  const Scalar _tmp181 = _tmp178 * _tmp68;
  const Scalar _tmp182 = -_tmp101 * _tmp181 + _tmp180 * _tmp61;
  const Scalar _tmp183 = _tmp105 * _tmp182 - _tmp107 * _tmp182 + _tmp180 * _tmp82;
  const Scalar _tmp184 = 2 * _tmp183;
  const Scalar _tmp185 = _tmp100 * _tmp179 * _tmp82 - _tmp110 * _tmp182 + _tmp111 * _tmp182;
  const Scalar _tmp186 = 2 * _tmp185;
  const Scalar _tmp187 = _tmp171 * _tmp60 + _tmp181 * _tmp67;
  const Scalar _tmp188 = _tmp105 * _tmp187 - _tmp107 * _tmp187 + _tmp173 * _tmp60;
  const Scalar _tmp189 = 2 * _tmp188;
  const Scalar _tmp190 = _tmp110 * _tmp187 - _tmp111 * _tmp187 + _tmp178 * _tmp67 * _tmp82;
  const Scalar _tmp191 = 2 * _tmp190;
  const Scalar _tmp192 = _tmp20 * _tmp49 + _tmp32 * _tmp53 - _tmp40 * _tmp48;
  const Scalar _tmp193 =
      _tmp192 * _tmp98 + _tmp60 * (-_tmp2 * _tmp20 + _tmp24 * _tmp32 + _tmp37 * _tmp40);
  const Scalar _tmp194 =
      -_tmp101 * _tmp192 + _tmp67 * (_tmp20 * _tmp63 + _tmp32 * _tmp62 - _tmp40 * _tmp64);
  const Scalar _tmp195 = _tmp193 * _tmp61 - _tmp194 * _tmp68;
  const Scalar _tmp196 = _tmp105 * _tmp195 - _tmp107 * _tmp195 + _tmp193 * _tmp82;
  const Scalar _tmp197 = 2 * _tmp196;
  const Scalar _tmp198 = _tmp110 * _tmp195 - _tmp111 * _tmp195 - _tmp194 * _tmp82;
  const Scalar _tmp199 = 2 * _tmp198;
  const Scalar _tmp200 = 4 * _tmp108;
  const Scalar _tmp201 = 4 * _tmp112;
  const Scalar _tmp202 = _tmp148 * _tmp201;
  const Scalar _tmp203 = _tmp146 * _tmp200;
  const Scalar _tmp204 = 4 * _tmp153;
  const Scalar _tmp205 = _tmp108 * _tmp204;
  const Scalar _tmp206 = _tmp155 * _tmp201;
  const Scalar _tmp207 = _tmp162 * _tmp201;
  const Scalar _tmp208 = _tmp160 * _tmp200;
  const Scalar _tmp209 = 4 * _tmp137;
  const Scalar _tmp210 = 4 * _tmp134;
  const Scalar _tmp211 = 4 * _tmp146;
  const Scalar _tmp212 = _tmp123 * _tmp211;
  const Scalar _tmp213 = 4 * _tmp148;
  const Scalar _tmp214 = _tmp125 * _tmp213;
  const Scalar _tmp215 = 4 * _tmp125;
  const Scalar _tmp216 = _tmp155 * _tmp215;
  const Scalar _tmp217 = _tmp123 * _tmp204;
  const Scalar _tmp218 = _tmp162 * _tmp215;
  const Scalar _tmp219 = 4 * _tmp160;
  const Scalar _tmp220 = _tmp123 * _tmp219;
  const Scalar _tmp221 = 4 * _tmp174;
  const Scalar _tmp222 = 4 * _tmp176;
  const Scalar _tmp223 = 4 * _tmp183;
  const Scalar _tmp224 = 4 * _tmp196;
  const Scalar _tmp225 = 4 * _tmp198;
  const Scalar _tmp226 = _tmp137 * _tmp213;
  const Scalar _tmp227 = _tmp146 * _tmp210;
  const Scalar _tmp228 = _tmp134 * _tmp204;
  const Scalar _tmp229 = _tmp155 * _tmp209;
  const Scalar _tmp230 = _tmp160 * _tmp210;
  const Scalar _tmp231 = _tmp162 * _tmp209;
  const Scalar _tmp232 = 4 * std::pow(_tmp146, Scalar(2));
  const Scalar _tmp233 = 4 * std::pow(_tmp148, Scalar(2));
  const Scalar _tmp234 = _tmp232 + _tmp233;
  const Scalar _tmp235 = _tmp146 * _tmp204;
  const Scalar _tmp236 = _tmp155 * _tmp213;
  const Scalar _tmp237 = _tmp235 - _tmp236;
  const Scalar _tmp238 = _tmp146 * _tmp219;
  const Scalar _tmp239 = _tmp162 * _tmp213;
  const Scalar _tmp240 = _tmp238 - _tmp239;
  const Scalar _tmp241 = _tmp176 * _tmp213;
  const Scalar _tmp242 = _tmp146 * _tmp221;
  const Scalar _tmp243 = _tmp185 * _tmp213;
  const Scalar _tmp244 = _tmp183 * _tmp211;
  const Scalar _tmp245 = _tmp188 * _tmp211;
  const Scalar _tmp246 = _tmp190 * _tmp213;
  const Scalar _tmp247 = -_tmp235 + _tmp236;
  const Scalar _tmp248 = -_tmp238 + _tmp239;
  const Scalar _tmp249 = _tmp198 * _tmp213;
  const Scalar _tmp250 = _tmp146 * _tmp224;
  const Scalar _tmp251 = 4 * std::pow(_tmp153, Scalar(2));
  const Scalar _tmp252 = 4 * std::pow(_tmp155, Scalar(2));
  const Scalar _tmp253 = _tmp251 + _tmp252;
  const Scalar _tmp254 = 4 * _tmp155 * _tmp162;
  const Scalar _tmp255 = _tmp160 * _tmp204;
  const Scalar _tmp256 = _tmp254 + _tmp255;
  const Scalar _tmp257 = _tmp155 * _tmp222;
  const Scalar _tmp258 = _tmp174 * _tmp204;
  const Scalar _tmp259 = 4 * _tmp185;
  const Scalar _tmp260 = _tmp155 * _tmp259;
  const Scalar _tmp261 = _tmp183 * _tmp204;
  const Scalar _tmp262 = 4 * _tmp190;
  const Scalar _tmp263 = _tmp155 * _tmp262;
  const Scalar _tmp264 = _tmp188 * _tmp204;
  const Scalar _tmp265 = -_tmp254 - _tmp255;
  const Scalar _tmp266 = _tmp155 * _tmp225;
  const Scalar _tmp267 = _tmp196 * _tmp204;
  const Scalar _tmp268 = 4 * std::pow(_tmp160, Scalar(2));
  const Scalar _tmp269 = 4 * std::pow(_tmp162, Scalar(2));
  const Scalar _tmp270 = _tmp268 + _tmp269;
  const Scalar _tmp271 = _tmp162 * _tmp222;
  const Scalar _tmp272 = _tmp160 * _tmp221;
  const Scalar _tmp273 = _tmp183 * _tmp219;
  const Scalar _tmp274 = _tmp162 * _tmp259;
  const Scalar _tmp275 = _tmp162 * _tmp262;
  const Scalar _tmp276 = _tmp188 * _tmp219;
  const Scalar _tmp277 = _tmp196 * _tmp219;
  const Scalar _tmp278 = _tmp162 * _tmp225;
  const Scalar _tmp279 = _tmp149 * _tmp84;
  const Scalar _tmp280 = _tmp147 * _tmp83;
  const Scalar _tmp281 = _tmp154 * _tmp83;
  const Scalar _tmp282 = _tmp156 * _tmp84;
  const Scalar _tmp283 = _tmp163 * _tmp84;
  const Scalar _tmp284 = _tmp161 * _tmp83;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp83;
    _res(1, 0) = _tmp84;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp109;
    _jacobian(1, 0) = _tmp113;
    _jacobian(0, 1) = _tmp124;
    _jacobian(1, 1) = _tmp126;
    _jacobian(0, 2) = _tmp135;
    _jacobian(1, 2) = _tmp138;
    _jacobian(0, 3) = _tmp147;
    _jacobian(1, 3) = -_tmp149;
    _jacobian(0, 4) = _tmp154;
    _jacobian(1, 4) = _tmp156;
    _jacobian(0, 5) = _tmp161;
    _jacobian(1, 5) = _tmp163;
    _jacobian(0, 6) = -_tmp175;
    _jacobian(1, 6) = -_tmp177;
    _jacobian(0, 7) = -_tmp184;
    _jacobian(1, 7) = _tmp186;
    _jacobian(0, 8) = -_tmp189;
    _jacobian(1, 8) = -_tmp191;
    _jacobian(0, 9) = -_tmp147;
    _jacobian(1, 9) = _tmp149;
    _jacobian(0, 10) = -_tmp154;
    _jacobian(1, 10) = -_tmp156;
    _jacobian(0, 11) = -_tmp161;
    _jacobian(1, 11) = -_tmp163;
    _jacobian(0, 12) = -_tmp197;
    _jacobian(1, 12) = -_tmp199;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = 4 * std::pow(_tmp108, Scalar(2)) + 4 * std::pow(_tmp112, Scalar(2));
    _hessian(1, 0) = _tmp123 * _tmp200 + _tmp125 * _tmp201;
    _hessian(2, 0) = _tmp134 * _tmp200 + _tmp137 * _tmp201;
    _hessian(3, 0) = -_tmp202 + _tmp203;
    _hessian(4, 0) = _tmp205 + _tmp206;
    _hessian(5, 0) = _tmp207 + _tmp208;
    _hessian(6, 0) = -_tmp174 * _tmp200 - _tmp176 * _tmp201;
    _hessian(7, 0) = -_tmp183 * _tmp200 + _tmp185 * _tmp201;
    _hessian(8, 0) = -_tmp188 * _tmp200 - _tmp190 * _tmp201;
    _hessian(9, 0) = _tmp202 - _tmp203;
    _hessian(10, 0) = -_tmp205 - _tmp206;
    _hessian(11, 0) = -_tmp207 - _tmp208;
    _hessian(12, 0) = -_tmp196 * _tmp200 - _tmp198 * _tmp201;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = 4 * std::pow(_tmp123, Scalar(2)) + 4 * std::pow(_tmp125, Scalar(2));
    _hessian(2, 1) = _tmp123 * _tmp210 + _tmp125 * _tmp209;
    _hessian(3, 1) = _tmp212 - _tmp214;
    _hessian(4, 1) = _tmp216 + _tmp217;
    _hessian(5, 1) = _tmp218 + _tmp220;
    _hessian(6, 1) = -_tmp123 * _tmp221 - _tmp125 * _tmp222;
    _hessian(7, 1) = -_tmp123 * _tmp223 + _tmp185 * _tmp215;
    _hessian(8, 1) = -4 * _tmp123 * _tmp188 - _tmp190 * _tmp215;
    _hessian(9, 1) = -_tmp212 + _tmp214;
    _hessian(10, 1) = -_tmp216 - _tmp217;
    _hessian(11, 1) = -_tmp218 - _tmp220;
    _hessian(12, 1) = -_tmp123 * _tmp224 - _tmp125 * _tmp225;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = 4 * std::pow(_tmp134, Scalar(2)) + 4 * std::pow(_tmp137, Scalar(2));
    _hessian(3, 2) = -_tmp226 + _tmp227;
    _hessian(4, 2) = _tmp228 + _tmp229;
    _hessian(5, 2) = _tmp230 + _tmp231;
    _hessian(6, 2) = -_tmp134 * _tmp221 - _tmp137 * _tmp222;
    _hessian(7, 2) = -_tmp183 * _tmp210 + _tmp185 * _tmp209;
    _hessian(8, 2) = -_tmp188 * _tmp210 - _tmp190 * _tmp209;
    _hessian(9, 2) = _tmp226 - _tmp227;
    _hessian(10, 2) = -_tmp228 - _tmp229;
    _hessian(11, 2) = -_tmp230 - _tmp231;
    _hessian(12, 2) = -_tmp137 * _tmp225 - _tmp196 * _tmp210;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = _tmp234;
    _hessian(4, 3) = _tmp237;
    _hessian(5, 3) = _tmp240;
    _hessian(6, 3) = _tmp241 - _tmp242;
    _hessian(7, 3) = -_tmp243 - _tmp244;
    _hessian(8, 3) = -_tmp245 + _tmp246;
    _hessian(9, 3) = -_tmp232 - _tmp233;
    _hessian(10, 3) = _tmp247;
    _hessian(11, 3) = _tmp248;
    _hessian(12, 3) = _tmp249 - _tmp250;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = _tmp253;
    _hessian(5, 4) = _tmp256;
    _hessian(6, 4) = -_tmp257 - _tmp258;
    _hessian(7, 4) = _tmp260 - _tmp261;
    _hessian(8, 4) = -_tmp263 - _tmp264;
    _hessian(9, 4) = _tmp247;
    _hessian(10, 4) = -_tmp251 - _tmp252;
    _hessian(11, 4) = _tmp265;
    _hessian(12, 4) = -_tmp266 - _tmp267;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = _tmp270;
    _hessian(6, 5) = -_tmp271 - _tmp272;
    _hessian(7, 5) = -_tmp273 + _tmp274;
    _hessian(8, 5) = -_tmp275 - _tmp276;
    _hessian(9, 5) = _tmp248;
    _hessian(10, 5) = _tmp265;
    _hessian(11, 5) = -_tmp268 - _tmp269;
    _hessian(12, 5) = -_tmp277 - _tmp278;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = 4 * std::pow(_tmp174, Scalar(2)) + 4 * std::pow(_tmp176, Scalar(2));
    _hessian(7, 6) = _tmp183 * _tmp221 - _tmp185 * _tmp222;
    _hessian(8, 6) = _tmp188 * _tmp221 + _tmp190 * _tmp222;
    _hessian(9, 6) = -_tmp241 + _tmp242;
    _hessian(10, 6) = _tmp257 + _tmp258;
    _hessian(11, 6) = _tmp271 + _tmp272;
    _hessian(12, 6) = _tmp196 * _tmp221 + _tmp198 * _tmp222;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = 4 * std::pow(_tmp183, Scalar(2)) + 4 * std::pow(_tmp185, Scalar(2));
    _hessian(8, 7) = _tmp188 * _tmp223 - _tmp190 * _tmp259;
    _hessian(9, 7) = _tmp243 + _tmp244;
    _hessian(10, 7) = -_tmp260 + _tmp261;
    _hessian(11, 7) = _tmp273 - _tmp274;
    _hessian(12, 7) = _tmp183 * _tmp224 - _tmp185 * _tmp225;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = 4 * std::pow(_tmp188, Scalar(2)) + 4 * std::pow(_tmp190, Scalar(2));
    _hessian(9, 8) = _tmp245 - _tmp246;
    _hessian(10, 8) = _tmp263 + _tmp264;
    _hessian(11, 8) = _tmp275 + _tmp276;
    _hessian(12, 8) = _tmp188 * _tmp224 + _tmp190 * _tmp225;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = _tmp234;
    _hessian(10, 9) = _tmp237;
    _hessian(11, 9) = _tmp240;
    _hessian(12, 9) = -_tmp249 + _tmp250;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = _tmp253;
    _hessian(11, 10) = _tmp256;
    _hessian(12, 10) = _tmp266 + _tmp267;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = _tmp270;
    _hessian(12, 11) = _tmp277 + _tmp278;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = 4 * std::pow(_tmp196, Scalar(2)) + 4 * std::pow(_tmp198, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp109 * _tmp83 + _tmp113 * _tmp84;
    _rhs(1, 0) = _tmp124 * _tmp83 + _tmp126 * _tmp84;
    _rhs(2, 0) = _tmp135 * _tmp83 + _tmp138 * _tmp84;
    _rhs(3, 0) = -_tmp279 + _tmp280;
    _rhs(4, 0) = _tmp281 + _tmp282;
    _rhs(5, 0) = _tmp283 + _tmp284;
    _rhs(6, 0) = -_tmp175 * _tmp83 - _tmp177 * _tmp84;
    _rhs(7, 0) = -_tmp184 * _tmp83 + _tmp186 * _tmp84;
    _rhs(8, 0) = -_tmp189 * _tmp83 - _tmp191 * _tmp84;
    _rhs(9, 0) = _tmp279 - _tmp280;
    _rhs(10, 0) = -_tmp281 - _tmp282;
    _rhs(11, 0) = -_tmp283 - _tmp284;
    _rhs(12, 0) = -_tmp197 * _tmp83 - _tmp199 * _tmp84;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
