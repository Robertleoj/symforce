// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/unit3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (2x2) jacobian of res wrt arg value (2)
 *     hessian: (2x2) Gauss-Newton hessian for arg value (2)
 *     rhs: (2x1) Gauss-Newton rhs for arg value (2)
 */
template <typename Scalar>
void PriorFactorUnit3(const sym::Unit3<Scalar>& value, const sym::Unit3<Scalar>& prior,
                      const Eigen::Matrix<Scalar, 2, 2>& sqrt_info, const Scalar epsilon,
                      Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                      Eigen::Matrix<Scalar, 2, 2>* const jacobian = nullptr,
                      Eigen::Matrix<Scalar, 2, 2>* const hessian = nullptr,
                      Eigen::Matrix<Scalar, 2, 1>* const rhs = nullptr) {
  // Total ops: 179

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (62)
  const Scalar _tmp0 = _prior[3] * _value[1];
  const Scalar _tmp1 = _prior[0] * _value[2];
  const Scalar _tmp2 = _prior[2] * _value[0];
  const Scalar _tmp3 = _prior[1] * _value[3];
  const Scalar _tmp4 = _tmp0 + _tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = _prior[3] * _value[3];
  const Scalar _tmp6 = _prior[0] * _value[0];
  const Scalar _tmp7 = _prior[2] * _value[2];
  const Scalar _tmp8 = _prior[1] * _value[1];
  const Scalar _tmp9 = -_tmp6 - _tmp7 - _tmp8;
  const Scalar _tmp10 = _tmp5 - _tmp9;
  const Scalar _tmp11 = 1 - epsilon;
  const Scalar _tmp12 = std::min<Scalar>(_tmp11, std::fabs(_tmp10));
  const Scalar _tmp13 = std::acos(_tmp12) / std::sqrt(Scalar(1 - std::pow(_tmp12, Scalar(2))));
  const Scalar _tmp14 = _tmp13 * _tmp4;
  const Scalar _tmp15 = 2 * std::min<Scalar>(0, (((_tmp10) > 0) - ((_tmp10) < 0))) + 1;
  const Scalar _tmp16 = 2 * _tmp15;
  const Scalar _tmp17 = _tmp16 * sqrt_info(0, 0);
  const Scalar _tmp18 = _prior[3] * _value[0];
  const Scalar _tmp19 = _prior[0] * _value[3];
  const Scalar _tmp20 = _prior[2] * _value[1];
  const Scalar _tmp21 = _prior[1] * _value[2];
  const Scalar _tmp22 = _tmp18 - _tmp19 + _tmp20 - _tmp21;
  const Scalar _tmp23 = _tmp13 * _tmp22;
  const Scalar _tmp24 = _tmp16 * sqrt_info(0, 1);
  const Scalar _tmp25 = _tmp14 * _tmp17 - _tmp23 * _tmp24;
  const Scalar _tmp26 = _tmp16 * sqrt_info(1, 0);
  const Scalar _tmp27 = _tmp16 * sqrt_info(1, 1);
  const Scalar _tmp28 = _tmp14 * _tmp26 - _tmp23 * _tmp27;
  const Scalar _tmp29 = (Scalar(1) / Scalar(2)) * _tmp0 + (Scalar(1) / Scalar(2)) * _tmp1 -
                        Scalar(1) / Scalar(2) * _tmp2 - Scalar(1) / Scalar(2) * _tmp3;
  const Scalar _tmp30 = std::fabs(_tmp5 + _tmp6 + _tmp7 + _tmp8);
  const Scalar _tmp31 = std::min<Scalar>(_tmp11, _tmp30);
  const Scalar _tmp32 = std::acos(_tmp31);
  const Scalar _tmp33 = 1 - std::pow(_tmp31, Scalar(2));
  const Scalar _tmp34 = _tmp15 * ((((_tmp11 - _tmp30) > 0) - ((_tmp11 - _tmp30) < 0)) + 1) *
                        (((-_tmp5 + _tmp9) > 0) - ((-_tmp5 + _tmp9) < 0));
  const Scalar _tmp35 = _tmp31 * _tmp32 * _tmp34 / (_tmp33 * std::sqrt(_tmp33));
  const Scalar _tmp36 = _tmp35 * _tmp4;
  const Scalar _tmp37 = _tmp36 * sqrt_info(0, 0);
  const Scalar _tmp38 = _tmp34 / _tmp33;
  const Scalar _tmp39 = _tmp38 * _tmp4;
  const Scalar _tmp40 = _tmp29 * _tmp39;
  const Scalar _tmp41 = _tmp32 / std::sqrt(_tmp33);
  const Scalar _tmp42 = _tmp41 * ((Scalar(1) / Scalar(2)) * _prior[0] * _value[1] -
                                  Scalar(1) / Scalar(2) * _prior[1] * _value[0] +
                                  (Scalar(1) / Scalar(2)) * _prior[2] * _value[3] -
                                  Scalar(1) / Scalar(2) * _prior[3] * _value[2]);
  const Scalar _tmp43 = _tmp22 * _tmp38;
  const Scalar _tmp44 = _tmp29 * _tmp43;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp49 = _tmp41 * (_tmp45 + _tmp46 + _tmp47 + _tmp48);
  const Scalar _tmp50 = _tmp22 * _tmp35;
  const Scalar _tmp51 = _tmp29 * _tmp50;
  const Scalar _tmp52 = _tmp17 * _tmp49 - _tmp24 * _tmp42 + _tmp29 * _tmp37 -
                        _tmp40 * sqrt_info(0, 0) + _tmp44 * sqrt_info(0, 1) -
                        _tmp51 * sqrt_info(0, 1);
  const Scalar _tmp53 = _tmp36 * sqrt_info(1, 0);
  const Scalar _tmp54 = _tmp26 * _tmp49 - _tmp27 * _tmp42 + _tmp29 * _tmp53 -
                        _tmp40 * sqrt_info(1, 0) + _tmp44 * sqrt_info(1, 1) -
                        _tmp51 * sqrt_info(1, 1);
  const Scalar _tmp55 = -Scalar(1) / Scalar(2) * _tmp18 + (Scalar(1) / Scalar(2)) * _tmp19 -
                        Scalar(1) / Scalar(2) * _tmp20 + (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp56 = _tmp50 * _tmp55;
  const Scalar _tmp57 = _tmp43 * _tmp55;
  const Scalar _tmp58 = _tmp41 * (-_tmp45 - _tmp46 - _tmp47 - _tmp48);
  const Scalar _tmp59 = _tmp39 * _tmp55;
  const Scalar _tmp60 = _tmp17 * _tmp42 - _tmp24 * _tmp58 + _tmp37 * _tmp55 -
                        _tmp56 * sqrt_info(0, 1) + _tmp57 * sqrt_info(0, 1) -
                        _tmp59 * sqrt_info(0, 0);
  const Scalar _tmp61 = _tmp26 * _tmp42 - _tmp27 * _tmp58 + _tmp53 * _tmp55 -
                        _tmp56 * sqrt_info(1, 1) + _tmp57 * sqrt_info(1, 1) -
                        _tmp59 * sqrt_info(1, 0);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp25;
    _res(1, 0) = _tmp28;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 2>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp52;
    _jacobian(1, 0) = _tmp54;
    _jacobian(0, 1) = _tmp60;
    _jacobian(1, 1) = _tmp61;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 2, 2>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp52, Scalar(2)) + std::pow(_tmp54, Scalar(2));
    _hessian(1, 0) = _tmp52 * _tmp60 + _tmp54 * _tmp61;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp60, Scalar(2)) + std::pow(_tmp61, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp25 * _tmp52 + _tmp28 * _tmp54;
    _rhs(1, 0) = _tmp25 * _tmp60 + _tmp28 * _tmp61;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
