// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/unit3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (2x4) jacobian of res wrt args a (2), b (2)
 *     hessian: (4x4) Gauss-Newton hessian for args a (2), b (2)
 *     rhs: (4x1) Gauss-Newton rhs for args a (2), b (2)
 */
template <typename Scalar>
void BetweenFactorUnit3(const sym::Unit3<Scalar>& a, const sym::Unit3<Scalar>& b,
                        const sym::Unit3<Scalar>& a_T_b,
                        const Eigen::Matrix<Scalar, 2, 2>& sqrt_info, const Scalar epsilon,
                        Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 2, 4>* const jacobian = nullptr,
                        Eigen::Matrix<Scalar, 4, 4>* const hessian = nullptr,
                        Eigen::Matrix<Scalar, 4, 1>* const rhs = nullptr) {
  // Total ops: 357

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (128)
  const Scalar _tmp0 = _a[3] * _b[3];
  const Scalar _tmp1 = _a[2] * _b[2];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[1] * _b[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[3] * _b[1];
  const Scalar _tmp6 = _a[2] * _b[0];
  const Scalar _tmp7 = _a[0] * _b[2];
  const Scalar _tmp8 = _a[1] * _b[3];
  const Scalar _tmp9 = _tmp5 - _tmp6 + _tmp7 - _tmp8;
  const Scalar _tmp10 = _a[3] * _b[0];
  const Scalar _tmp11 = _a[2] * _b[1];
  const Scalar _tmp12 = _a[0] * _b[3];
  const Scalar _tmp13 = _a[1] * _b[2];
  const Scalar _tmp14 = _tmp10 + _tmp11 - _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[3] * _b[2];
  const Scalar _tmp16 = _a[2] * _b[3];
  const Scalar _tmp17 = _a[0] * _b[1];
  const Scalar _tmp18 = _a[1] * _b[0];
  const Scalar _tmp19 = _tmp15 - _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 =
      _a_T_b[0] * _tmp19 - _a_T_b[1] * _tmp4 - _a_T_b[2] * _tmp14 + _a_T_b[3] * _tmp9;
  const Scalar _tmp21 = _a_T_b[3] * _tmp4;
  const Scalar _tmp22 = _a_T_b[1] * _tmp9;
  const Scalar _tmp23 = _a_T_b[0] * _tmp14;
  const Scalar _tmp24 = _a_T_b[2] * _tmp19;
  const Scalar _tmp25 = -_tmp22 - _tmp23 - _tmp24;
  const Scalar _tmp26 = _tmp21 - _tmp25;
  const Scalar _tmp27 = (((_tmp26) > 0) - ((_tmp26) < 0));
  const Scalar _tmp28 = 2 * std::min<Scalar>(0, _tmp27) + 1;
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 = _tmp29 * sqrt_info(0, 0);
  const Scalar _tmp31 = std::fabs(_tmp26);
  const Scalar _tmp32 = 1 - epsilon;
  const Scalar _tmp33 = std::min<Scalar>(_tmp31, _tmp32);
  const Scalar _tmp34 = 1 - std::pow(_tmp33, Scalar(2));
  const Scalar _tmp35 = std::acos(_tmp33);
  const Scalar _tmp36 = _tmp35 / std::sqrt(_tmp34);
  const Scalar _tmp37 = _tmp30 * _tmp36;
  const Scalar _tmp38 =
      -_a_T_b[0] * _tmp4 - _a_T_b[1] * _tmp19 + _a_T_b[2] * _tmp9 + _a_T_b[3] * _tmp14;
  const Scalar _tmp39 = _tmp29 * sqrt_info(0, 1);
  const Scalar _tmp40 = _tmp36 * _tmp39;
  const Scalar _tmp41 = _tmp20 * _tmp37 - _tmp38 * _tmp40;
  const Scalar _tmp42 = _tmp29 * sqrt_info(1, 0);
  const Scalar _tmp43 = _tmp36 * _tmp42;
  const Scalar _tmp44 = _tmp29 * sqrt_info(1, 1);
  const Scalar _tmp45 = _tmp36 * _tmp44;
  const Scalar _tmp46 = _tmp20 * _tmp43 - _tmp38 * _tmp45;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp51 = -_tmp47 - _tmp48 - _tmp49 - _tmp50;
  const Scalar _tmp52 = _a_T_b[2] * _tmp51;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp57 = _tmp53 - _tmp54 + _tmp55 - _tmp56;
  const Scalar _tmp58 = _a_T_b[0] * _tmp57;
  const Scalar _tmp59 = -Scalar(1) / Scalar(2) * _tmp15 + (Scalar(1) / Scalar(2)) * _tmp16 +
                        (Scalar(1) / Scalar(2)) * _tmp17 - Scalar(1) / Scalar(2) * _tmp18;
  const Scalar _tmp60 = _a_T_b[3] * _tmp59;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp65 = _tmp61 + _tmp62 - _tmp63 - _tmp64;
  const Scalar _tmp66 = -_a_T_b[1] * _tmp65 + _tmp60;
  const Scalar _tmp67 = _tmp52 - _tmp58 + _tmp66;
  const Scalar _tmp68 = _a_T_b[0] * _tmp59;
  const Scalar _tmp69 = _a_T_b[2] * _tmp65;
  const Scalar _tmp70 = _a_T_b[1] * _tmp51 + _a_T_b[3] * _tmp57 + _tmp68 + _tmp69;
  const Scalar _tmp71 = _tmp27 * ((((-_tmp31 + _tmp32) > 0) - ((-_tmp31 + _tmp32) < 0)) + 1);
  const Scalar _tmp72 = _tmp71 / _tmp34;
  const Scalar _tmp73 = _tmp70 * _tmp72;
  const Scalar _tmp74 = _tmp28 * _tmp38;
  const Scalar _tmp75 = _tmp74 * sqrt_info(0, 1);
  const Scalar _tmp76 = _tmp20 * _tmp28;
  const Scalar _tmp77 = _tmp76 * sqrt_info(0, 0);
  const Scalar _tmp78 = _tmp33 * _tmp35 * _tmp71 / (_tmp34 * std::sqrt(_tmp34));
  const Scalar _tmp79 = _tmp70 * _tmp78;
  const Scalar _tmp80 = _a_T_b[2] * _tmp59;
  const Scalar _tmp81 = _a_T_b[0] * _tmp65;
  const Scalar _tmp82 = -_tmp80 + _tmp81;
  const Scalar _tmp83 = -_a_T_b[1] * _tmp57;
  const Scalar _tmp84 = _a_T_b[3] * _tmp51 + _tmp83;
  const Scalar _tmp85 = _tmp36 * (_tmp82 + _tmp84);
  const Scalar _tmp86 = _tmp30 * _tmp85 - _tmp40 * _tmp67 + _tmp73 * _tmp75 - _tmp73 * _tmp77 -
                        _tmp75 * _tmp79 + _tmp77 * _tmp79;
  const Scalar _tmp87 = _tmp74 * sqrt_info(1, 1);
  const Scalar _tmp88 = _tmp76 * sqrt_info(1, 0);
  const Scalar _tmp89 = _tmp42 * _tmp85 - _tmp45 * _tmp67 + _tmp73 * _tmp87 - _tmp73 * _tmp88 -
                        _tmp79 * _tmp87 + _tmp79 * _tmp88;
  const Scalar _tmp90 = _tmp47 + _tmp48 + _tmp49 + _tmp50;
  const Scalar _tmp91 = _a_T_b[2] * _tmp57;
  const Scalar _tmp92 = _a_T_b[1] * _tmp59;
  const Scalar _tmp93 = -_tmp61 - _tmp62 + _tmp63 + _tmp64;
  const Scalar _tmp94 = _a_T_b[0] * _tmp90 + _a_T_b[3] * _tmp93 + _tmp91 + _tmp92;
  const Scalar _tmp95 = _tmp72 * _tmp94;
  const Scalar _tmp96 = _a_T_b[2] * _tmp90;
  const Scalar _tmp97 = -_a_T_b[1] * _tmp93 + _tmp58 + _tmp60 - _tmp96;
  const Scalar _tmp98 = _tmp78 * _tmp94;
  const Scalar _tmp99 = _a_T_b[3] * _tmp90;
  const Scalar _tmp100 = -_a_T_b[0] * _tmp93 + _tmp80 + _tmp83 + _tmp99;
  const Scalar _tmp101 = -_tmp100 * _tmp40 + _tmp37 * _tmp97 + _tmp75 * _tmp95 - _tmp75 * _tmp98 -
                         _tmp77 * _tmp95 + _tmp77 * _tmp98;
  const Scalar _tmp102 = -_tmp100 * _tmp45 + _tmp43 * _tmp97 + _tmp87 * _tmp95 - _tmp87 * _tmp98 -
                         _tmp88 * _tmp95 + _tmp88 * _tmp98;
  const Scalar _tmp103 = -_tmp53 + _tmp54 - _tmp55 + _tmp56;
  const Scalar _tmp104 = -_a_T_b[1] * _tmp90 - _a_T_b[3] * _tmp103 - _tmp68 - _tmp69;
  const Scalar _tmp105 = std::fabs(_tmp21 + _tmp22 + _tmp23 + _tmp24);
  const Scalar _tmp106 = std::min<Scalar>(_tmp105, _tmp32);
  const Scalar _tmp107 = 1 - std::pow(_tmp106, Scalar(2));
  const Scalar _tmp108 = ((((-_tmp105 + _tmp32) > 0) - ((-_tmp105 + _tmp32) < 0)) + 1) *
                         (((-_tmp21 + _tmp25) > 0) - ((-_tmp21 + _tmp25) < 0));
  const Scalar _tmp109 = _tmp108 / _tmp107;
  const Scalar _tmp110 = _tmp104 * _tmp109;
  const Scalar _tmp111 = std::acos(_tmp106);
  const Scalar _tmp112 = _tmp106 * _tmp108 * _tmp111 / (_tmp107 * std::sqrt(_tmp107));
  const Scalar _tmp113 = _tmp112 * _tmp77;
  const Scalar _tmp114 = _tmp111 / std::sqrt(_tmp107);
  const Scalar _tmp115 = _tmp114 * (-_a_T_b[1] * _tmp103 + _tmp82 + _tmp99);
  const Scalar _tmp116 = _tmp114 * (-_a_T_b[0] * _tmp103 + _tmp66 + _tmp96);
  const Scalar _tmp117 = _tmp104 * _tmp112;
  const Scalar _tmp118 = _tmp104 * _tmp113 + _tmp110 * _tmp75 - _tmp110 * _tmp77 +
                         _tmp115 * _tmp30 - _tmp116 * _tmp39 - _tmp117 * _tmp75;
  const Scalar _tmp119 = _tmp112 * _tmp88;
  const Scalar _tmp120 = _tmp104 * _tmp119 + _tmp110 * _tmp87 - _tmp110 * _tmp88 +
                         _tmp115 * _tmp42 - _tmp116 * _tmp44 - _tmp117 * _tmp87;
  const Scalar _tmp121 = _tmp114 * (-_tmp52 + _tmp58 + _tmp66);
  const Scalar _tmp122 = -_a_T_b[0] * _tmp51 - _a_T_b[3] * _tmp65 - _tmp91 - _tmp92;
  const Scalar _tmp123 = _tmp114 * (_tmp80 - _tmp81 + _tmp84);
  const Scalar _tmp124 = _tmp112 * _tmp122;
  const Scalar _tmp125 = _tmp109 * _tmp122;
  const Scalar _tmp126 = _tmp113 * _tmp122 + _tmp121 * _tmp30 - _tmp123 * _tmp39 -
                         _tmp124 * _tmp75 + _tmp125 * _tmp75 - _tmp125 * _tmp77;
  const Scalar _tmp127 = _tmp119 * _tmp122 + _tmp121 * _tmp42 - _tmp123 * _tmp44 -
                         _tmp124 * _tmp87 + _tmp125 * _tmp87 - _tmp125 * _tmp88;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp41;
    _res(1, 0) = _tmp46;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 4>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp86;
    _jacobian(1, 0) = _tmp89;
    _jacobian(0, 1) = _tmp101;
    _jacobian(1, 1) = _tmp102;
    _jacobian(0, 2) = _tmp118;
    _jacobian(1, 2) = _tmp120;
    _jacobian(0, 3) = _tmp126;
    _jacobian(1, 3) = _tmp127;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 4, 4>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp86, Scalar(2)) + std::pow(_tmp89, Scalar(2));
    _hessian(1, 0) = _tmp101 * _tmp86 + _tmp102 * _tmp89;
    _hessian(2, 0) = _tmp118 * _tmp86 + _tmp120 * _tmp89;
    _hessian(3, 0) = _tmp126 * _tmp86 + _tmp127 * _tmp89;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp101, Scalar(2)) + std::pow(_tmp102, Scalar(2));
    _hessian(2, 1) = _tmp101 * _tmp118 + _tmp102 * _tmp120;
    _hessian(3, 1) = _tmp101 * _tmp126 + _tmp102 * _tmp127;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp118, Scalar(2)) + std::pow(_tmp120, Scalar(2));
    _hessian(3, 2) = _tmp118 * _tmp126 + _tmp120 * _tmp127;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp126, Scalar(2)) + std::pow(_tmp127, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 4, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp41 * _tmp86 + _tmp46 * _tmp89;
    _rhs(1, 0) = _tmp101 * _tmp41 + _tmp102 * _tmp46;
    _rhs(2, 0) = _tmp118 * _tmp41 + _tmp120 * _tmp46;
    _rhs(3, 0) = _tmp126 * _tmp41 + _tmp127 * _tmp46;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
