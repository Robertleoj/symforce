// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorRot3(const sym::Rot3<Scalar>& a, const sym::Rot3<Scalar>& b,
                       const sym::Rot3<Scalar>& a_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                       const Scalar epsilon, Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                       Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                       Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                       Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 765

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (221)
  const Scalar _tmp0 = _a[3] * _b[3];
  const Scalar _tmp1 = _a[2] * _b[2];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[1] * _b[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[3] * _b[1];
  const Scalar _tmp6 = _a[2] * _b[0];
  const Scalar _tmp7 = _a[0] * _b[2];
  const Scalar _tmp8 = _a[1] * _b[3];
  const Scalar _tmp9 = _tmp5 - _tmp6 + _tmp7 - _tmp8;
  const Scalar _tmp10 = _a[3] * _b[0];
  const Scalar _tmp11 = _a[2] * _b[1];
  const Scalar _tmp12 = _a[0] * _b[3];
  const Scalar _tmp13 = _a[1] * _b[2];
  const Scalar _tmp14 = _tmp10 + _tmp11 - _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[3] * _b[2];
  const Scalar _tmp16 = _a[2] * _b[3];
  const Scalar _tmp17 = _a[0] * _b[1];
  const Scalar _tmp18 = _a[1] * _b[0];
  const Scalar _tmp19 = _tmp15 - _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 =
      -_a_T_b[0] * _tmp9 + _a_T_b[1] * _tmp14 - _a_T_b[2] * _tmp4 + _a_T_b[3] * _tmp19;
  const Scalar _tmp21 = _a_T_b[3] * _tmp4;
  const Scalar _tmp22 = _a_T_b[1] * _tmp9;
  const Scalar _tmp23 = _a_T_b[0] * _tmp14;
  const Scalar _tmp24 = _a_T_b[2] * _tmp19;
  const Scalar _tmp25 = -_tmp22 - _tmp23 - _tmp24;
  const Scalar _tmp26 = _tmp21 - _tmp25;
  const Scalar _tmp27 = (((_tmp26) > 0) - ((_tmp26) < 0));
  const Scalar _tmp28 = 2 * std::min<Scalar>(0, _tmp27) + 1;
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 = std::fabs(_tmp26);
  const Scalar _tmp31 = 1 - epsilon;
  const Scalar _tmp32 = std::min<Scalar>(_tmp30, _tmp31);
  const Scalar _tmp33 = 1 - std::pow(_tmp32, Scalar(2));
  const Scalar _tmp34 = std::acos(_tmp32);
  const Scalar _tmp35 = _tmp34 / std::sqrt(_tmp33);
  const Scalar _tmp36 = _tmp29 * _tmp35;
  const Scalar _tmp37 = _tmp36 * sqrt_info(0, 2);
  const Scalar _tmp38 =
      _a_T_b[0] * _tmp19 - _a_T_b[1] * _tmp4 - _a_T_b[2] * _tmp14 + _a_T_b[3] * _tmp9;
  const Scalar _tmp39 = _tmp36 * _tmp38;
  const Scalar _tmp40 =
      -_a_T_b[0] * _tmp4 - _a_T_b[1] * _tmp19 + _a_T_b[2] * _tmp9 + _a_T_b[3] * _tmp14;
  const Scalar _tmp41 = _tmp29 * sqrt_info(0, 0);
  const Scalar _tmp42 = _tmp35 * _tmp41;
  const Scalar _tmp43 = _tmp20 * _tmp37 + _tmp39 * sqrt_info(0, 1) + _tmp40 * _tmp42;
  const Scalar _tmp44 = _tmp29 * sqrt_info(1, 2);
  const Scalar _tmp45 = _tmp20 * _tmp35;
  const Scalar _tmp46 = _tmp38 * sqrt_info(1, 1);
  const Scalar _tmp47 = _tmp36 * _tmp40;
  const Scalar _tmp48 = _tmp36 * _tmp46 + _tmp44 * _tmp45 + _tmp47 * sqrt_info(1, 0);
  const Scalar _tmp49 = _tmp29 * sqrt_info(2, 2);
  const Scalar _tmp50 = _tmp39 * sqrt_info(2, 1) + _tmp45 * _tmp49 + _tmp47 * sqrt_info(2, 0);
  const Scalar _tmp51 = _tmp28 * _tmp40;
  const Scalar _tmp52 = _tmp51 * sqrt_info(0, 0);
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp57 = -_tmp53 - _tmp54 - _tmp55 - _tmp56;
  const Scalar _tmp58 = _a_T_b[0] * _tmp57;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp63 = -_tmp59 + _tmp60 - _tmp61 + _tmp62;
  const Scalar _tmp64 = _a_T_b[2] * _tmp63;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp69 = _tmp65 - _tmp66 - _tmp67 + _tmp68;
  const Scalar _tmp70 = _a_T_b[1] * _tmp69;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp73 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp75 = _tmp71 + _tmp72 - _tmp73 - _tmp74;
  const Scalar _tmp76 = _a_T_b[3] * _tmp75;
  const Scalar _tmp77 = _tmp58 + _tmp64 + _tmp70 + _tmp76;
  const Scalar _tmp78 = _tmp27 * ((((-_tmp30 + _tmp31) > 0) - ((-_tmp30 + _tmp31) < 0)) + 1);
  const Scalar _tmp79 = _tmp32 * _tmp34 * _tmp78 / (_tmp33 * std::sqrt(_tmp33));
  const Scalar _tmp80 = _tmp77 * _tmp79;
  const Scalar _tmp81 = -_a_T_b[1] * _tmp75;
  const Scalar _tmp82 = _a_T_b[2] * _tmp57;
  const Scalar _tmp83 = _a_T_b[0] * _tmp63;
  const Scalar _tmp84 = _a_T_b[3] * _tmp69;
  const Scalar _tmp85 = _tmp83 + _tmp84;
  const Scalar _tmp86 = _tmp36 * (_tmp81 - _tmp82 + _tmp85);
  const Scalar _tmp87 = _a_T_b[3] * _tmp57;
  const Scalar _tmp88 = -_a_T_b[1] * _tmp63;
  const Scalar _tmp89 = _a_T_b[2] * _tmp69;
  const Scalar _tmp90 = _a_T_b[0] * _tmp75;
  const Scalar _tmp91 = _tmp87 + _tmp88 + _tmp89 - _tmp90;
  const Scalar _tmp92 = _tmp20 * _tmp28;
  const Scalar _tmp93 = _tmp80 * _tmp92;
  const Scalar _tmp94 = _tmp28 * _tmp38;
  const Scalar _tmp95 = _tmp94 * sqrt_info(0, 1);
  const Scalar _tmp96 = _tmp78 / _tmp33;
  const Scalar _tmp97 = _tmp77 * _tmp96;
  const Scalar _tmp98 = _tmp92 * _tmp97;
  const Scalar _tmp99 = _a_T_b[2] * _tmp75;
  const Scalar _tmp100 = -_tmp99;
  const Scalar _tmp101 = _a_T_b[1] * _tmp57;
  const Scalar _tmp102 = _a_T_b[3] * _tmp63;
  const Scalar _tmp103 = -_a_T_b[0] * _tmp69;
  const Scalar _tmp104 = _tmp102 + _tmp103;
  const Scalar _tmp105 = _tmp100 + _tmp101 + _tmp104;
  const Scalar _tmp106 = _tmp105 * _tmp37 + _tmp42 * _tmp91 + _tmp52 * _tmp80 - _tmp52 * _tmp97 +
                         _tmp80 * _tmp95 + _tmp86 * sqrt_info(0, 1) + _tmp93 * sqrt_info(0, 2) -
                         _tmp95 * _tmp97 - _tmp98 * sqrt_info(0, 2);
  const Scalar _tmp107 = _tmp51 * sqrt_info(1, 0);
  const Scalar _tmp108 = _tmp36 * _tmp91;
  const Scalar _tmp109 = _tmp28 * _tmp46;
  const Scalar _tmp110 = _tmp105 * _tmp35;
  const Scalar _tmp111 = _tmp107 * _tmp80 - _tmp107 * _tmp97 + _tmp108 * sqrt_info(1, 0) +
                         _tmp109 * _tmp80 - _tmp109 * _tmp97 + _tmp110 * _tmp44 +
                         _tmp86 * sqrt_info(1, 1) + _tmp93 * sqrt_info(1, 2) -
                         _tmp98 * sqrt_info(1, 2);
  const Scalar _tmp112 = _tmp51 * sqrt_info(2, 0);
  const Scalar _tmp113 = _tmp92 * sqrt_info(2, 2);
  const Scalar _tmp114 = _tmp94 * sqrt_info(2, 1);
  const Scalar _tmp115 = _tmp108 * sqrt_info(2, 0) + _tmp110 * _tmp49 + _tmp112 * _tmp80 -
                         _tmp112 * _tmp97 + _tmp113 * _tmp80 + _tmp114 * _tmp80 - _tmp114 * _tmp97 +
                         _tmp86 * sqrt_info(2, 1) - _tmp98 * sqrt_info(2, 2);
  const Scalar _tmp116 = _tmp59 - _tmp60 + _tmp61 - _tmp62;
  const Scalar _tmp117 = _a_T_b[0] * _tmp116;
  const Scalar _tmp118 = -_tmp117;
  const Scalar _tmp119 = -_tmp65 + _tmp66 + _tmp67 - _tmp68;
  const Scalar _tmp120 = _a_T_b[3] * _tmp119;
  const Scalar _tmp121 = _tmp120 + _tmp81;
  const Scalar _tmp122 = _tmp35 * (_tmp118 + _tmp121 + _tmp82);
  const Scalar _tmp123 = _a_T_b[3] * _tmp116;
  const Scalar _tmp124 = _a_T_b[0] * _tmp119;
  const Scalar _tmp125 = _tmp101 + _tmp123 + _tmp124 + _tmp99;
  const Scalar _tmp126 = _tmp125 * _tmp96;
  const Scalar _tmp127 = _tmp125 * _tmp79;
  const Scalar _tmp128 = _tmp92 * sqrt_info(0, 2);
  const Scalar _tmp129 = -_a_T_b[2] * _tmp116;
  const Scalar _tmp130 = _a_T_b[1] * _tmp119;
  const Scalar _tmp131 = _tmp130 + _tmp76;
  const Scalar _tmp132 = _tmp129 + _tmp131 - _tmp58;
  const Scalar _tmp133 = _tmp126 * _tmp92;
  const Scalar _tmp134 = _a_T_b[1] * _tmp116;
  const Scalar _tmp135 = -_a_T_b[2] * _tmp119;
  const Scalar _tmp136 = _tmp135 + _tmp90;
  const Scalar _tmp137 = _tmp36 * (-_tmp134 + _tmp136 + _tmp87);
  const Scalar _tmp138 = _tmp122 * _tmp41 - _tmp126 * _tmp52 - _tmp126 * _tmp95 +
                         _tmp127 * _tmp128 + _tmp127 * _tmp52 + _tmp127 * _tmp95 +
                         _tmp132 * _tmp37 - _tmp133 * sqrt_info(0, 2) + _tmp137 * sqrt_info(0, 1);
  const Scalar _tmp139 = _tmp122 * _tmp29;
  const Scalar _tmp140 = _tmp92 * sqrt_info(1, 2);
  const Scalar _tmp141 = _tmp132 * _tmp35;
  const Scalar _tmp142 = -_tmp107 * _tmp126 + _tmp107 * _tmp127 - _tmp109 * _tmp126 +
                         _tmp109 * _tmp127 + _tmp127 * _tmp140 - _tmp133 * sqrt_info(1, 2) +
                         _tmp137 * sqrt_info(1, 1) + _tmp139 * sqrt_info(1, 0) + _tmp141 * _tmp44;
  const Scalar _tmp143 = -_tmp112 * _tmp126 + _tmp112 * _tmp127 - _tmp113 * _tmp126 +
                         _tmp113 * _tmp127 - _tmp114 * _tmp126 + _tmp114 * _tmp127 +
                         _tmp137 * sqrt_info(2, 1) + _tmp139 * sqrt_info(2, 0) + _tmp141 * _tmp49;
  const Scalar _tmp144 = -_tmp71 - _tmp72 + _tmp73 + _tmp74;
  const Scalar _tmp145 = _a_T_b[1] * _tmp144;
  const Scalar _tmp146 = _tmp117 + _tmp145 + _tmp82 + _tmp84;
  const Scalar _tmp147 = _tmp146 * _tmp96;
  const Scalar _tmp148 = -_tmp70;
  const Scalar _tmp149 = _a_T_b[3] * _tmp144;
  const Scalar _tmp150 = _tmp129 + _tmp149;
  const Scalar _tmp151 = _tmp36 * (_tmp148 + _tmp150 + _tmp58);
  const Scalar _tmp152 = _tmp147 * _tmp92;
  const Scalar _tmp153 = _tmp146 * _tmp79;
  const Scalar _tmp154 = _tmp153 * _tmp92;
  const Scalar _tmp155 = -_a_T_b[0] * _tmp144;
  const Scalar _tmp156 = _tmp134 + _tmp155;
  const Scalar _tmp157 = _tmp156 + _tmp87 - _tmp89;
  const Scalar _tmp158 = _a_T_b[2] * _tmp144;
  const Scalar _tmp159 = _tmp123 + _tmp158;
  const Scalar _tmp160 = _tmp35 * (-_tmp101 + _tmp103 + _tmp159);
  const Scalar _tmp161 = -_tmp147 * _tmp52 - _tmp147 * _tmp95 + _tmp151 * sqrt_info(0, 1) -
                         _tmp152 * sqrt_info(0, 2) + _tmp153 * _tmp52 + _tmp153 * _tmp95 +
                         _tmp154 * sqrt_info(0, 2) + _tmp157 * _tmp37 + _tmp160 * _tmp41;
  const Scalar _tmp162 = _tmp157 * _tmp35;
  const Scalar _tmp163 = _tmp160 * _tmp29;
  const Scalar _tmp164 = -_tmp107 * _tmp147 + _tmp107 * _tmp153 - _tmp109 * _tmp147 +
                         _tmp109 * _tmp153 + _tmp151 * sqrt_info(1, 1) - _tmp152 * sqrt_info(1, 2) +
                         _tmp154 * sqrt_info(1, 2) + _tmp162 * _tmp44 + _tmp163 * sqrt_info(1, 0);
  const Scalar _tmp165 = -_tmp112 * _tmp147 + _tmp112 * _tmp153 - _tmp113 * _tmp147 +
                         _tmp113 * _tmp153 - _tmp114 * _tmp147 + _tmp114 * _tmp153 +
                         _tmp151 * sqrt_info(2, 1) + _tmp162 * _tmp49 + _tmp163 * sqrt_info(2, 0);
  const Scalar _tmp166 = _tmp53 + _tmp54 + _tmp55 + _tmp56;
  const Scalar _tmp167 = _a_T_b[0] * _tmp166;
  const Scalar _tmp168 = -_tmp167 - _tmp64;
  const Scalar _tmp169 = _tmp148 - _tmp149 + _tmp168;
  const Scalar _tmp170 = std::fabs(_tmp21 + _tmp22 + _tmp23 + _tmp24);
  const Scalar _tmp171 = std::min<Scalar>(_tmp170, _tmp31);
  const Scalar _tmp172 = 1 - std::pow(_tmp171, Scalar(2));
  const Scalar _tmp173 = ((((-_tmp170 + _tmp31) > 0) - ((-_tmp170 + _tmp31) < 0)) + 1) *
                         (((-_tmp21 + _tmp25) > 0) - ((-_tmp21 + _tmp25) < 0));
  const Scalar _tmp174 = _tmp173 / _tmp172;
  const Scalar _tmp175 = _tmp169 * _tmp174;
  const Scalar _tmp176 = _tmp175 * _tmp92;
  const Scalar _tmp177 = std::acos(_tmp171);
  const Scalar _tmp178 = _tmp171 * _tmp173 * _tmp177 / (_tmp172 * std::sqrt(_tmp172));
  const Scalar _tmp179 = _tmp169 * _tmp178;
  const Scalar _tmp180 = _a_T_b[3] * _tmp166;
  const Scalar _tmp181 = _tmp180 + _tmp88;
  const Scalar _tmp182 = _tmp155 + _tmp181 + _tmp89;
  const Scalar _tmp183 = _tmp177 / std::sqrt(_tmp172);
  const Scalar _tmp184 = _tmp183 * _tmp41;
  const Scalar _tmp185 = _a_T_b[2] * _tmp166;
  const Scalar _tmp186 = -_tmp145 - _tmp185;
  const Scalar _tmp187 = _tmp183 * _tmp29;
  const Scalar _tmp188 = _tmp187 * (_tmp186 + _tmp85);
  const Scalar _tmp189 = _a_T_b[1] * _tmp166;
  const Scalar _tmp190 = _tmp104 - _tmp158 + _tmp189;
  const Scalar _tmp191 = _tmp187 * sqrt_info(0, 2);
  const Scalar _tmp192 = _tmp128 * _tmp179 - _tmp175 * _tmp52 - _tmp175 * _tmp95 -
                         _tmp176 * sqrt_info(0, 2) + _tmp179 * _tmp52 + _tmp179 * _tmp95 +
                         _tmp182 * _tmp184 + _tmp188 * sqrt_info(0, 1) + _tmp190 * _tmp191;
  const Scalar _tmp193 = _tmp182 * _tmp187;
  const Scalar _tmp194 = _tmp183 * _tmp44;
  const Scalar _tmp195 = -_tmp107 * _tmp175 + _tmp107 * _tmp179 - _tmp109 * _tmp175 +
                         _tmp109 * _tmp179 + _tmp140 * _tmp179 - _tmp176 * sqrt_info(1, 2) +
                         _tmp188 * sqrt_info(1, 1) + _tmp190 * _tmp194 + _tmp193 * sqrt_info(1, 0);
  const Scalar _tmp196 = _tmp183 * _tmp49;
  const Scalar _tmp197 = -_tmp112 * _tmp175 + _tmp112 * _tmp179 - _tmp113 * _tmp175 +
                         _tmp113 * _tmp179 - _tmp114 * _tmp175 + _tmp114 * _tmp179 +
                         _tmp188 * sqrt_info(2, 1) + _tmp190 * _tmp196 + _tmp193 * sqrt_info(2, 0);
  const Scalar _tmp198 = -_tmp124 - _tmp189;
  const Scalar _tmp199 = _tmp100 - _tmp102 + _tmp198;
  const Scalar _tmp200 = _tmp174 * _tmp199;
  const Scalar _tmp201 = _tmp178 * _tmp199;
  const Scalar _tmp202 = _tmp187 * (_tmp136 + _tmp181);
  const Scalar _tmp203 = _tmp121 + _tmp185 - _tmp83;
  const Scalar _tmp204 = _tmp200 * _tmp92;
  const Scalar _tmp205 = _tmp131 + _tmp168;
  const Scalar _tmp206 = _tmp128 * _tmp201 + _tmp184 * _tmp203 + _tmp191 * _tmp205 -
                         _tmp200 * _tmp52 - _tmp200 * _tmp95 + _tmp201 * _tmp52 + _tmp201 * _tmp95 +
                         _tmp202 * sqrt_info(0, 1) - _tmp204 * sqrt_info(0, 2);
  const Scalar _tmp207 = _tmp187 * _tmp203;
  const Scalar _tmp208 = -_tmp107 * _tmp200 + _tmp107 * _tmp201 - _tmp109 * _tmp200 +
                         _tmp109 * _tmp201 + _tmp140 * _tmp201 + _tmp194 * _tmp205 +
                         _tmp202 * sqrt_info(1, 1) - _tmp204 * sqrt_info(1, 2) +
                         _tmp207 * sqrt_info(1, 0);
  const Scalar _tmp209 = -_tmp112 * _tmp200 + _tmp112 * _tmp201 - _tmp113 * _tmp200 +
                         _tmp113 * _tmp201 - _tmp114 * _tmp200 + _tmp114 * _tmp201 +
                         _tmp196 * _tmp205 + _tmp202 * sqrt_info(2, 1) + _tmp207 * sqrt_info(2, 0);
  const Scalar _tmp210 = _tmp118 - _tmp120 + _tmp186;
  const Scalar _tmp211 = _tmp174 * _tmp210;
  const Scalar _tmp212 = _tmp135 + _tmp156 + _tmp180;
  const Scalar _tmp213 = _tmp211 * _tmp92;
  const Scalar _tmp214 = _tmp178 * _tmp210;
  const Scalar _tmp215 = _tmp187 * (-_tmp130 + _tmp150 + _tmp167);
  const Scalar _tmp216 = _tmp159 + _tmp198;
  const Scalar _tmp217 = _tmp128 * _tmp214 + _tmp184 * _tmp216 + _tmp191 * _tmp212 -
                         _tmp211 * _tmp52 - _tmp211 * _tmp95 - _tmp213 * sqrt_info(0, 2) +
                         _tmp214 * _tmp52 + _tmp214 * _tmp95 + _tmp215 * sqrt_info(0, 1);
  const Scalar _tmp218 = _tmp187 * _tmp216;
  const Scalar _tmp219 = -_tmp107 * _tmp211 + _tmp107 * _tmp214 - _tmp109 * _tmp211 +
                         _tmp109 * _tmp214 + _tmp140 * _tmp214 + _tmp194 * _tmp212 -
                         _tmp213 * sqrt_info(1, 2) + _tmp215 * sqrt_info(1, 1) +
                         _tmp218 * sqrt_info(1, 0);
  const Scalar _tmp220 = -_tmp112 * _tmp211 + _tmp112 * _tmp214 - _tmp113 * _tmp211 +
                         _tmp113 * _tmp214 - _tmp114 * _tmp211 + _tmp114 * _tmp214 +
                         _tmp196 * _tmp212 + _tmp215 * sqrt_info(2, 1) + _tmp218 * sqrt_info(2, 0);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp43;
    _res(1, 0) = _tmp48;
    _res(2, 0) = _tmp50;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp106;
    _jacobian(1, 0) = _tmp111;
    _jacobian(2, 0) = _tmp115;
    _jacobian(0, 1) = _tmp138;
    _jacobian(1, 1) = _tmp142;
    _jacobian(2, 1) = _tmp143;
    _jacobian(0, 2) = _tmp161;
    _jacobian(1, 2) = _tmp164;
    _jacobian(2, 2) = _tmp165;
    _jacobian(0, 3) = _tmp192;
    _jacobian(1, 3) = _tmp195;
    _jacobian(2, 3) = _tmp197;
    _jacobian(0, 4) = _tmp206;
    _jacobian(1, 4) = _tmp208;
    _jacobian(2, 4) = _tmp209;
    _jacobian(0, 5) = _tmp217;
    _jacobian(1, 5) = _tmp219;
    _jacobian(2, 5) = _tmp220;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp106, Scalar(2)) + std::pow(_tmp111, Scalar(2)) + std::pow(_tmp115, Scalar(2));
    _hessian(1, 0) = _tmp106 * _tmp138 + _tmp111 * _tmp142 + _tmp115 * _tmp143;
    _hessian(2, 0) = _tmp106 * _tmp161 + _tmp111 * _tmp164 + _tmp115 * _tmp165;
    _hessian(3, 0) = _tmp106 * _tmp192 + _tmp111 * _tmp195 + _tmp115 * _tmp197;
    _hessian(4, 0) = _tmp106 * _tmp206 + _tmp111 * _tmp208 + _tmp115 * _tmp209;
    _hessian(5, 0) = _tmp106 * _tmp217 + _tmp111 * _tmp219 + _tmp115 * _tmp220;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp138, Scalar(2)) + std::pow(_tmp142, Scalar(2)) + std::pow(_tmp143, Scalar(2));
    _hessian(2, 1) = _tmp138 * _tmp161 + _tmp142 * _tmp164 + _tmp143 * _tmp165;
    _hessian(3, 1) = _tmp138 * _tmp192 + _tmp142 * _tmp195 + _tmp143 * _tmp197;
    _hessian(4, 1) = _tmp138 * _tmp206 + _tmp142 * _tmp208 + _tmp143 * _tmp209;
    _hessian(5, 1) = _tmp138 * _tmp217 + _tmp142 * _tmp219 + _tmp143 * _tmp220;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp161, Scalar(2)) + std::pow(_tmp164, Scalar(2)) + std::pow(_tmp165, Scalar(2));
    _hessian(3, 2) = _tmp161 * _tmp192 + _tmp164 * _tmp195 + _tmp165 * _tmp197;
    _hessian(4, 2) = _tmp161 * _tmp206 + _tmp164 * _tmp208 + _tmp165 * _tmp209;
    _hessian(5, 2) = _tmp161 * _tmp217 + _tmp164 * _tmp219 + _tmp165 * _tmp220;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) =
        std::pow(_tmp192, Scalar(2)) + std::pow(_tmp195, Scalar(2)) + std::pow(_tmp197, Scalar(2));
    _hessian(4, 3) = _tmp192 * _tmp206 + _tmp195 * _tmp208 + _tmp197 * _tmp209;
    _hessian(5, 3) = _tmp192 * _tmp217 + _tmp195 * _tmp219 + _tmp197 * _tmp220;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) =
        std::pow(_tmp206, Scalar(2)) + std::pow(_tmp208, Scalar(2)) + std::pow(_tmp209, Scalar(2));
    _hessian(5, 4) = _tmp206 * _tmp217 + _tmp208 * _tmp219 + _tmp209 * _tmp220;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) =
        std::pow(_tmp217, Scalar(2)) + std::pow(_tmp219, Scalar(2)) + std::pow(_tmp220, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp106 * _tmp43 + _tmp111 * _tmp48 + _tmp115 * _tmp50;
    _rhs(1, 0) = _tmp138 * _tmp43 + _tmp142 * _tmp48 + _tmp143 * _tmp50;
    _rhs(2, 0) = _tmp161 * _tmp43 + _tmp164 * _tmp48 + _tmp165 * _tmp50;
    _rhs(3, 0) = _tmp192 * _tmp43 + _tmp195 * _tmp48 + _tmp197 * _tmp50;
    _rhs(4, 0) = _tmp206 * _tmp43 + _tmp208 * _tmp48 + _tmp209 * _tmp50;
    _rhs(5, 0) = _tmp217 * _tmp43 + _tmp219 * _tmp48 + _tmp220 * _tmp50;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
