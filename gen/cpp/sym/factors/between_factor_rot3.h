// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorRot3(const sym::Rot3<Scalar>& a, const sym::Rot3<Scalar>& b,
                       const sym::Rot3<Scalar>& a_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                       const Scalar epsilon, Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                       Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                       Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                       Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 648

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (150)
  const Scalar _tmp0 = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp1 = _a_T_b[0] * _tmp0;
  const Scalar _tmp2 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp3 = _a_T_b[1] * _tmp2;
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp6 = _a_T_b[3] * _tmp5;
  const Scalar _tmp7 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp8 = _a_T_b[2] * _tmp7;
  const Scalar _tmp9 = _tmp6 - _tmp8;
  const Scalar _tmp10 = _tmp1 + _tmp4 + _tmp9;
  const Scalar _tmp11 = _a_T_b[3] * _tmp2;
  const Scalar _tmp12 = _a_T_b[2] * _tmp0;
  const Scalar _tmp13 = _a_T_b[1] * _tmp5;
  const Scalar _tmp14 = _a_T_b[0] * _tmp7;
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = _tmp11 + _tmp12 + _tmp15;
  const Scalar _tmp17 = (((_tmp16) > 0) - ((_tmp16) < 0));
  const Scalar _tmp18 = std::min<Scalar>(0, _tmp17) + Scalar(1) / Scalar(2);
  const Scalar _tmp19 = std::fabs(_tmp16);
  const Scalar _tmp20 = epsilon - 1;
  const Scalar _tmp21 = std::min<Scalar>(_tmp19, -_tmp20);
  const Scalar _tmp22 = std::acos(_tmp21);
  const Scalar _tmp23 = std::pow(_tmp21, Scalar(2)) - 1;
  const Scalar _tmp24 = -_tmp23;
  const Scalar _tmp25 = _tmp22 / std::sqrt(_tmp24);
  const Scalar _tmp26 = _tmp18 * _tmp25;
  const Scalar _tmp27 = _tmp10 * _tmp26;
  const Scalar _tmp28 = _a_T_b[0] * _tmp2;
  const Scalar _tmp29 = -_tmp28;
  const Scalar _tmp30 = _a_T_b[1] * _tmp0;
  const Scalar _tmp31 = -_tmp30;
  const Scalar _tmp32 = _a_T_b[2] * _tmp5;
  const Scalar _tmp33 = _a_T_b[3] * _tmp7;
  const Scalar _tmp34 = _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp29 + _tmp31 + _tmp34;
  const Scalar _tmp36 = _tmp26 * _tmp35;
  const Scalar _tmp37 = _a_T_b[1] * _tmp7;
  const Scalar _tmp38 = -_tmp37;
  const Scalar _tmp39 = _a_T_b[2] * _tmp2;
  const Scalar _tmp40 = _a_T_b[0] * _tmp5;
  const Scalar _tmp41 = _a_T_b[3] * _tmp0;
  const Scalar _tmp42 = _tmp40 - _tmp41;
  const Scalar _tmp43 = _tmp38 + _tmp39 + _tmp42;
  const Scalar _tmp44 = _tmp26 * _tmp43;
  const Scalar _tmp45 =
      4 * _tmp27 * sqrt_info(0, 1) + 4 * _tmp36 * sqrt_info(0, 0) - 4 * _tmp44 * sqrt_info(0, 2);
  const Scalar _tmp46 = _tmp18 * sqrt_info(1, 1);
  const Scalar _tmp47 = _tmp10 * _tmp46;
  const Scalar _tmp48 =
      4 * _tmp25 * _tmp47 + 4 * _tmp36 * sqrt_info(1, 0) - 4 * _tmp44 * sqrt_info(1, 2);
  const Scalar _tmp49 =
      4 * _tmp27 * sqrt_info(2, 1) + 4 * _tmp36 * sqrt_info(2, 0) - 4 * _tmp44 * sqrt_info(2, 2);
  const Scalar _tmp50 = _tmp10 * sqrt_info(0, 1);
  const Scalar _tmp51 = _tmp32 - _tmp33;
  const Scalar _tmp52 = _tmp28 + _tmp31 + _tmp51;
  const Scalar _tmp53 = _tmp17 * ((((_tmp19 + _tmp20) > 0) - ((_tmp19 + _tmp20) < 0)) - 1);
  const Scalar _tmp54 = _tmp53 / _tmp23;
  const Scalar _tmp55 = _tmp18 * _tmp54;
  const Scalar _tmp56 = _tmp52 * _tmp55;
  const Scalar _tmp57 = _tmp21 * _tmp22 * _tmp53 / (_tmp24 * std::sqrt(_tmp24));
  const Scalar _tmp58 = _tmp18 * _tmp57;
  const Scalar _tmp59 = _tmp43 * _tmp58;
  const Scalar _tmp60 = _tmp59 * sqrt_info(0, 2);
  const Scalar _tmp61 = _tmp6 + _tmp8;
  const Scalar _tmp62 = 2 * _tmp26;
  const Scalar _tmp63 = _tmp62 * (_tmp1 + _tmp3 + _tmp61);
  const Scalar _tmp64 = -_tmp11;
  const Scalar _tmp65 = _tmp13 - _tmp14;
  const Scalar _tmp66 = _tmp12 + _tmp64 + _tmp65;
  const Scalar _tmp67 = _tmp62 * sqrt_info(0, 0);
  const Scalar _tmp68 = _tmp43 * _tmp55;
  const Scalar _tmp69 = _tmp52 * _tmp68;
  const Scalar _tmp70 = -_tmp39;
  const Scalar _tmp71 = _tmp37 + _tmp42 + _tmp70;
  const Scalar _tmp72 = _tmp62 * sqrt_info(0, 1);
  const Scalar _tmp73 = _tmp52 * _tmp58;
  const Scalar _tmp74 = _tmp35 * _tmp55;
  const Scalar _tmp75 = _tmp74 * sqrt_info(0, 0);
  const Scalar _tmp76 = _tmp35 * _tmp58;
  const Scalar _tmp77 = _tmp52 * _tmp76;
  const Scalar _tmp78 = _tmp50 * _tmp56 + _tmp50 * _tmp73 - _tmp52 * _tmp60 + _tmp52 * _tmp75 -
                        _tmp63 * sqrt_info(0, 2) + _tmp66 * _tmp67 - _tmp69 * sqrt_info(0, 2) -
                        _tmp71 * _tmp72 + _tmp77 * sqrt_info(0, 0);
  const Scalar _tmp79 = _tmp47 * _tmp54;
  const Scalar _tmp80 = _tmp52 * _tmp59;
  const Scalar _tmp81 = 2 * sqrt_info(1, 0);
  const Scalar _tmp82 = _tmp26 * _tmp81;
  const Scalar _tmp83 = _tmp68 * sqrt_info(1, 2);
  const Scalar _tmp84 = 2 * _tmp25 * _tmp46;
  const Scalar _tmp85 = _tmp47 * _tmp57;
  const Scalar _tmp86 = _tmp74 * sqrt_info(1, 0);
  const Scalar _tmp87 = _tmp76 * sqrt_info(1, 0);
  const Scalar _tmp88 = _tmp52 * _tmp79 - _tmp52 * _tmp83 + _tmp52 * _tmp85 + _tmp52 * _tmp86 +
                        _tmp52 * _tmp87 - _tmp63 * sqrt_info(1, 2) + _tmp66 * _tmp82 -
                        _tmp71 * _tmp84 - _tmp80 * sqrt_info(1, 2);
  const Scalar _tmp89 = _tmp10 * sqrt_info(2, 1);
  const Scalar _tmp90 = _tmp62 * sqrt_info(2, 0);
  const Scalar _tmp91 = _tmp62 * sqrt_info(2, 1);
  const Scalar _tmp92 = _tmp74 * sqrt_info(2, 0);
  const Scalar _tmp93 = _tmp52 * _tmp92 + _tmp56 * _tmp89 - _tmp63 * sqrt_info(2, 2) +
                        _tmp66 * _tmp90 - _tmp69 * sqrt_info(2, 2) - _tmp71 * _tmp91 +
                        _tmp73 * _tmp89 + _tmp77 * sqrt_info(2, 0) - _tmp80 * sqrt_info(2, 2);
  const Scalar _tmp94 = -_tmp1;
  const Scalar _tmp95 = _tmp4 + _tmp61 + _tmp94;
  const Scalar _tmp96 = _tmp58 * _tmp95;
  const Scalar _tmp97 = -_tmp12;
  const Scalar _tmp98 = _tmp11 + _tmp65 + _tmp97;
  const Scalar _tmp99 = _tmp40 + _tmp41;
  const Scalar _tmp100 = _tmp37 + _tmp39 + _tmp99;
  const Scalar _tmp101 = _tmp100 * _tmp62;
  const Scalar _tmp102 = _tmp55 * _tmp95;
  const Scalar _tmp103 = _tmp76 * _tmp95;
  const Scalar _tmp104 = _tmp62 * (_tmp29 + _tmp30 + _tmp51);
  const Scalar _tmp105 = _tmp68 * sqrt_info(0, 2);
  const Scalar _tmp106 = -_tmp101 * sqrt_info(0, 0) - _tmp102 * _tmp50 - _tmp103 * sqrt_info(0, 0) -
                         _tmp104 * sqrt_info(0, 2) + _tmp105 * _tmp95 - _tmp50 * _tmp96 +
                         _tmp60 * _tmp95 - _tmp72 * _tmp98 - _tmp75 * _tmp95;
  const Scalar _tmp107 = _tmp59 * _tmp95;
  const Scalar _tmp108 = -_tmp100 * _tmp82 - _tmp104 * sqrt_info(1, 2) + _tmp107 * sqrt_info(1, 2) -
                         _tmp79 * _tmp95 + _tmp83 * _tmp95 - _tmp84 * _tmp98 - _tmp85 * _tmp95 -
                         _tmp86 * _tmp95 - _tmp87 * _tmp95;
  const Scalar _tmp109 = _tmp68 * sqrt_info(2, 2);
  const Scalar _tmp110 = -_tmp101 * sqrt_info(2, 0) - _tmp102 * _tmp89 - _tmp103 * sqrt_info(2, 0) -
                         _tmp104 * sqrt_info(2, 2) + _tmp107 * sqrt_info(2, 2) + _tmp109 * _tmp95 -
                         _tmp89 * _tmp96 - _tmp91 * _tmp98 - _tmp92 * _tmp95;
  const Scalar _tmp111 = _tmp38 + _tmp70 + _tmp99;
  const Scalar _tmp112 = _tmp3 + _tmp9 + _tmp94;
  const Scalar _tmp113 = _tmp28 + _tmp30 + _tmp34;
  const Scalar _tmp114 = _tmp62 * (_tmp15 + _tmp64 + _tmp97);
  const Scalar _tmp115 = _tmp111 * _tmp76;
  const Scalar _tmp116 = _tmp111 * _tmp58;
  const Scalar _tmp117 = _tmp111 * _tmp55;
  const Scalar _tmp118 = _tmp105 * _tmp111 + _tmp111 * _tmp60 - _tmp111 * _tmp75 +
                         _tmp112 * _tmp67 - _tmp113 * _tmp72 + _tmp114 * sqrt_info(0, 2) -
                         _tmp115 * sqrt_info(0, 0) - _tmp116 * _tmp50 - _tmp117 * _tmp50;
  const Scalar _tmp119 = _tmp59 * sqrt_info(1, 2);
  const Scalar _tmp120 = _tmp111 * _tmp119 - _tmp111 * _tmp79 + _tmp111 * _tmp83 -
                         _tmp111 * _tmp85 - _tmp111 * _tmp86 - _tmp111 * _tmp87 + _tmp112 * _tmp82 -
                         _tmp113 * _tmp84 + _tmp114 * sqrt_info(1, 2);
  const Scalar _tmp121 = _tmp59 * sqrt_info(2, 2);
  const Scalar _tmp122 = _tmp109 * _tmp111 + _tmp111 * _tmp121 - _tmp111 * _tmp92 +
                         _tmp112 * _tmp90 - _tmp113 * _tmp91 + _tmp114 * sqrt_info(2, 2) -
                         _tmp115 * sqrt_info(2, 0) - _tmp116 * _tmp89 - _tmp117 * _tmp89;
  const Scalar _tmp123 = _tmp43 * _tmp74;
  const Scalar _tmp124 = 2 * _tmp27;
  const Scalar _tmp125 = 2 * _tmp44;
  const Scalar _tmp126 = std::pow(_tmp35, Scalar(2));
  const Scalar _tmp127 = _tmp126 * _tmp55;
  const Scalar _tmp128 = _tmp126 * _tmp58;
  const Scalar _tmp129 = _tmp10 * _tmp74;
  const Scalar _tmp130 = -_tmp123 * sqrt_info(0, 2) - _tmp124 * sqrt_info(0, 2) -
                         _tmp125 * sqrt_info(0, 1) + _tmp127 * sqrt_info(0, 0) +
                         _tmp128 * sqrt_info(0, 0) + _tmp129 * sqrt_info(0, 1) + _tmp16 * _tmp67 -
                         _tmp35 * _tmp60 + _tmp50 * _tmp76;
  const Scalar _tmp131 = _tmp35 * _tmp59;
  const Scalar _tmp132 = -_tmp123 * sqrt_info(1, 2) - _tmp124 * sqrt_info(1, 2) +
                         _tmp127 * sqrt_info(1, 0) + _tmp128 * sqrt_info(1, 0) -
                         _tmp131 * sqrt_info(1, 2) + _tmp16 * _tmp82 + _tmp35 * _tmp79 +
                         _tmp35 * _tmp85 - _tmp43 * _tmp84;
  const Scalar _tmp133 = _tmp16 * _tmp62;
  const Scalar _tmp134 = -_tmp123 * sqrt_info(2, 2) - _tmp124 * sqrt_info(2, 2) -
                         _tmp125 * sqrt_info(2, 1) + _tmp127 * sqrt_info(2, 0) +
                         _tmp128 * sqrt_info(2, 0) + _tmp129 * sqrt_info(2, 1) -
                         _tmp131 * sqrt_info(2, 2) + _tmp133 * sqrt_info(2, 0) + _tmp76 * _tmp89;
  const Scalar _tmp135 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp136 = _tmp135 * _tmp58;
  const Scalar _tmp137 = 2 * _tmp36;
  const Scalar _tmp138 = _tmp10 * _tmp76;
  const Scalar _tmp139 = _tmp135 * _tmp55;
  const Scalar _tmp140 = -_tmp10 * _tmp105 - _tmp10 * _tmp60 + _tmp125 * sqrt_info(0, 0) +
                         _tmp129 * sqrt_info(0, 0) + _tmp136 * sqrt_info(0, 1) +
                         _tmp137 * sqrt_info(0, 2) + _tmp138 * sqrt_info(0, 0) +
                         _tmp139 * sqrt_info(0, 1) + _tmp16 * _tmp72;
  const Scalar _tmp141 = _tmp135 * _tmp46;
  const Scalar _tmp142 = -_tmp10 * _tmp119 - _tmp10 * _tmp83 + _tmp10 * _tmp86 + _tmp10 * _tmp87 +
                         _tmp137 * sqrt_info(1, 2) + _tmp141 * _tmp54 + _tmp141 * _tmp57 +
                         _tmp16 * _tmp84 + _tmp44 * _tmp81;
  const Scalar _tmp143 = -_tmp10 * _tmp109 - _tmp10 * _tmp121 + _tmp10 * _tmp92 +
                         _tmp125 * sqrt_info(2, 0) + _tmp136 * sqrt_info(2, 1) +
                         _tmp137 * sqrt_info(2, 2) + _tmp138 * sqrt_info(2, 0) +
                         _tmp139 * sqrt_info(2, 1) + _tmp16 * _tmp91;
  const Scalar _tmp144 = std::pow(_tmp43, Scalar(2));
  const Scalar _tmp145 = _tmp144 * _tmp58;
  const Scalar _tmp146 = _tmp144 * _tmp55;
  const Scalar _tmp147 = -_tmp123 * sqrt_info(0, 0) + _tmp124 * sqrt_info(0, 0) -
                         _tmp131 * sqrt_info(0, 0) + _tmp133 * sqrt_info(0, 2) -
                         _tmp137 * sqrt_info(0, 1) + _tmp145 * sqrt_info(0, 2) +
                         _tmp146 * sqrt_info(0, 2) - _tmp50 * _tmp59 - _tmp50 * _tmp68;
  const Scalar _tmp148 = -_tmp131 * sqrt_info(1, 0) + _tmp133 * sqrt_info(1, 2) +
                         _tmp145 * sqrt_info(1, 2) + _tmp146 * sqrt_info(1, 2) + _tmp27 * _tmp81 -
                         _tmp35 * _tmp84 - _tmp43 * _tmp79 - _tmp43 * _tmp85 - _tmp43 * _tmp86;
  const Scalar _tmp149 = _tmp124 * sqrt_info(2, 0) - _tmp131 * sqrt_info(2, 0) +
                         _tmp133 * sqrt_info(2, 2) - _tmp137 * sqrt_info(2, 1) +
                         _tmp145 * sqrt_info(2, 2) + _tmp146 * sqrt_info(2, 2) - _tmp43 * _tmp92 -
                         _tmp59 * _tmp89 - _tmp68 * _tmp89;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp45;
    _res(1, 0) = _tmp48;
    _res(2, 0) = _tmp49;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp78;
    _jacobian(1, 0) = _tmp88;
    _jacobian(2, 0) = _tmp93;
    _jacobian(0, 1) = _tmp106;
    _jacobian(1, 1) = _tmp108;
    _jacobian(2, 1) = _tmp110;
    _jacobian(0, 2) = _tmp118;
    _jacobian(1, 2) = _tmp120;
    _jacobian(2, 2) = _tmp122;
    _jacobian(0, 3) = _tmp130;
    _jacobian(1, 3) = _tmp132;
    _jacobian(2, 3) = _tmp134;
    _jacobian(0, 4) = _tmp140;
    _jacobian(1, 4) = _tmp142;
    _jacobian(2, 4) = _tmp143;
    _jacobian(0, 5) = _tmp147;
    _jacobian(1, 5) = _tmp148;
    _jacobian(2, 5) = _tmp149;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp78, Scalar(2)) + std::pow(_tmp88, Scalar(2)) + std::pow(_tmp93, Scalar(2));
    _hessian(1, 0) = _tmp106 * _tmp78 + _tmp108 * _tmp88 + _tmp110 * _tmp93;
    _hessian(2, 0) = _tmp118 * _tmp78 + _tmp120 * _tmp88 + _tmp122 * _tmp93;
    _hessian(3, 0) = _tmp130 * _tmp78 + _tmp132 * _tmp88 + _tmp134 * _tmp93;
    _hessian(4, 0) = _tmp140 * _tmp78 + _tmp142 * _tmp88 + _tmp143 * _tmp93;
    _hessian(5, 0) = _tmp147 * _tmp78 + _tmp148 * _tmp88 + _tmp149 * _tmp93;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp106, Scalar(2)) + std::pow(_tmp108, Scalar(2)) + std::pow(_tmp110, Scalar(2));
    _hessian(2, 1) = _tmp106 * _tmp118 + _tmp108 * _tmp120 + _tmp110 * _tmp122;
    _hessian(3, 1) = _tmp106 * _tmp130 + _tmp108 * _tmp132 + _tmp110 * _tmp134;
    _hessian(4, 1) = _tmp106 * _tmp140 + _tmp108 * _tmp142 + _tmp110 * _tmp143;
    _hessian(5, 1) = _tmp106 * _tmp147 + _tmp108 * _tmp148 + _tmp110 * _tmp149;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp118, Scalar(2)) + std::pow(_tmp120, Scalar(2)) + std::pow(_tmp122, Scalar(2));
    _hessian(3, 2) = _tmp118 * _tmp130 + _tmp120 * _tmp132 + _tmp122 * _tmp134;
    _hessian(4, 2) = _tmp118 * _tmp140 + _tmp120 * _tmp142 + _tmp122 * _tmp143;
    _hessian(5, 2) = _tmp118 * _tmp147 + _tmp120 * _tmp148 + _tmp122 * _tmp149;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) =
        std::pow(_tmp130, Scalar(2)) + std::pow(_tmp132, Scalar(2)) + std::pow(_tmp134, Scalar(2));
    _hessian(4, 3) = _tmp130 * _tmp140 + _tmp132 * _tmp142 + _tmp134 * _tmp143;
    _hessian(5, 3) = _tmp130 * _tmp147 + _tmp132 * _tmp148 + _tmp134 * _tmp149;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) =
        std::pow(_tmp140, Scalar(2)) + std::pow(_tmp142, Scalar(2)) + std::pow(_tmp143, Scalar(2));
    _hessian(5, 4) = _tmp140 * _tmp147 + _tmp142 * _tmp148 + _tmp143 * _tmp149;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) =
        std::pow(_tmp147, Scalar(2)) + std::pow(_tmp148, Scalar(2)) + std::pow(_tmp149, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp45 * _tmp78 + _tmp48 * _tmp88 + _tmp49 * _tmp93;
    _rhs(1, 0) = _tmp106 * _tmp45 + _tmp108 * _tmp48 + _tmp110 * _tmp49;
    _rhs(2, 0) = _tmp118 * _tmp45 + _tmp120 * _tmp48 + _tmp122 * _tmp49;
    _rhs(3, 0) = _tmp130 * _tmp45 + _tmp132 * _tmp48 + _tmp134 * _tmp49;
    _rhs(4, 0) = _tmp140 * _tmp45 + _tmp142 * _tmp48 + _tmp143 * _tmp49;
    _rhs(5, 0) = _tmp147 * _tmp45 + _tmp148 * _tmp48 + _tmp149 * _tmp49;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
