// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark ray into the target spherical camera and
 * comparing it against the correspondence.
 *
 * The landmark is specified as a camera point in the source camera with an inverse range; this
 * means the landmark is fixed in the source camera and always has residual 0 there (this 0 residual
 * is not returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target spherical camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     p_camera_source: The location of the landmark in the source camera coordinate, will be
 * normalized target_pixel: The location of the correspondence in the target camera weight: The
 * weight of the factor gnc_mu: The mu convexity parameter for the Barron noise model gnc_scale: The
 * scale parameter for the Barron noise model epsilon: Small positive value
 *     target_camera_model_class: The subclass of CameraCal to use as the target camera model
 *
 * Outputs:
 *     res: 2dof whiten residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkSphericalReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 9, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 3, 1>& p_camera_source,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1185

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (286)
  const Scalar _tmp0 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp1 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp2 = _tmp1 + Scalar(-1) / Scalar(2);
  const Scalar _tmp3 = _tmp0 + _tmp2;
  const Scalar _tmp4 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp5 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp6 = _tmp5 + Scalar(-1) / Scalar(2);
  const Scalar _tmp7 = std::pow(Scalar(epsilon + std::pow(p_camera_source(0, 0), Scalar(2)) +
                                       std::pow(p_camera_source(1, 0), Scalar(2)) +
                                       std::pow(p_camera_source(2, 0), Scalar(2))),
                                Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp8 = _tmp7 * p_camera_source(0, 0);
  const Scalar _tmp9 = 2 * _tmp8;
  const Scalar _tmp10 = _tmp7 * p_camera_source(1, 0);
  const Scalar _tmp11 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp12 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp16 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp17 = _tmp15 + _tmp16;
  const Scalar _tmp18 = _tmp7 * p_camera_source(2, 0);
  const Scalar _tmp19 = 2 * _tmp18;
  const Scalar _tmp20 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp21 =
      _tmp10 * _tmp14 + _tmp17 * _tmp19 - _tmp20 * source_inverse_range - _tmp9 * (_tmp4 + _tmp6);
  const Scalar _tmp22 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp23 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp24 = _tmp22 - _tmp23;
  const Scalar _tmp25 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp26 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp27 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp28 = _tmp26 + _tmp27;
  const Scalar _tmp29 = 2 * _tmp10;
  const Scalar _tmp30 = _tmp15 - _tmp16;
  const Scalar _tmp31 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp32 = -_tmp19 * (_tmp25 + _tmp4 + Scalar(-1) / Scalar(2)) + _tmp28 * _tmp29 +
                        _tmp30 * _tmp9 - _tmp31 * source_inverse_range;
  const Scalar _tmp33 = _tmp24 * _tmp32;
  const Scalar _tmp34 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp35 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp36 = _tmp34 + _tmp35;
  const Scalar _tmp37 = _tmp11 + _tmp12;
  const Scalar _tmp38 = 2 * _tmp37;
  const Scalar _tmp39 = _tmp26 - _tmp27;
  const Scalar _tmp40 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp41 =
      -_tmp19 * _tmp39 - _tmp29 * (_tmp25 + _tmp6) + _tmp38 * _tmp8 - _tmp40 * source_inverse_range;
  const Scalar _tmp42 = _tmp36 * _tmp41;
  const Scalar _tmp43 = _tmp21 * _tmp3 - _tmp33 - _tmp42;
  const Scalar _tmp44 = std::pow(_tmp43, Scalar(2));
  const Scalar _tmp45 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp46 = _tmp0 + _tmp45;
  const Scalar _tmp47 = _tmp46 + Scalar(-1) / Scalar(2);
  const Scalar _tmp48 = _tmp34 - _tmp35;
  const Scalar _tmp49 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp50 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp51 = _tmp49 + _tmp50;
  const Scalar _tmp52 = _tmp21 * _tmp48 - _tmp32 * _tmp51;
  const Scalar _tmp53 = _tmp41 * _tmp47 + _tmp52;
  const Scalar _tmp54 = std::pow(_tmp53, Scalar(2));
  const Scalar _tmp55 = 4 * _tmp44 + 4 * _tmp54 + epsilon;
  const Scalar _tmp56 = std::sqrt(_tmp55);
  const Scalar _tmp57 = _tmp2 + _tmp45;
  const Scalar _tmp58 = _tmp22 + _tmp23;
  const Scalar _tmp59 = _tmp21 * _tmp58;
  const Scalar _tmp60 = _tmp49 - _tmp50;
  const Scalar _tmp61 = _tmp41 * _tmp60;
  const Scalar _tmp62 = _tmp59 + _tmp61;
  const Scalar _tmp63 = -_tmp32 * _tmp57 + _tmp62;
  const Scalar _tmp64 = std::atan2(_tmp56, 2 * _tmp63);
  const Scalar _tmp65 = -target_calibration_storage(4, 0);
  const Scalar _tmp66 = _tmp65 + epsilon;
  const Scalar _tmp67 = std::min<Scalar>(_tmp64, -_tmp66);
  const Scalar _tmp68 = std::pow(_tmp67, Scalar(9)) * target_calibration_storage(8, 0) +
                        std::pow(_tmp67, Scalar(7)) * target_calibration_storage(7, 0) +
                        std::pow(_tmp67, Scalar(5)) * target_calibration_storage(6, 0) +
                        [&]() {
                          const Scalar base = _tmp67;
                          return base * base * base;
                        }() *
                            target_calibration_storage(5, 0) +
                        _tmp67;
  const Scalar _tmp69 = Scalar(1.0) / (_tmp56);
  const Scalar _tmp70 = 2 * _tmp69;
  const Scalar _tmp71 = _tmp70 * target_calibration_storage(0, 0);
  const Scalar _tmp72 = _tmp43 * _tmp71;
  const Scalar _tmp73 = -_tmp68 * _tmp72 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp74 = _tmp70 * target_calibration_storage(1, 0);
  const Scalar _tmp75 = _tmp53 * _tmp74;
  const Scalar _tmp76 = -_tmp68 * _tmp75 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp77 = std::pow(_tmp73, Scalar(2)) + std::pow(_tmp76, Scalar(2)) + epsilon;
  const Scalar _tmp78 = std::pow(_tmp77, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp79 = std::sqrt(weight);
  const Scalar _tmp80 = Scalar(1.0) / (-epsilon + gnc_mu - 1);
  const Scalar _tmp81 = epsilon + std::fabs(_tmp80);
  const Scalar _tmp82 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp83 = _tmp77 * _tmp82 / _tmp81 + 1;
  const Scalar _tmp84 = _tmp80 + 2;
  const Scalar _tmp85 =
      _tmp84 + 2 * epsilon *
                   (std::min<Scalar>(0, (((_tmp84) > 0) - ((_tmp84) < 0))) + Scalar(1) / Scalar(2));
  const Scalar _tmp86 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(_tmp81 * (std::pow(_tmp83, Scalar((Scalar(1) / Scalar(2)) * _tmp85)) - 1) /
                       _tmp85));
  const Scalar _tmp87 = std::max<Scalar>(0, -(((_tmp64 + _tmp65) > 0) - ((_tmp64 + _tmp65) < 0)));
  const Scalar _tmp88 = _tmp79 * _tmp86 * _tmp87;
  const Scalar _tmp89 = _tmp78 * _tmp88;
  const Scalar _tmp90 = _tmp73 * _tmp89;
  const Scalar _tmp91 = _tmp76 * _tmp89;
  const Scalar _tmp92 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp93 = -_tmp92;
  const Scalar _tmp94 = -_tmp4 + _tmp5;
  const Scalar _tmp95 = _tmp25 + _tmp93 + _tmp94;
  const Scalar _tmp96 = _tmp18 * _tmp95 - _tmp29 * _tmp39;
  const Scalar _tmp97 = -_tmp25;
  const Scalar _tmp98 = _tmp92 + _tmp94 + _tmp97;
  const Scalar _tmp99 = _tmp10 * _tmp98 - _tmp19 * _tmp28;
  const Scalar _tmp100 = -2 * _tmp10 * _tmp17 + 2 * _tmp13 * _tmp18;
  const Scalar _tmp101 = std::pow(_tmp63, Scalar(2));
  const Scalar _tmp102 = (Scalar(1) / Scalar(2)) * _tmp56 / _tmp101;
  const Scalar _tmp103 = -_tmp100 * _tmp3 - _tmp24 * _tmp99 - _tmp36 * _tmp96;
  const Scalar _tmp104 = -_tmp100 * _tmp48 + _tmp47 * _tmp96 - _tmp51 * _tmp99;
  const Scalar _tmp105 = _tmp103 * _tmp43 + _tmp104 * _tmp53;
  const Scalar _tmp106 = _tmp70 / _tmp63;
  const Scalar _tmp107 =
      -_tmp102 * (-_tmp100 * _tmp58 - _tmp57 * _tmp99 + _tmp60 * _tmp96) + _tmp105 * _tmp106;
  const Scalar _tmp108 =
      ((((_tmp64 + _tmp66) > 0) - ((_tmp64 + _tmp66) < 0)) - 1) / (4 * _tmp101 + _tmp55);
  const Scalar _tmp109 = _tmp101 * _tmp108;
  const Scalar _tmp110 = std::pow(_tmp67, Scalar(2)) * target_calibration_storage(5, 0);
  const Scalar _tmp111 = 6 * _tmp110;
  const Scalar _tmp112 = _tmp109 * _tmp111;
  const Scalar _tmp113 = std::pow(_tmp67, Scalar(4)) * target_calibration_storage(6, 0);
  const Scalar _tmp114 = 10 * _tmp113;
  const Scalar _tmp115 = _tmp109 * _tmp114;
  const Scalar _tmp116 = std::pow(_tmp67, Scalar(6)) * target_calibration_storage(7, 0);
  const Scalar _tmp117 = 14 * _tmp116;
  const Scalar _tmp118 = _tmp109 * _tmp117;
  const Scalar _tmp119 = std::pow(_tmp67, Scalar(8)) * target_calibration_storage(8, 0);
  const Scalar _tmp120 = 18 * _tmp119;
  const Scalar _tmp121 = _tmp109 * _tmp120;
  const Scalar _tmp122 = 2 * _tmp109;
  const Scalar _tmp123 = -_tmp107 * _tmp112 - _tmp107 * _tmp115 - _tmp107 * _tmp118 -
                         _tmp107 * _tmp121 - _tmp107 * _tmp122;
  const Scalar _tmp124 = _tmp68 * _tmp71;
  const Scalar _tmp125 = 8 * _tmp68 / (_tmp55 * std::sqrt(_tmp55));
  const Scalar _tmp126 = _tmp125 * target_calibration_storage(0, 0);
  const Scalar _tmp127 = _tmp126 * _tmp43;
  const Scalar _tmp128 = -_tmp103 * _tmp124 + _tmp105 * _tmp127 - _tmp123 * _tmp72;
  const Scalar _tmp129 = _tmp125 * target_calibration_storage(1, 0);
  const Scalar _tmp130 = _tmp129 * _tmp53;
  const Scalar _tmp131 = _tmp68 * _tmp74;
  const Scalar _tmp132 = -_tmp104 * _tmp131 + _tmp105 * _tmp130 - _tmp123 * _tmp75;
  const Scalar _tmp133 = _tmp128 * _tmp73 + _tmp132 * _tmp76;
  const Scalar _tmp134 = _tmp133 * _tmp73;
  const Scalar _tmp135 = _tmp78 * _tmp79 * _tmp82 *
                         std::pow(_tmp83, Scalar((Scalar(1) / Scalar(2)) * _tmp85 - 1)) * _tmp87 /
                         _tmp86;
  const Scalar _tmp136 = _tmp88 / (_tmp77 * std::sqrt(_tmp77));
  const Scalar _tmp137 = _tmp128 * _tmp89 + _tmp134 * _tmp135 - _tmp134 * _tmp136;
  const Scalar _tmp138 = _tmp135 * _tmp76;
  const Scalar _tmp139 = _tmp136 * _tmp76;
  const Scalar _tmp140 = _tmp132 * _tmp89 + _tmp133 * _tmp138 - _tmp133 * _tmp139;
  const Scalar _tmp141 = _tmp4 + _tmp5 + _tmp93 + _tmp97;
  const Scalar _tmp142 = -_tmp141 * _tmp18 - _tmp17 * _tmp9;
  const Scalar _tmp143 = _tmp19 * _tmp30 - _tmp8 * _tmp98;
  const Scalar _tmp144 = 2 * _tmp18 * _tmp37 + 2 * _tmp39 * _tmp8;
  const Scalar _tmp145 = _tmp142 * _tmp3 - _tmp143 * _tmp24 - _tmp144 * _tmp36;
  const Scalar _tmp146 = _tmp142 * _tmp48 - _tmp143 * _tmp51 + _tmp144 * _tmp47;
  const Scalar _tmp147 = _tmp145 * _tmp43 + _tmp146 * _tmp53;
  const Scalar _tmp148 =
      -_tmp102 * (_tmp142 * _tmp58 - _tmp143 * _tmp57 + _tmp144 * _tmp60) + _tmp106 * _tmp147;
  const Scalar _tmp149 = -_tmp112 * _tmp148 - _tmp115 * _tmp148 - _tmp118 * _tmp148 -
                         _tmp121 * _tmp148 - _tmp122 * _tmp148;
  const Scalar _tmp150 = -_tmp124 * _tmp145 + _tmp127 * _tmp147 - _tmp149 * _tmp72;
  const Scalar _tmp151 = _tmp130 * _tmp147 - _tmp131 * _tmp146 - _tmp149 * _tmp75;
  const Scalar _tmp152 = _tmp150 * _tmp73 + _tmp151 * _tmp76;
  const Scalar _tmp153 = _tmp136 * _tmp73;
  const Scalar _tmp154 = _tmp135 * _tmp73;
  const Scalar _tmp155 = -_tmp150 * _tmp89 + _tmp152 * _tmp153 - _tmp152 * _tmp154;
  const Scalar _tmp156 = -_tmp138 * _tmp152 + _tmp139 * _tmp152 - _tmp151 * _tmp89;
  const Scalar _tmp157 = -2 * _tmp10 * _tmp30 + 2 * _tmp28 * _tmp8;
  const Scalar _tmp158 = _tmp10 * _tmp141 + _tmp14 * _tmp8;
  const Scalar _tmp159 = -_tmp10 * _tmp38 - _tmp8 * _tmp95;
  const Scalar _tmp160 = -_tmp157 * _tmp51 + _tmp158 * _tmp48 + _tmp159 * _tmp47;
  const Scalar _tmp161 = -_tmp157 * _tmp24 + _tmp158 * _tmp3 - _tmp159 * _tmp36;
  const Scalar _tmp162 = _tmp160 * _tmp53 + _tmp161 * _tmp43;
  const Scalar _tmp163 =
      -_tmp102 * (-_tmp157 * _tmp57 + _tmp158 * _tmp58 + _tmp159 * _tmp60) + _tmp106 * _tmp162;
  const Scalar _tmp164 = -_tmp112 * _tmp163 - _tmp115 * _tmp163 - _tmp118 * _tmp163 -
                         _tmp121 * _tmp163 - _tmp122 * _tmp163;
  const Scalar _tmp165 = -_tmp124 * _tmp161 + _tmp127 * _tmp162 - _tmp164 * _tmp72;
  const Scalar _tmp166 = _tmp130 * _tmp162 - _tmp131 * _tmp160 - _tmp164 * _tmp75;
  const Scalar _tmp167 = _tmp165 * _tmp73 + _tmp166 * _tmp76;
  const Scalar _tmp168 = _tmp153 * _tmp167 - _tmp154 * _tmp167 - _tmp165 * _tmp89;
  const Scalar _tmp169 = _tmp138 * _tmp167 - _tmp139 * _tmp167 + _tmp166 * _tmp89;
  const Scalar _tmp170 = _tmp43 * source_inverse_range;
  const Scalar _tmp171 = _tmp53 * source_inverse_range;
  const Scalar _tmp172 = _tmp170 * _tmp3 + _tmp171 * _tmp48;
  const Scalar _tmp173 = _tmp127 * _tmp172;
  const Scalar _tmp174 = _tmp124 * source_inverse_range;
  const Scalar _tmp175 = _tmp174 * _tmp3;
  const Scalar _tmp176 = _tmp102 * source_inverse_range;
  const Scalar _tmp177 = _tmp176 * _tmp58;
  const Scalar _tmp178 = _tmp106 * _tmp172;
  const Scalar _tmp179 = -_tmp177 + _tmp178;
  const Scalar _tmp180 = -_tmp112 * _tmp179 - _tmp115 * _tmp179 - _tmp118 * _tmp179 -
                         _tmp121 * _tmp179 - _tmp122 * _tmp179;
  const Scalar _tmp181 = _tmp173 - _tmp175 - _tmp180 * _tmp72;
  const Scalar _tmp182 = _tmp130 * _tmp172;
  const Scalar _tmp183 = _tmp131 * source_inverse_range;
  const Scalar _tmp184 = _tmp183 * _tmp48;
  const Scalar _tmp185 = -_tmp180 * _tmp75 + _tmp182 - _tmp184;
  const Scalar _tmp186 = _tmp181 * _tmp73 + _tmp185 * _tmp76;
  const Scalar _tmp187 = -_tmp153 * _tmp186 + _tmp154 * _tmp186 + _tmp181 * _tmp89;
  const Scalar _tmp188 = _tmp138 * _tmp186 - _tmp139 * _tmp186 + _tmp185 * _tmp89;
  const Scalar _tmp189 = _tmp174 * _tmp36;
  const Scalar _tmp190 = _tmp176 * _tmp60;
  const Scalar _tmp191 = -_tmp170 * _tmp36 + _tmp171 * _tmp47;
  const Scalar _tmp192 = _tmp106 * _tmp191;
  const Scalar _tmp193 = -_tmp190 + _tmp192;
  const Scalar _tmp194 = _tmp109 * _tmp193;
  const Scalar _tmp195 = -_tmp112 * _tmp193 - _tmp114 * _tmp194 - _tmp117 * _tmp194 -
                         _tmp120 * _tmp194 - _tmp122 * _tmp193;
  const Scalar _tmp196 = _tmp127 * _tmp191;
  const Scalar _tmp197 = _tmp189 - _tmp195 * _tmp72 + _tmp196;
  const Scalar _tmp198 = _tmp183 * _tmp47;
  const Scalar _tmp199 = _tmp130 * _tmp191;
  const Scalar _tmp200 = -_tmp195 * _tmp75 - _tmp198 + _tmp199;
  const Scalar _tmp201 = _tmp197 * _tmp73 + _tmp200 * _tmp76;
  const Scalar _tmp202 = -_tmp153 * _tmp201 + _tmp154 * _tmp201 + _tmp197 * _tmp89;
  const Scalar _tmp203 = -_tmp138 * _tmp201 + _tmp139 * _tmp201 - _tmp200 * _tmp89;
  const Scalar _tmp204 = _tmp176 * _tmp57;
  const Scalar _tmp205 = _tmp170 * _tmp24 + _tmp171 * _tmp51;
  const Scalar _tmp206 = _tmp106 * _tmp205;
  const Scalar _tmp207 = _tmp204 - _tmp206;
  const Scalar _tmp208 = _tmp109 * _tmp207;
  const Scalar _tmp209 = -_tmp111 * _tmp208 - _tmp114 * _tmp208 - _tmp117 * _tmp208 -
                         _tmp120 * _tmp208 - _tmp122 * _tmp207;
  const Scalar _tmp210 = _tmp174 * _tmp24;
  const Scalar _tmp211 = _tmp127 * _tmp205;
  const Scalar _tmp212 = -_tmp209 * _tmp72 + _tmp210 - _tmp211;
  const Scalar _tmp213 = _tmp130 * _tmp205;
  const Scalar _tmp214 = _tmp183 * _tmp51;
  const Scalar _tmp215 = -_tmp209 * _tmp75 - _tmp213 + _tmp214;
  const Scalar _tmp216 = _tmp212 * _tmp73 + _tmp215 * _tmp76;
  const Scalar _tmp217 = _tmp153 * _tmp216 - _tmp154 * _tmp216 - _tmp212 * _tmp89;
  const Scalar _tmp218 = -_tmp138 * _tmp216 + _tmp139 * _tmp216 - _tmp215 * _tmp89;
  const Scalar _tmp219 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp220 = -_tmp219;
  const Scalar _tmp221 = -_tmp0 + _tmp45;
  const Scalar _tmp222 = (Scalar(1) / Scalar(2)) * _tmp32 * (_tmp1 + _tmp220 + _tmp221);
  const Scalar _tmp223 = _tmp222 - _tmp59 - _tmp61;
  const Scalar _tmp224 = _tmp223 * _tmp53;
  const Scalar _tmp225 = -_tmp1;
  const Scalar _tmp226 = (Scalar(1) / Scalar(2)) * _tmp41 * (_tmp220 + _tmp225 + _tmp46) + _tmp52;
  const Scalar _tmp227 = -_tmp102 * _tmp226 + _tmp106 * _tmp224;
  const Scalar _tmp228 = -_tmp112 * _tmp227 - _tmp115 * _tmp227 - _tmp118 * _tmp227 -
                         _tmp121 * _tmp227 - _tmp122 * _tmp227;
  const Scalar _tmp229 = _tmp129 * _tmp223 * _tmp54 - _tmp131 * _tmp223 - _tmp228 * _tmp75;
  const Scalar _tmp230 = _tmp127 * _tmp224 - _tmp228 * _tmp72;
  const Scalar _tmp231 = _tmp229 * _tmp76 + _tmp230 * _tmp73;
  const Scalar _tmp232 = -_tmp153 * _tmp231 + _tmp154 * _tmp231 + _tmp230 * _tmp89;
  const Scalar _tmp233 = -_tmp138 * _tmp231 + _tmp139 * _tmp231 - _tmp229 * _tmp89;
  const Scalar _tmp234 = -_tmp222 + _tmp62;
  const Scalar _tmp235 = _tmp234 * _tmp43;
  const Scalar _tmp236 =
      (Scalar(1) / Scalar(2)) * _tmp21 * (_tmp219 + _tmp221 + _tmp225) + _tmp33 + _tmp42;
  const Scalar _tmp237 = -_tmp102 * _tmp236 + _tmp106 * _tmp235;
  const Scalar _tmp238 = -_tmp112 * _tmp237 - _tmp115 * _tmp237 - _tmp118 * _tmp237 -
                         _tmp121 * _tmp237 - _tmp122 * _tmp237;
  const Scalar _tmp239 = -_tmp124 * _tmp234 + _tmp126 * _tmp234 * _tmp44 - _tmp238 * _tmp72;
  const Scalar _tmp240 = _tmp130 * _tmp235 - _tmp238 * _tmp75;
  const Scalar _tmp241 = _tmp239 * _tmp73 + _tmp240 * _tmp76;
  const Scalar _tmp242 = -_tmp153 * _tmp241 + _tmp154 * _tmp241 + _tmp239 * _tmp89;
  const Scalar _tmp243 = -_tmp138 * _tmp241 + _tmp139 * _tmp241 - _tmp240 * _tmp89;
  const Scalar _tmp244 = _tmp226 * _tmp43 + _tmp236 * _tmp53;
  const Scalar _tmp245 = _tmp108 * _tmp244 * _tmp63 * _tmp69;
  const Scalar _tmp246 = -12 * _tmp110 * _tmp245 - 20 * _tmp113 * _tmp245 - 28 * _tmp116 * _tmp245 -
                         36 * _tmp119 * _tmp245 - 4 * _tmp245;
  const Scalar _tmp247 = -_tmp124 * _tmp226 + _tmp127 * _tmp244 - _tmp246 * _tmp72;
  const Scalar _tmp248 = _tmp130 * _tmp244 - _tmp131 * _tmp236 - _tmp246 * _tmp75;
  const Scalar _tmp249 = _tmp247 * _tmp73 + _tmp248 * _tmp76;
  const Scalar _tmp250 = _tmp153 * _tmp249 - _tmp154 * _tmp249 - _tmp247 * _tmp89;
  const Scalar _tmp251 = -_tmp138 * _tmp249 + _tmp139 * _tmp249 - _tmp248 * _tmp89;
  const Scalar _tmp252 = _tmp177 - _tmp178;
  const Scalar _tmp253 = -_tmp112 * _tmp252 - _tmp115 * _tmp252 - _tmp118 * _tmp252 -
                         _tmp121 * _tmp252 - _tmp122 * _tmp252;
  const Scalar _tmp254 = -_tmp173 + _tmp175 - _tmp253 * _tmp72;
  const Scalar _tmp255 = -_tmp182 + _tmp184 - _tmp253 * _tmp75;
  const Scalar _tmp256 = _tmp254 * _tmp73 + _tmp255 * _tmp76;
  const Scalar _tmp257 = -_tmp153 * _tmp256 + _tmp154 * _tmp256 + _tmp254 * _tmp89;
  const Scalar _tmp258 = -_tmp138 * _tmp256 + _tmp139 * _tmp256 - _tmp255 * _tmp89;
  const Scalar _tmp259 = _tmp190 - _tmp192;
  const Scalar _tmp260 = _tmp109 * _tmp259;
  const Scalar _tmp261 = -_tmp111 * _tmp260 - _tmp114 * _tmp260 - _tmp117 * _tmp260 -
                         _tmp120 * _tmp260 - _tmp122 * _tmp259;
  const Scalar _tmp262 = -_tmp189 - _tmp196 - _tmp261 * _tmp72;
  const Scalar _tmp263 = _tmp198 - _tmp199 - _tmp261 * _tmp75;
  const Scalar _tmp264 = _tmp262 * _tmp73 + _tmp263 * _tmp76;
  const Scalar _tmp265 = -_tmp153 * _tmp264 + _tmp154 * _tmp264 + _tmp262 * _tmp89;
  const Scalar _tmp266 = _tmp138 * _tmp264 - _tmp139 * _tmp264 + _tmp263 * _tmp89;
  const Scalar _tmp267 = -_tmp204 + _tmp206;
  const Scalar _tmp268 = _tmp109 * _tmp267;
  const Scalar _tmp269 = -_tmp111 * _tmp268 - _tmp114 * _tmp268 - _tmp117 * _tmp268 -
                         _tmp120 * _tmp268 - _tmp122 * _tmp267;
  const Scalar _tmp270 = -_tmp210 + _tmp211 - _tmp269 * _tmp72;
  const Scalar _tmp271 = _tmp213 - _tmp214 - _tmp269 * _tmp75;
  const Scalar _tmp272 = _tmp270 * _tmp73 + _tmp271 * _tmp76;
  const Scalar _tmp273 = -_tmp153 * _tmp272 + _tmp154 * _tmp272 + _tmp270 * _tmp89;
  const Scalar _tmp274 = _tmp138 * _tmp272 - _tmp139 * _tmp272 + _tmp271 * _tmp89;
  const Scalar _tmp275 = -_tmp20 * _tmp3 + _tmp24 * _tmp31 + _tmp36 * _tmp40;
  const Scalar _tmp276 = _tmp20 * _tmp48 - _tmp31 * _tmp51 + _tmp40 * _tmp47;
  const Scalar _tmp277 = _tmp275 * _tmp43 - _tmp276 * _tmp53;
  const Scalar _tmp278 =
      _tmp102 * (_tmp20 * _tmp58 - _tmp31 * _tmp57 + _tmp40 * _tmp60) + _tmp106 * _tmp277;
  const Scalar _tmp279 = _tmp109 * _tmp278;
  const Scalar _tmp280 = -_tmp111 * _tmp279 - _tmp114 * _tmp279 - _tmp117 * _tmp279 -
                         _tmp120 * _tmp279 - _tmp122 * _tmp278;
  const Scalar _tmp281 = -_tmp124 * _tmp275 + _tmp127 * _tmp277 - _tmp280 * _tmp72;
  const Scalar _tmp282 = _tmp130 * _tmp277 + _tmp131 * _tmp276 - _tmp280 * _tmp75;
  const Scalar _tmp283 = _tmp281 * _tmp73 + _tmp282 * _tmp76;
  const Scalar _tmp284 = -_tmp153 * _tmp283 + _tmp154 * _tmp283 + _tmp281 * _tmp89;
  const Scalar _tmp285 = _tmp138 * _tmp283 - _tmp139 * _tmp283 + _tmp282 * _tmp89;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp90;
    _res(1, 0) = _tmp91;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp137;
    _jacobian(1, 0) = _tmp140;
    _jacobian(0, 1) = -_tmp155;
    _jacobian(1, 1) = -_tmp156;
    _jacobian(0, 2) = -_tmp168;
    _jacobian(1, 2) = _tmp169;
    _jacobian(0, 3) = _tmp187;
    _jacobian(1, 3) = _tmp188;
    _jacobian(0, 4) = _tmp202;
    _jacobian(1, 4) = -_tmp203;
    _jacobian(0, 5) = -_tmp217;
    _jacobian(1, 5) = -_tmp218;
    _jacobian(0, 6) = _tmp232;
    _jacobian(1, 6) = -_tmp233;
    _jacobian(0, 7) = _tmp242;
    _jacobian(1, 7) = -_tmp243;
    _jacobian(0, 8) = -_tmp250;
    _jacobian(1, 8) = -_tmp251;
    _jacobian(0, 9) = _tmp257;
    _jacobian(1, 9) = -_tmp258;
    _jacobian(0, 10) = _tmp265;
    _jacobian(1, 10) = _tmp266;
    _jacobian(0, 11) = _tmp273;
    _jacobian(1, 11) = _tmp274;
    _jacobian(0, 12) = _tmp284;
    _jacobian(1, 12) = _tmp285;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp137, Scalar(2)) + std::pow(_tmp140, Scalar(2));
    _hessian(1, 0) = -_tmp137 * _tmp155 - _tmp140 * _tmp156;
    _hessian(2, 0) = -_tmp137 * _tmp168 + _tmp140 * _tmp169;
    _hessian(3, 0) = _tmp137 * _tmp187 + _tmp140 * _tmp188;
    _hessian(4, 0) = _tmp137 * _tmp202 - _tmp140 * _tmp203;
    _hessian(5, 0) = -_tmp137 * _tmp217 - _tmp140 * _tmp218;
    _hessian(6, 0) = _tmp137 * _tmp232 - _tmp140 * _tmp233;
    _hessian(7, 0) = _tmp137 * _tmp242 - _tmp140 * _tmp243;
    _hessian(8, 0) = -_tmp137 * _tmp250 - _tmp140 * _tmp251;
    _hessian(9, 0) = _tmp137 * _tmp257 - _tmp140 * _tmp258;
    _hessian(10, 0) = _tmp137 * _tmp265 + _tmp140 * _tmp266;
    _hessian(11, 0) = _tmp137 * _tmp273 + _tmp140 * _tmp274;
    _hessian(12, 0) = _tmp137 * _tmp284 + _tmp140 * _tmp285;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp155, Scalar(2)) + std::pow(_tmp156, Scalar(2));
    _hessian(2, 1) = _tmp155 * _tmp168 - _tmp156 * _tmp169;
    _hessian(3, 1) = -_tmp155 * _tmp187 - _tmp156 * _tmp188;
    _hessian(4, 1) = -_tmp155 * _tmp202 + _tmp156 * _tmp203;
    _hessian(5, 1) = _tmp155 * _tmp217 + _tmp156 * _tmp218;
    _hessian(6, 1) = -_tmp155 * _tmp232 + _tmp156 * _tmp233;
    _hessian(7, 1) = -_tmp155 * _tmp242 + _tmp156 * _tmp243;
    _hessian(8, 1) = _tmp155 * _tmp250 + _tmp156 * _tmp251;
    _hessian(9, 1) = -_tmp155 * _tmp257 + _tmp156 * _tmp258;
    _hessian(10, 1) = -_tmp155 * _tmp265 - _tmp156 * _tmp266;
    _hessian(11, 1) = -_tmp155 * _tmp273 - _tmp156 * _tmp274;
    _hessian(12, 1) = -_tmp155 * _tmp284 - _tmp156 * _tmp285;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp168, Scalar(2)) + std::pow(_tmp169, Scalar(2));
    _hessian(3, 2) = -_tmp168 * _tmp187 + _tmp169 * _tmp188;
    _hessian(4, 2) = -_tmp168 * _tmp202 - _tmp169 * _tmp203;
    _hessian(5, 2) = _tmp168 * _tmp217 - _tmp169 * _tmp218;
    _hessian(6, 2) = -_tmp168 * _tmp232 - _tmp169 * _tmp233;
    _hessian(7, 2) = -_tmp168 * _tmp242 - _tmp169 * _tmp243;
    _hessian(8, 2) = _tmp168 * _tmp250 - _tmp169 * _tmp251;
    _hessian(9, 2) = -_tmp168 * _tmp257 - _tmp169 * _tmp258;
    _hessian(10, 2) = -_tmp168 * _tmp265 + _tmp169 * _tmp266;
    _hessian(11, 2) = -_tmp168 * _tmp273 + _tmp169 * _tmp274;
    _hessian(12, 2) = -_tmp168 * _tmp284 + _tmp169 * _tmp285;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp187, Scalar(2)) + std::pow(_tmp188, Scalar(2));
    _hessian(4, 3) = _tmp187 * _tmp202 - _tmp188 * _tmp203;
    _hessian(5, 3) = -_tmp187 * _tmp217 - _tmp188 * _tmp218;
    _hessian(6, 3) = _tmp187 * _tmp232 - _tmp188 * _tmp233;
    _hessian(7, 3) = _tmp187 * _tmp242 - _tmp188 * _tmp243;
    _hessian(8, 3) = -_tmp187 * _tmp250 - _tmp188 * _tmp251;
    _hessian(9, 3) = _tmp187 * _tmp257 - _tmp188 * _tmp258;
    _hessian(10, 3) = _tmp187 * _tmp265 + _tmp188 * _tmp266;
    _hessian(11, 3) = _tmp187 * _tmp273 + _tmp188 * _tmp274;
    _hessian(12, 3) = _tmp187 * _tmp284 + _tmp188 * _tmp285;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp202, Scalar(2)) + std::pow(_tmp203, Scalar(2));
    _hessian(5, 4) = -_tmp202 * _tmp217 + _tmp203 * _tmp218;
    _hessian(6, 4) = _tmp202 * _tmp232 + _tmp203 * _tmp233;
    _hessian(7, 4) = _tmp202 * _tmp242 + _tmp203 * _tmp243;
    _hessian(8, 4) = -_tmp202 * _tmp250 + _tmp203 * _tmp251;
    _hessian(9, 4) = _tmp202 * _tmp257 + _tmp203 * _tmp258;
    _hessian(10, 4) = _tmp202 * _tmp265 - _tmp203 * _tmp266;
    _hessian(11, 4) = _tmp202 * _tmp273 - _tmp203 * _tmp274;
    _hessian(12, 4) = _tmp202 * _tmp284 - _tmp203 * _tmp285;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp217, Scalar(2)) + std::pow(_tmp218, Scalar(2));
    _hessian(6, 5) = -_tmp217 * _tmp232 + _tmp218 * _tmp233;
    _hessian(7, 5) = -_tmp217 * _tmp242 + _tmp218 * _tmp243;
    _hessian(8, 5) = _tmp217 * _tmp250 + _tmp218 * _tmp251;
    _hessian(9, 5) = -_tmp217 * _tmp257 + _tmp218 * _tmp258;
    _hessian(10, 5) = -_tmp217 * _tmp265 - _tmp218 * _tmp266;
    _hessian(11, 5) = -_tmp217 * _tmp273 - _tmp218 * _tmp274;
    _hessian(12, 5) = -_tmp217 * _tmp284 - _tmp218 * _tmp285;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp232, Scalar(2)) + std::pow(_tmp233, Scalar(2));
    _hessian(7, 6) = _tmp232 * _tmp242 + _tmp233 * _tmp243;
    _hessian(8, 6) = -_tmp232 * _tmp250 + _tmp233 * _tmp251;
    _hessian(9, 6) = _tmp232 * _tmp257 + _tmp233 * _tmp258;
    _hessian(10, 6) = _tmp232 * _tmp265 - _tmp233 * _tmp266;
    _hessian(11, 6) = _tmp232 * _tmp273 - _tmp233 * _tmp274;
    _hessian(12, 6) = _tmp232 * _tmp284 - _tmp233 * _tmp285;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp242, Scalar(2)) + std::pow(_tmp243, Scalar(2));
    _hessian(8, 7) = -_tmp242 * _tmp250 + _tmp243 * _tmp251;
    _hessian(9, 7) = _tmp242 * _tmp257 + _tmp243 * _tmp258;
    _hessian(10, 7) = _tmp242 * _tmp265 - _tmp243 * _tmp266;
    _hessian(11, 7) = _tmp242 * _tmp273 - _tmp243 * _tmp274;
    _hessian(12, 7) = _tmp242 * _tmp284 - _tmp243 * _tmp285;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp250, Scalar(2)) + std::pow(_tmp251, Scalar(2));
    _hessian(9, 8) = -_tmp250 * _tmp257 + _tmp251 * _tmp258;
    _hessian(10, 8) = -_tmp250 * _tmp265 - _tmp251 * _tmp266;
    _hessian(11, 8) = -_tmp250 * _tmp273 - _tmp251 * _tmp274;
    _hessian(12, 8) = -_tmp250 * _tmp284 - _tmp251 * _tmp285;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp257, Scalar(2)) + std::pow(_tmp258, Scalar(2));
    _hessian(10, 9) = _tmp257 * _tmp265 - _tmp258 * _tmp266;
    _hessian(11, 9) = _tmp257 * _tmp273 - _tmp258 * _tmp274;
    _hessian(12, 9) = _tmp257 * _tmp284 - _tmp258 * _tmp285;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp265, Scalar(2)) + std::pow(_tmp266, Scalar(2));
    _hessian(11, 10) = _tmp265 * _tmp273 + _tmp266 * _tmp274;
    _hessian(12, 10) = _tmp265 * _tmp284 + _tmp266 * _tmp285;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp273, Scalar(2)) + std::pow(_tmp274, Scalar(2));
    _hessian(12, 11) = _tmp273 * _tmp284 + _tmp274 * _tmp285;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp284, Scalar(2)) + std::pow(_tmp285, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp137 * _tmp90 + _tmp140 * _tmp91;
    _rhs(1, 0) = -_tmp155 * _tmp90 - _tmp156 * _tmp91;
    _rhs(2, 0) = -_tmp168 * _tmp90 + _tmp169 * _tmp91;
    _rhs(3, 0) = _tmp187 * _tmp90 + _tmp188 * _tmp91;
    _rhs(4, 0) = _tmp202 * _tmp90 - _tmp203 * _tmp91;
    _rhs(5, 0) = -_tmp217 * _tmp90 - _tmp218 * _tmp91;
    _rhs(6, 0) = _tmp232 * _tmp90 - _tmp233 * _tmp91;
    _rhs(7, 0) = _tmp242 * _tmp90 - _tmp243 * _tmp91;
    _rhs(8, 0) = -_tmp250 * _tmp90 - _tmp251 * _tmp91;
    _rhs(9, 0) = _tmp257 * _tmp90 - _tmp258 * _tmp91;
    _rhs(10, 0) = _tmp265 * _tmp90 + _tmp266 * _tmp91;
    _rhs(11, 0) = _tmp273 * _tmp90 + _tmp274 * _tmp91;
    _rhs(12, 0) = _tmp284 * _tmp90 + _tmp285 * _tmp91;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
