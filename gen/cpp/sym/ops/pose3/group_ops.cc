// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     ops/CLASS/group_ops.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include <sym/ops/pose3/group_ops.h>
#include <sym/pose3.h>

namespace sym {

/**
 *
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 *
 * Outputs:
 *     res: Pose3
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::Identity() {
  // Total ops: 0

  // Input arrays

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = 0;
  _res[1] = 0;
  _res[2] = 0;
  _res[3] = 1;
  _res[4] = 0;
  _res[5] = 0;
  _res[6] = 0;

  return sym::Pose3<Scalar>(_res, /* normalize */ false);
}

/**
 *
 * Inverse of the element a.
 *
 * Returns:
 *     Element: b such that a @ b = identity
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::Inverse(const sym::Pose3<Scalar>& a) {
  // Total ops: 49

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

  // Intermediate terms (11)
  const Scalar _tmp0 = 2 * _a[0];
  const Scalar _tmp1 = _a[1] * _tmp0;
  const Scalar _tmp2 = 2 * _a[3];
  const Scalar _tmp3 = _a[2] * _tmp2;
  const Scalar _tmp4 = _a[2] * _tmp0;
  const Scalar _tmp5 = _a[1] * _tmp2;
  const Scalar _tmp6 = -2 * std::pow(_a[1], Scalar(2));
  const Scalar _tmp7 = 1 - 2 * std::pow(_a[2], Scalar(2));
  const Scalar _tmp8 = 2 * _a[1] * _a[2];
  const Scalar _tmp9 = _a[3] * _tmp0;
  const Scalar _tmp10 = -2 * std::pow(_a[0], Scalar(2));

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_a[0];
  _res[1] = -_a[1];
  _res[2] = -_a[2];
  _res[3] = _a[3];
  _res[4] = -_a[4] * (_tmp6 + _tmp7) - _a[5] * (_tmp1 + _tmp3) - _a[6] * (_tmp4 - _tmp5);
  _res[5] = -_a[4] * (_tmp1 - _tmp3) - _a[5] * (_tmp10 + _tmp7) - _a[6] * (_tmp8 + _tmp9);
  _res[6] = -_a[4] * (_tmp4 + _tmp5) - _a[5] * (_tmp8 - _tmp9) - _a[6] * (_tmp10 + _tmp6 + 1);

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::Compose(const sym::Pose3<Scalar>& a,
                                                    const sym::Pose3<Scalar>& b) {
  // Total ops: 74

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (11)
  const Scalar _tmp0 = 2 * _a[0];
  const Scalar _tmp1 = _a[2] * _tmp0;
  const Scalar _tmp2 = 2 * _a[3];
  const Scalar _tmp3 = _a[1] * _tmp2;
  const Scalar _tmp4 = _a[1] * _tmp0;
  const Scalar _tmp5 = _a[2] * _tmp2;
  const Scalar _tmp6 = -2 * std::pow(_a[2], Scalar(2));
  const Scalar _tmp7 = -2 * std::pow(_a[1], Scalar(2));
  const Scalar _tmp8 = 2 * _a[1] * _a[2];
  const Scalar _tmp9 = _a[3] * _tmp0;
  const Scalar _tmp10 = 1 - 2 * std::pow(_a[0], Scalar(2));

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  _res[1] = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  _res[2] = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  _res[3] = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];
  _res[4] = _a[4] + _b[4] * (_tmp6 + _tmp7 + 1) + _b[5] * (_tmp4 - _tmp5) + _b[6] * (_tmp1 + _tmp3);
  _res[5] = _a[5] + _b[4] * (_tmp4 + _tmp5) + _b[5] * (_tmp10 + _tmp6) + _b[6] * (_tmp8 - _tmp9);
  _res[6] = _a[6] + _b[4] * (_tmp1 - _tmp3) + _b[5] * (_tmp8 + _tmp9) + _b[6] * (_tmp10 + _tmp7);

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply ``compose(inverse(a), b)``.
 *
 * Returns:
 *     Element: c such that a @ c = b
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::Between(const sym::Pose3<Scalar>& a,
                                                    const sym::Pose3<Scalar>& b) {
  // Total ops: 89

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (20)
  const Scalar _tmp0 = 2 * _a[0];
  const Scalar _tmp1 = _a[2] * _tmp0;
  const Scalar _tmp2 = 2 * _a[3];
  const Scalar _tmp3 = _a[1] * _tmp2;
  const Scalar _tmp4 = _tmp1 - _tmp3;
  const Scalar _tmp5 = _a[1] * _tmp0;
  const Scalar _tmp6 = _a[2] * _tmp2;
  const Scalar _tmp7 = _tmp5 + _tmp6;
  const Scalar _tmp8 = -2 * std::pow(_a[2], Scalar(2));
  const Scalar _tmp9 = 1 - 2 * std::pow(_a[1], Scalar(2));
  const Scalar _tmp10 = _tmp8 + _tmp9;
  const Scalar _tmp11 = _tmp5 - _tmp6;
  const Scalar _tmp12 = 2 * _a[1] * _a[2];
  const Scalar _tmp13 = _a[3] * _tmp0;
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = -2 * std::pow(_a[0], Scalar(2));
  const Scalar _tmp16 = _tmp15 + _tmp8 + 1;
  const Scalar _tmp17 = _tmp1 + _tmp3;
  const Scalar _tmp18 = _tmp12 - _tmp13;
  const Scalar _tmp19 = _tmp15 + _tmp9;

  // Output terms (1)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  _res[1] = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  _res[2] = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  _res[3] = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  _res[4] = -_a[4] * _tmp10 - _a[5] * _tmp7 - _a[6] * _tmp4 + _b[4] * _tmp10 + _b[5] * _tmp7 +
            _b[6] * _tmp4;
  _res[5] = -_a[4] * _tmp11 - _a[5] * _tmp16 - _a[6] * _tmp14 + _b[4] * _tmp11 + _b[5] * _tmp16 +
            _b[6] * _tmp14;
  _res[6] = -_a[4] * _tmp17 - _a[5] * _tmp18 - _a[6] * _tmp19 + _b[4] * _tmp17 + _b[5] * _tmp18 +
            _b[6] * _tmp19;

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Returns:
 *     Element: b such that a @ b = identity
 *     res_D_a: (6x6) jacobian of res (6) wrt arg a (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::InverseWithJacobian(const sym::Pose3<Scalar>& a,
                                                                SelfJacobian* const res_D_a) {
  // Total ops: 115

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();

  // Intermediate terms (48)
  const Scalar _tmp0 = 2 * _a[0];
  const Scalar _tmp1 = _a[1] * _tmp0;
  const Scalar _tmp2 = 2 * _a[3];
  const Scalar _tmp3 = _a[2] * _tmp2;
  const Scalar _tmp4 = _a[5] * (_tmp1 + _tmp3);
  const Scalar _tmp5 = _a[2] * _tmp0;
  const Scalar _tmp6 = _a[1] * _tmp2;
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = _a[6] * (_tmp5 + _tmp7);
  const Scalar _tmp9 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp10 = 2 * _tmp9;
  const Scalar _tmp11 = -_tmp10;
  const Scalar _tmp12 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp13 = 2 * _tmp12;
  const Scalar _tmp14 = -_tmp13;
  const Scalar _tmp15 = -_tmp3;
  const Scalar _tmp16 = _a[4] * (_tmp1 + _tmp15);
  const Scalar _tmp17 = 2 * _a[1] * _a[2];
  const Scalar _tmp18 = _a[3] * _tmp0;
  const Scalar _tmp19 = _a[6] * (_tmp17 + _tmp18);
  const Scalar _tmp20 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = 1 - _tmp21;
  const Scalar _tmp23 = _a[4] * (_tmp5 + _tmp6);
  const Scalar _tmp24 = -_tmp18;
  const Scalar _tmp25 = _a[5] * (_tmp17 + _tmp24);
  const Scalar _tmp26 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = _tmp27 + _tmp9;
  const Scalar _tmp29 = -_tmp20;
  const Scalar _tmp30 = _tmp12 + _tmp29;
  const Scalar _tmp31 = _tmp28 + _tmp30;
  const Scalar _tmp32 = -_tmp1;
  const Scalar _tmp33 = _tmp15 + _tmp32;
  const Scalar _tmp34 = -_tmp5;
  const Scalar _tmp35 = _tmp34 + _tmp6;
  const Scalar _tmp36 = -_tmp12;
  const Scalar _tmp37 = _tmp3 + _tmp32;
  const Scalar _tmp38 = -_tmp17;
  const Scalar _tmp39 = _tmp24 + _tmp38;
  const Scalar _tmp40 = _tmp20 + _tmp36;
  const Scalar _tmp41 = _tmp28 + _tmp40;
  const Scalar _tmp42 = _tmp34 + _tmp7;
  const Scalar _tmp43 = _tmp18 + _tmp38;
  const Scalar _tmp44 = -_tmp9;
  const Scalar _tmp45 = _tmp12 + _tmp20 + _tmp27 + _tmp44;
  const Scalar _tmp46 = _tmp26 + _tmp44;
  const Scalar _tmp47 = _tmp21 - 1;

  // Output terms (2)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_a[0];
  _res[1] = -_a[1];
  _res[2] = -_a[2];
  _res[3] = _a[3];
  _res[4] = -_a[4] * (_tmp11 + _tmp14 + 1) - _tmp4 - _tmp8;
  _res[5] = -_a[5] * (_tmp11 + _tmp22) - _tmp16 - _tmp19;
  _res[6] = -_a[6] * (_tmp14 + _tmp22) - _tmp23 - _tmp25;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _tmp31;
    _res_D_a(1, 0) = _tmp33;
    _res_D_a(2, 0) = _tmp35;
    _res_D_a(3, 0) = 0;
    _res_D_a(4, 0) = -_a[6] * (_tmp26 + _tmp29 + _tmp36 + _tmp9) - _tmp23 - _tmp25;
    _res_D_a(5, 0) = -_a[4] * _tmp37 - _a[5] * _tmp41 - _a[6] * _tmp39;
    _res_D_a(0, 1) = _tmp37;
    _res_D_a(1, 1) = _tmp41;
    _res_D_a(2, 1) = _tmp39;
    _res_D_a(3, 1) = -_a[4] * _tmp42 - _a[5] * _tmp43 - _a[6] * _tmp45;
    _res_D_a(4, 1) = 0;
    _res_D_a(5, 1) = -_a[4] * (_tmp40 + _tmp46) - _tmp4 - _tmp8;
    _res_D_a(0, 2) = _tmp42;
    _res_D_a(1, 2) = _tmp43;
    _res_D_a(2, 2) = _tmp45;
    _res_D_a(3, 2) = -_a[5] * (_tmp30 + _tmp46) - _tmp16 - _tmp19;
    _res_D_a(4, 2) = -_a[4] * _tmp31 - _a[5] * _tmp33 - _a[6] * _tmp35;
    _res_D_a(5, 2) = 0;
    _res_D_a(0, 3) = 0;
    _res_D_a(1, 3) = 0;
    _res_D_a(2, 3) = 0;
    _res_D_a(3, 3) = _tmp10 + _tmp13 - 1;
    _res_D_a(4, 3) = _tmp37;
    _res_D_a(5, 3) = _tmp42;
    _res_D_a(0, 4) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(3, 4) = _tmp33;
    _res_D_a(4, 4) = _tmp10 + _tmp47;
    _res_D_a(5, 4) = _tmp43;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 5) = _tmp35;
    _res_D_a(4, 5) = _tmp39;
    _res_D_a(5, 5) = _tmp13 + _tmp47;
  }

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *     res_D_a: (6x6) jacobian of res (6) wrt arg a (6)
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::ComposeWithJacobians(const sym::Pose3<Scalar>& a,
                                                                 const sym::Pose3<Scalar>& b,
                                                                 SelfJacobian* const res_D_a,
                                                                 SelfJacobian* const res_D_b) {
  // Total ops: 330

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (134)
  const Scalar _tmp0 = _a[2] * _b[1];
  const Scalar _tmp1 = _a[0] * _b[3];
  const Scalar _tmp2 = _a[1] * _b[2];
  const Scalar _tmp3 = _a[3] * _b[0];
  const Scalar _tmp4 = -_tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[3] * _b[1];
  const Scalar _tmp6 = _a[1] * _b[3];
  const Scalar _tmp7 = _a[0] * _b[2];
  const Scalar _tmp8 = _a[2] * _b[0];
  const Scalar _tmp9 = _tmp5 + _tmp6 - _tmp7 + _tmp8;
  const Scalar _tmp10 = _a[0] * _b[1];
  const Scalar _tmp11 = _a[2] * _b[3];
  const Scalar _tmp12 = _a[3] * _b[2];
  const Scalar _tmp13 = _a[1] * _b[0];
  const Scalar _tmp14 = _tmp10 + _tmp11 + _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[1] * _b[1];
  const Scalar _tmp16 = _a[2] * _b[2];
  const Scalar _tmp17 = _a[0] * _b[0];
  const Scalar _tmp18 = _a[3] * _b[3];
  const Scalar _tmp19 = -_tmp15 - _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 = 2 * _a[0];
  const Scalar _tmp21 = _a[2] * _tmp20;
  const Scalar _tmp22 = 2 * _a[3];
  const Scalar _tmp23 = _a[1] * _tmp22;
  const Scalar _tmp24 = _tmp21 + _tmp23;
  const Scalar _tmp25 = _a[1] * _tmp20;
  const Scalar _tmp26 = _a[2] * _tmp22;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = _tmp25 + _tmp27;
  const Scalar _tmp29 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp30 = -2 * _tmp29;
  const Scalar _tmp31 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp32 = -2 * _tmp31;
  const Scalar _tmp33 = _tmp30 + _tmp32 + 1;
  const Scalar _tmp34 = _tmp25 + _tmp26;
  const Scalar _tmp35 = 2 * _a[1] * _a[2];
  const Scalar _tmp36 = _a[0] * _tmp22;
  const Scalar _tmp37 = -_tmp36;
  const Scalar _tmp38 = _tmp35 + _tmp37;
  const Scalar _tmp39 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp40 = 1 - 2 * _tmp39;
  const Scalar _tmp41 = _tmp30 + _tmp40;
  const Scalar _tmp42 = -_tmp23;
  const Scalar _tmp43 = _tmp21 + _tmp42;
  const Scalar _tmp44 = _tmp35 + _tmp36;
  const Scalar _tmp45 = _tmp32 + _tmp40;
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp47 = -_tmp46;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp52 = -_tmp51;
  const Scalar _tmp53 = _tmp50 + _tmp52;
  const Scalar _tmp54 = _tmp47 + _tmp48 + _tmp53;
  const Scalar _tmp55 = 2 * _tmp14;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp57 = -_tmp56;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp60 = -_tmp59;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp62 = -_tmp61;
  const Scalar _tmp63 = _tmp60 + _tmp62;
  const Scalar _tmp64 = _tmp57 + _tmp58 + _tmp63;
  const Scalar _tmp65 = 2 * _tmp9;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp67 = -_tmp66;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp69 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp70 = -_tmp69;
  const Scalar _tmp71 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp72 = -_tmp71;
  const Scalar _tmp73 = _tmp70 + _tmp72;
  const Scalar _tmp74 = _tmp67 + _tmp68 + _tmp73;
  const Scalar _tmp75 = 2 * _tmp4;
  const Scalar _tmp76 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp77 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp78 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp80 = _tmp78 - _tmp79;
  const Scalar _tmp81 = _tmp76 + _tmp77 + _tmp80;
  const Scalar _tmp82 = 2 * _tmp19;
  const Scalar _tmp83 = -_tmp25;
  const Scalar _tmp84 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp85 = -_tmp84;
  const Scalar _tmp86 = _tmp29 + _tmp85;
  const Scalar _tmp87 = -_tmp31;
  const Scalar _tmp88 = _tmp39 + _tmp87;
  const Scalar _tmp89 = -_tmp35;
  const Scalar _tmp90 = -_tmp39;
  const Scalar _tmp91 = -_tmp76;
  const Scalar _tmp92 = _tmp78 + _tmp79;
  const Scalar _tmp93 = _tmp77 + _tmp91 + _tmp92;
  const Scalar _tmp94 = -_tmp68;
  const Scalar _tmp95 = _tmp67 + _tmp94;
  const Scalar _tmp96 = _tmp69 + _tmp72;
  const Scalar _tmp97 = _tmp95 + _tmp96;
  const Scalar _tmp98 = -_tmp58;
  const Scalar _tmp99 = _tmp57 + _tmp98;
  const Scalar _tmp100 = _tmp60 + _tmp61;
  const Scalar _tmp101 = _tmp100 + _tmp99;
  const Scalar _tmp102 = -_tmp48;
  const Scalar _tmp103 = _tmp102 + _tmp47;
  const Scalar _tmp104 = _tmp49 + _tmp52;
  const Scalar _tmp105 = _tmp103 + _tmp104;
  const Scalar _tmp106 = -_tmp21;
  const Scalar _tmp107 = -_tmp29;
  const Scalar _tmp108 = _tmp107 + _tmp84;
  const Scalar _tmp109 = _tmp66 + _tmp73 + _tmp94;
  const Scalar _tmp110 = -_tmp77;
  const Scalar _tmp111 = _tmp110 + _tmp76 + _tmp92;
  const Scalar _tmp112 = _tmp102 + _tmp46 + _tmp53;
  const Scalar _tmp113 = _tmp56 + _tmp63 + _tmp98;
  const Scalar _tmp114 = _tmp31 + _tmp90;
  const Scalar _tmp115 = _tmp104 + _tmp46 + _tmp48;
  const Scalar _tmp116 = _tmp70 + _tmp71 + _tmp95;
  const Scalar _tmp117 = 2 * _tmp116;
  const Scalar _tmp118 = -_tmp117 * _tmp4;
  const Scalar _tmp119 = _tmp59 + _tmp62 + _tmp99;
  const Scalar _tmp120 = _tmp110 + _tmp80 + _tmp91;
  const Scalar _tmp121 = _tmp120 * _tmp82;
  const Scalar _tmp122 = -_tmp119 * _tmp65 + _tmp121;
  const Scalar _tmp123 = _tmp120 * _tmp55;
  const Scalar _tmp124 = _tmp119 * _tmp75;
  const Scalar _tmp125 = _tmp117 * _tmp14;
  const Scalar _tmp126 = _tmp120 * _tmp65;
  const Scalar _tmp127 = _tmp66 + _tmp68 + _tmp96;
  const Scalar _tmp128 = _tmp103 + _tmp50 + _tmp51;
  const Scalar _tmp129 = -_tmp128 * _tmp55;
  const Scalar _tmp130 = _tmp128 * _tmp65;
  const Scalar _tmp131 = _tmp120 * _tmp75;
  const Scalar _tmp132 = _tmp100 + _tmp56 + _tmp58;
  const Scalar _tmp133 = 2 * _tmp132;

  // Output terms (3)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp4;
  _res[1] = _tmp9;
  _res[2] = _tmp14;
  _res[3] = _tmp19;
  _res[4] = _a[4] + _b[4] * _tmp33 + _b[5] * _tmp28 + _b[6] * _tmp24;
  _res[5] = _a[5] + _b[4] * _tmp34 + _b[5] * _tmp41 + _b[6] * _tmp38;
  _res[6] = _a[6] + _b[4] * _tmp43 + _b[5] * _tmp44 + _b[6] * _tmp45;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _tmp54 * _tmp55 - _tmp64 * _tmp65 - _tmp74 * _tmp75 + _tmp81 * _tmp82;
    _res_D_a(1, 0) = _tmp54 * _tmp82 - _tmp55 * _tmp81 + _tmp64 * _tmp75 - _tmp65 * _tmp74;
    _res_D_a(2, 0) = -_tmp54 * _tmp75 - _tmp55 * _tmp74 + _tmp64 * _tmp82 + _tmp65 * _tmp81;
    _res_D_a(3, 0) = _b[5] * _tmp24 + _b[6] * (_tmp26 + _tmp83);
    _res_D_a(4, 0) = _b[5] * _tmp38 + _b[6] * (_tmp86 + _tmp88);
    _res_D_a(5, 0) = _b[5] * (_tmp29 + _tmp84 + _tmp87 + _tmp90) + _b[6] * (_tmp37 + _tmp89);
    _res_D_a(0, 1) = -_tmp101 * _tmp75 + _tmp105 * _tmp82 + _tmp55 * _tmp93 - _tmp65 * _tmp97;
    _res_D_a(1, 1) = -_tmp101 * _tmp65 - _tmp105 * _tmp55 + _tmp75 * _tmp97 + _tmp82 * _tmp93;
    _res_D_a(2, 1) = -_tmp101 * _tmp55 + _tmp105 * _tmp65 - _tmp75 * _tmp93 + _tmp82 * _tmp97;
    _res_D_a(3, 1) = _b[4] * (_tmp106 + _tmp42) + _b[6] * (_tmp108 + _tmp88);
    _res_D_a(4, 1) = _b[4] * (_tmp36 + _tmp89) + _b[6] * _tmp34;
    _res_D_a(5, 1) = _b[4] * (_tmp107 + _tmp31 + _tmp39 + _tmp85) + _b[6] * _tmp43;
    _res_D_a(0, 2) = _tmp109 * _tmp55 - _tmp111 * _tmp65 - _tmp112 * _tmp75 + _tmp113 * _tmp82;
    _res_D_a(1, 2) = _tmp109 * _tmp82 + _tmp111 * _tmp75 - _tmp112 * _tmp65 - _tmp113 * _tmp55;
    _res_D_a(2, 2) = -_tmp109 * _tmp75 + _tmp111 * _tmp82 - _tmp112 * _tmp55 + _tmp113 * _tmp65;
    _res_D_a(3, 2) = _b[4] * _tmp28 + _b[5] * (_tmp114 + _tmp86);
    _res_D_a(4, 2) = _b[4] * (_tmp108 + _tmp114) + _b[5] * (_tmp27 + _tmp83);
    _res_D_a(5, 2) = _b[4] * _tmp44 + _b[5] * (_tmp106 + _tmp23);
    _res_D_a(0, 3) = 0;
    _res_D_a(1, 3) = 0;
    _res_D_a(2, 3) = 0;
    _res_D_a(3, 3) = 1;
    _res_D_a(4, 3) = 0;
    _res_D_a(5, 3) = 0;
    _res_D_a(0, 4) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(3, 4) = 0;
    _res_D_a(4, 4) = 1;
    _res_D_a(5, 4) = 0;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 5) = 0;
    _res_D_a(4, 5) = 0;
    _res_D_a(5, 5) = 1;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _tmp115 * _tmp55 + _tmp118 + _tmp122;
    _res_D_b(1, 0) = _tmp115 * _tmp82 - _tmp116 * _tmp65 - _tmp123 + _tmp124;
    _res_D_b(2, 0) = -_tmp115 * _tmp75 + _tmp119 * _tmp82 - _tmp125 + _tmp126;
    _res_D_b(3, 0) = 0;
    _res_D_b(4, 0) = 0;
    _res_D_b(5, 0) = 0;
    _res_D_b(0, 1) = _tmp123 - _tmp124 - _tmp127 * _tmp65 + _tmp128 * _tmp82;
    _res_D_b(1, 1) = _tmp122 + _tmp127 * _tmp75 + _tmp129;
    _res_D_b(2, 1) = -_tmp119 * _tmp55 + _tmp127 * _tmp82 + _tmp130 - _tmp131;
    _res_D_b(3, 1) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(0, 2) = _tmp125 - _tmp126 - _tmp128 * _tmp75 + _tmp132 * _tmp82;
    _res_D_b(1, 2) = _tmp116 * _tmp82 - _tmp130 + _tmp131 - _tmp133 * _tmp14;
    _res_D_b(2, 2) = _tmp118 + _tmp121 + _tmp129 + _tmp133 * _tmp9;
    _res_D_b(3, 2) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(0, 3) = 0;
    _res_D_b(1, 3) = 0;
    _res_D_b(2, 3) = 0;
    _res_D_b(3, 3) = _tmp33;
    _res_D_b(4, 3) = _tmp34;
    _res_D_b(5, 3) = _tmp43;
    _res_D_b(0, 4) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(3, 4) = _tmp28;
    _res_D_b(4, 4) = _tmp41;
    _res_D_b(5, 4) = _tmp44;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 5) = _tmp24;
    _res_D_b(4, 5) = _tmp38;
    _res_D_b(5, 5) = _tmp45;
  }

  return sym::Pose3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply ``compose(inverse(a), b)``.
 *
 * Returns:
 *     Element: c such that a @ c = b
 *     res_D_a: (6x6) jacobian of res (6) wrt arg a (6)
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> GroupOps<Pose3<Scalar>>::BetweenWithJacobians(const sym::Pose3<Scalar>& a,
                                                                 const sym::Pose3<Scalar>& b,
                                                                 SelfJacobian* const res_D_a,
                                                                 SelfJacobian* const res_D_b) {
  // Total ops: 306

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (142)
  const Scalar _tmp0 = _a[2] * _b[1];
  const Scalar _tmp1 = _a[0] * _b[3];
  const Scalar _tmp2 = _a[1] * _b[2];
  const Scalar _tmp3 = _a[3] * _b[0];
  const Scalar _tmp4 = _tmp0 - _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[3] * _b[1];
  const Scalar _tmp6 = _a[1] * _b[3];
  const Scalar _tmp7 = _a[0] * _b[2];
  const Scalar _tmp8 = _a[2] * _b[0];
  const Scalar _tmp9 = _tmp5 - _tmp6 + _tmp7 - _tmp8;
  const Scalar _tmp10 = _a[0] * _b[1];
  const Scalar _tmp11 = _a[2] * _b[3];
  const Scalar _tmp12 = _a[3] * _b[2];
  const Scalar _tmp13 = _a[1] * _b[0];
  const Scalar _tmp14 = -_tmp10 - _tmp11 + _tmp12 + _tmp13;
  const Scalar _tmp15 = _a[1] * _b[1];
  const Scalar _tmp16 = _a[2] * _b[2];
  const Scalar _tmp17 = _a[0] * _b[0];
  const Scalar _tmp18 = _a[3] * _b[3];
  const Scalar _tmp19 = _tmp15 + _tmp16 + _tmp17 + _tmp18;
  const Scalar _tmp20 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp24 = 2 * _tmp23;
  const Scalar _tmp25 = 1 - _tmp24;
  const Scalar _tmp26 = _tmp22 + _tmp25;
  const Scalar _tmp27 = 2 * _a[0];
  const Scalar _tmp28 = _a[1] * _tmp27;
  const Scalar _tmp29 = 2 * _a[3];
  const Scalar _tmp30 = _a[2] * _tmp29;
  const Scalar _tmp31 = _tmp28 + _tmp30;
  const Scalar _tmp32 = _a[5] * _tmp31;
  const Scalar _tmp33 = _a[2] * _tmp27;
  const Scalar _tmp34 = _a[1] * _tmp29;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 = _tmp33 + _tmp35;
  const Scalar _tmp37 = _a[6] * _tmp36;
  const Scalar _tmp38 = _b[5] * _tmp31 + _b[6] * _tmp36;
  const Scalar _tmp39 = -_tmp30;
  const Scalar _tmp40 = _tmp28 + _tmp39;
  const Scalar _tmp41 = _a[4] * _tmp40;
  const Scalar _tmp42 = 2 * _a[1] * _a[2];
  const Scalar _tmp43 = _a[0] * _tmp29;
  const Scalar _tmp44 = _tmp42 + _tmp43;
  const Scalar _tmp45 = _a[6] * _tmp44;
  const Scalar _tmp46 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp47 = 2 * _tmp46;
  const Scalar _tmp48 = -_tmp47;
  const Scalar _tmp49 = _tmp25 + _tmp48;
  const Scalar _tmp50 = _b[4] * _tmp40 + _b[6] * _tmp44;
  const Scalar _tmp51 = _tmp33 + _tmp34;
  const Scalar _tmp52 = _a[4] * _tmp51;
  const Scalar _tmp53 = -_tmp43;
  const Scalar _tmp54 = _tmp42 + _tmp53;
  const Scalar _tmp55 = _a[5] * _tmp54;
  const Scalar _tmp56 = _tmp22 + _tmp48 + 1;
  const Scalar _tmp57 = _b[4] * _tmp51 + _b[5] * _tmp54;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp62 = -_tmp58 - _tmp59 + _tmp60 + _tmp61;
  const Scalar _tmp63 = 2 * _tmp14;
  const Scalar _tmp64 = _tmp62 * _tmp63;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp69 = -_tmp65 + _tmp66 - _tmp67 + _tmp68;
  const Scalar _tmp70 = 2 * _tmp9;
  const Scalar _tmp71 = -_tmp69 * _tmp70;
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp73 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp74 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp76 = _tmp72 - _tmp73 - _tmp74 + _tmp75;
  const Scalar _tmp77 = 2 * _tmp4;
  const Scalar _tmp78 = _tmp76 * _tmp77;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp80 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp81 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp82 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp83 = -_tmp79 - _tmp80 - _tmp81 - _tmp82;
  const Scalar _tmp84 = 2 * _tmp19;
  const Scalar _tmp85 = _tmp83 * _tmp84;
  const Scalar _tmp86 = -_tmp70 * _tmp76;
  const Scalar _tmp87 = _tmp63 * _tmp83;
  const Scalar _tmp88 = _tmp69 * _tmp77;
  const Scalar _tmp89 = _tmp62 * _tmp84 + _tmp88;
  const Scalar _tmp90 = _tmp70 * _tmp83;
  const Scalar _tmp91 = -_tmp62 * _tmp77;
  const Scalar _tmp92 = _tmp69 * _tmp84 + _tmp91;
  const Scalar _tmp93 = -_tmp46;
  const Scalar _tmp94 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp95 = _tmp93 + _tmp94;
  const Scalar _tmp96 = -_tmp20;
  const Scalar _tmp97 = _tmp23 + _tmp96;
  const Scalar _tmp98 = _tmp95 + _tmp97;
  const Scalar _tmp99 = -_tmp28;
  const Scalar _tmp100 = _tmp30 + _tmp99;
  const Scalar _tmp101 = -_tmp42;
  const Scalar _tmp102 = _tmp101 + _tmp53;
  const Scalar _tmp103 = -_tmp94;
  const Scalar _tmp104 = _tmp103 + _tmp46;
  const Scalar _tmp105 = _tmp104 + _tmp97;
  const Scalar _tmp106 = _tmp65 - _tmp66 + _tmp67 - _tmp68;
  const Scalar _tmp107 = 2 * _tmp106;
  const Scalar _tmp108 = _tmp58 + _tmp59 - _tmp60 - _tmp61;
  const Scalar _tmp109 = _tmp108 * _tmp84 + _tmp86;
  const Scalar _tmp110 = _tmp107 * _tmp9;
  const Scalar _tmp111 = 2 * _tmp108;
  const Scalar _tmp112 = -_tmp111 * _tmp14;
  const Scalar _tmp113 = _tmp112 + _tmp78;
  const Scalar _tmp114 = -_tmp107 * _tmp14;
  const Scalar _tmp115 = _tmp77 * _tmp83;
  const Scalar _tmp116 = _tmp111 * _tmp9;
  const Scalar _tmp117 = _tmp116 + _tmp76 * _tmp84;
  const Scalar _tmp118 = -_tmp33;
  const Scalar _tmp119 = _tmp118 + _tmp35;
  const Scalar _tmp120 = _tmp101 + _tmp43;
  const Scalar _tmp121 = -_tmp23;
  const Scalar _tmp122 = _tmp121 + _tmp20;
  const Scalar _tmp123 = _tmp104 + _tmp122;
  const Scalar _tmp124 = _tmp121 + _tmp46 + _tmp94 + _tmp96;
  const Scalar _tmp125 = -_tmp72 + _tmp73 + _tmp74 - _tmp75;
  const Scalar _tmp126 = _tmp125 * _tmp63;
  const Scalar _tmp127 = _tmp106 * _tmp84 + _tmp126;
  const Scalar _tmp128 = _tmp114 + _tmp125 * _tmp84;
  const Scalar _tmp129 = -_tmp125 * _tmp77;
  const Scalar _tmp130 = _tmp110 + _tmp129;
  const Scalar _tmp131 = _tmp122 + _tmp95;
  const Scalar _tmp132 = _tmp118 + _tmp34;
  const Scalar _tmp133 = _tmp39 + _tmp99;
  const Scalar _tmp134 = _tmp103 + _tmp20 + _tmp23 + _tmp93;
  const Scalar _tmp135 = _tmp24 - 1;
  const Scalar _tmp136 = _tmp79 + _tmp80 + _tmp81 + _tmp82;
  const Scalar _tmp137 = _tmp136 * _tmp84;
  const Scalar _tmp138 = _tmp137 + _tmp71;
  const Scalar _tmp139 = _tmp136 * _tmp63;
  const Scalar _tmp140 = _tmp136 * _tmp70;
  const Scalar _tmp141 = _tmp136 * _tmp77;

  // Output terms (3)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = _tmp4;
  _res[1] = _tmp9;
  _res[2] = _tmp14;
  _res[3] = _tmp19;
  _res[4] = -_a[4] * _tmp26 + _b[4] * _tmp26 - _tmp32 - _tmp37 + _tmp38;
  _res[5] = -_a[5] * _tmp49 + _b[5] * _tmp49 - _tmp41 - _tmp45 + _tmp50;
  _res[6] = -_a[6] * _tmp56 + _b[6] * _tmp56 - _tmp52 - _tmp55 + _tmp57;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _tmp64 + _tmp71 - _tmp78 + _tmp85;
    _res_D_a(1, 0) = _tmp86 - _tmp87 + _tmp89;
    _res_D_a(2, 0) = -_tmp63 * _tmp76 + _tmp90 + _tmp92;
    _res_D_a(3, 0) = 0;
    _res_D_a(4, 0) = -_a[6] * _tmp98 + _b[6] * _tmp98 - _tmp52 - _tmp55 + _tmp57;
    _res_D_a(5, 0) = -_a[4] * _tmp100 - _a[5] * _tmp105 - _a[6] * _tmp102 + _b[4] * _tmp100 +
                     _b[5] * _tmp105 + _b[6] * _tmp102;
    _res_D_a(0, 1) = -_tmp107 * _tmp4 + _tmp109 + _tmp87;
    _res_D_a(1, 1) = -_tmp110 + _tmp113 + _tmp85;
    _res_D_a(2, 1) = _tmp114 - _tmp115 + _tmp117;
    _res_D_a(3, 1) = -_a[4] * _tmp119 - _a[5] * _tmp120 - _a[6] * _tmp123 + _b[4] * _tmp119 +
                     _b[5] * _tmp120 + _b[6] * _tmp123;
    _res_D_a(4, 1) = 0;
    _res_D_a(5, 1) = -_a[4] * _tmp124 + _b[4] * _tmp124 - _tmp32 - _tmp37 + _tmp38;
    _res_D_a(0, 2) = _tmp127 - _tmp90 + _tmp91;
    _res_D_a(1, 2) = _tmp115 + _tmp128 - _tmp62 * _tmp70;
    _res_D_a(2, 2) = _tmp130 - _tmp64 + _tmp85;
    _res_D_a(3, 2) = -_a[5] * _tmp131 + _b[5] * _tmp131 - _tmp41 - _tmp45 + _tmp50;
    _res_D_a(4, 2) = -_a[4] * _tmp134 - _a[5] * _tmp133 - _a[6] * _tmp132 + _b[4] * _tmp134 +
                     _b[5] * _tmp133 + _b[6] * _tmp132;
    _res_D_a(5, 2) = 0;
    _res_D_a(0, 3) = 0;
    _res_D_a(1, 3) = 0;
    _res_D_a(2, 3) = 0;
    _res_D_a(3, 3) = _tmp135 + _tmp21;
    _res_D_a(4, 3) = _tmp100;
    _res_D_a(5, 3) = _tmp119;
    _res_D_a(0, 4) = 0;
    _res_D_a(1, 4) = 0;
    _res_D_a(2, 4) = 0;
    _res_D_a(3, 4) = _tmp133;
    _res_D_a(4, 4) = _tmp135 + _tmp47;
    _res_D_a(5, 4) = _tmp120;
    _res_D_a(0, 5) = 0;
    _res_D_a(1, 5) = 0;
    _res_D_a(2, 5) = 0;
    _res_D_a(3, 5) = _tmp132;
    _res_D_a(4, 5) = _tmp102;
    _res_D_a(5, 5) = _tmp21 + _tmp47 - 1;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _tmp129 + _tmp138 + _tmp64;
    _res_D_b(1, 0) = -_tmp125 * _tmp70 - _tmp139 + _tmp89;
    _res_D_b(2, 0) = -_tmp126 + _tmp140 + _tmp92;
    _res_D_b(3, 0) = 0;
    _res_D_b(4, 0) = 0;
    _res_D_b(5, 0) = 0;
    _res_D_b(0, 1) = _tmp109 + _tmp139 - _tmp88;
    _res_D_b(1, 1) = _tmp113 + _tmp138;
    _res_D_b(2, 1) = _tmp117 - _tmp141 - _tmp63 * _tmp69;
    _res_D_b(3, 1) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(0, 2) = -_tmp111 * _tmp4 + _tmp127 - _tmp140;
    _res_D_b(1, 2) = -_tmp116 + _tmp128 + _tmp141;
    _res_D_b(2, 2) = _tmp112 + _tmp130 + _tmp137;
    _res_D_b(3, 2) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(0, 3) = 0;
    _res_D_b(1, 3) = 0;
    _res_D_b(2, 3) = 0;
    _res_D_b(3, 3) = _tmp26;
    _res_D_b(4, 3) = _tmp40;
    _res_D_b(5, 3) = _tmp51;
    _res_D_b(0, 4) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(3, 4) = _tmp31;
    _res_D_b(4, 4) = _tmp49;
    _res_D_b(5, 4) = _tmp54;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 5) = _tmp36;
    _res_D_b(4, 5) = _tmp44;
    _res_D_b(5, 5) = _tmp56;
  }

  return sym::Pose3<Scalar>(_res);
}

}  // namespace sym

// Explicit instantiation
template struct sym::GroupOps<sym::Pose3<double>>;
template struct sym::GroupOps<sym::Pose3<float>>;
