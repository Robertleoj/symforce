// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     res_D_a: (6x6) jacobian of res (6) wrt arg a (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> ComposePose3Jacobian0(const sym::Pose3<Scalar>& a,
                                                  const sym::Pose3<Scalar>& b) {
  // Total ops: 234

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (87)
  const Scalar _tmp0 = _a[2] * _b[3];
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = _a[3] * _b[2];
  const Scalar _tmp3 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = _a[0] * _b[1];
  const Scalar _tmp6 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp7 = _a[1] * _b[0];
  const Scalar _tmp8 = -Scalar(1) / Scalar(2) * _tmp7;
  const Scalar _tmp9 = -_tmp6 + _tmp8;
  const Scalar _tmp10 = _tmp1 + _tmp4 + _tmp9;
  const Scalar _tmp11 = _tmp0 + _tmp2 + _tmp5 - _tmp7;
  const Scalar _tmp12 = 2 * _tmp11;
  const Scalar _tmp13 = _a[3] * _b[1];
  const Scalar _tmp14 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp15 = _a[1] * _b[3];
  const Scalar _tmp16 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = _a[0] * _b[2];
  const Scalar _tmp19 = -Scalar(1) / Scalar(2) * _tmp18;
  const Scalar _tmp20 = _a[2] * _b[0];
  const Scalar _tmp21 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp14 + _tmp17 + _tmp19 + _tmp22;
  const Scalar _tmp24 = _tmp13 + _tmp15 - _tmp18 + _tmp20;
  const Scalar _tmp25 = 2 * _tmp24;
  const Scalar _tmp26 = _a[1] * _b[2];
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp28 = _a[3] * _b[0];
  const Scalar _tmp29 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp30 = -_tmp29;
  const Scalar _tmp31 = _a[2] * _b[1];
  const Scalar _tmp32 = -Scalar(1) / Scalar(2) * _tmp31;
  const Scalar _tmp33 = _a[0] * _b[3];
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp35 = _tmp32 - _tmp34;
  const Scalar _tmp36 = _tmp27 + _tmp30 + _tmp35;
  const Scalar _tmp37 = _tmp26 + _tmp28 - _tmp31 + _tmp33;
  const Scalar _tmp38 = 2 * _tmp37;
  const Scalar _tmp39 = _a[1] * _b[1];
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp41 = _a[0] * _b[0];
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp43 = _a[3] * _b[3];
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp45 = _a[2] * _b[2];
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp47 = _tmp44 + _tmp46;
  const Scalar _tmp48 = _tmp40 - _tmp42 + _tmp47;
  const Scalar _tmp49 = -2 * _tmp39 - 2 * _tmp41 + 2 * _tmp43 - 2 * _tmp45;
  const Scalar _tmp50 = 2 * _a[2];
  const Scalar _tmp51 = _a[0] * _tmp50;
  const Scalar _tmp52 = 2 * _a[1];
  const Scalar _tmp53 = _a[3] * _tmp52;
  const Scalar _tmp54 = _a[0] * _tmp52;
  const Scalar _tmp55 = -_tmp54;
  const Scalar _tmp56 = _a[3] * _tmp50;
  const Scalar _tmp57 = _a[2] * _tmp52;
  const Scalar _tmp58 = 2 * _a[0] * _a[3];
  const Scalar _tmp59 = -_tmp58;
  const Scalar _tmp60 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp61 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp62 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp63 = -_tmp62;
  const Scalar _tmp64 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp65 = -_tmp64;
  const Scalar _tmp66 = -_tmp57;
  const Scalar _tmp67 = -_tmp61;
  const Scalar _tmp68 = _tmp60 + _tmp67;
  const Scalar _tmp69 = _tmp63 + _tmp64;
  const Scalar _tmp70 = -_tmp40 + _tmp42 + _tmp47;
  const Scalar _tmp71 = -_tmp27;
  const Scalar _tmp72 = _tmp30 + _tmp32 + _tmp34 + _tmp71;
  const Scalar _tmp73 = -_tmp14 + _tmp19;
  const Scalar _tmp74 = 2 * _tmp17 + 2 * _tmp21 + 2 * _tmp73;
  const Scalar _tmp75 = -_tmp1;
  const Scalar _tmp76 = _tmp3 + _tmp75 + _tmp9;
  const Scalar _tmp77 = -_tmp51;
  const Scalar _tmp78 = -_tmp53;
  const Scalar _tmp79 = -_tmp60;
  const Scalar _tmp80 = _tmp61 + _tmp79;
  const Scalar _tmp81 = _tmp62 + _tmp65;
  const Scalar _tmp82 = _tmp29 + _tmp35 + _tmp71;
  const Scalar _tmp83 = _tmp40 + _tmp42 + _tmp44 - _tmp46;
  const Scalar _tmp84 = _tmp4 + _tmp6 + _tmp75 + _tmp8;
  const Scalar _tmp85 = _tmp16 + _tmp22 + _tmp73;
  const Scalar _tmp86 = -_tmp56;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res_D_a;

  _res_D_a(0, 0) = _tmp10 * _tmp12 - _tmp23 * _tmp25 - _tmp36 * _tmp38 + _tmp48 * _tmp49;
  _res_D_a(1, 0) = _tmp10 * _tmp49 - _tmp12 * _tmp48 + _tmp23 * _tmp38 - _tmp25 * _tmp36;
  _res_D_a(2, 0) = -_tmp10 * _tmp38 - _tmp12 * _tmp36 + _tmp23 * _tmp49 + _tmp25 * _tmp48;
  _res_D_a(3, 0) = _b[5] * (_tmp51 + _tmp53) + _b[6] * (_tmp55 + _tmp56);
  _res_D_a(4, 0) = _b[5] * (_tmp57 + _tmp59) + _b[6] * (_tmp60 + _tmp61 + _tmp63 + _tmp65);
  _res_D_a(5, 0) = _b[5] * (_tmp68 + _tmp69) + _b[6] * (_tmp59 + _tmp66);
  _res_D_a(0, 1) = _tmp12 * _tmp70 - _tmp25 * _tmp72 - _tmp37 * _tmp74 + _tmp49 * _tmp76;
  _res_D_a(1, 1) = -_tmp12 * _tmp76 - _tmp24 * _tmp74 + _tmp38 * _tmp72 + _tmp49 * _tmp70;
  _res_D_a(2, 1) = -_tmp11 * _tmp74 + _tmp25 * _tmp76 - _tmp38 * _tmp70 + _tmp49 * _tmp72;
  _res_D_a(3, 1) = _b[4] * (_tmp77 + _tmp78) + _b[6] * (_tmp69 + _tmp80);
  _res_D_a(4, 1) = _b[4] * (_tmp58 + _tmp66) + _b[6] * (_tmp54 + _tmp56);
  _res_D_a(5, 1) = _b[4] * (_tmp80 + _tmp81) + _b[6] * (_tmp51 + _tmp78);
  _res_D_a(0, 2) = _tmp12 * _tmp82 - _tmp25 * _tmp83 - _tmp38 * _tmp84 + _tmp49 * _tmp85;
  _res_D_a(1, 2) = -_tmp12 * _tmp85 - _tmp25 * _tmp84 + _tmp38 * _tmp83 + _tmp49 * _tmp82;
  _res_D_a(2, 2) = -_tmp12 * _tmp84 + _tmp25 * _tmp85 - _tmp38 * _tmp82 + _tmp49 * _tmp83;
  _res_D_a(3, 2) = _b[4] * (_tmp54 + _tmp86) + _b[5] * (_tmp68 + _tmp81);
  _res_D_a(4, 2) = _b[4] * (_tmp62 + _tmp64 + _tmp67 + _tmp79) + _b[5] * (_tmp55 + _tmp86);
  _res_D_a(5, 2) = _b[4] * (_tmp57 + _tmp58) + _b[5] * (_tmp53 + _tmp77);
  _res_D_a(0, 3) = 0;
  _res_D_a(1, 3) = 0;
  _res_D_a(2, 3) = 0;
  _res_D_a(3, 3) = 1;
  _res_D_a(4, 3) = 0;
  _res_D_a(5, 3) = 0;
  _res_D_a(0, 4) = 0;
  _res_D_a(1, 4) = 0;
  _res_D_a(2, 4) = 0;
  _res_D_a(3, 4) = 0;
  _res_D_a(4, 4) = 1;
  _res_D_a(5, 4) = 0;
  _res_D_a(0, 5) = 0;
  _res_D_a(1, 5) = 0;
  _res_D_a(2, 5) = 0;
  _res_D_a(3, 5) = 0;
  _res_D_a(4, 5) = 0;
  _res_D_a(5, 5) = 1;

  return _res_D_a;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
